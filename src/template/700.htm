
<div class="img--content sprite layer"></div>

<div class="sprite layer mytab" data-tab="1">

<div class="sprite layer tabHeading impact">Impact of BMI Reduction Tool</div>











<!-- ******************** PASTING BEGINS HERE ******************** -->
<!-- ******************** PASTING BEGINS HERE ******************** -->
<!-- ******************** PASTING BEGINS HERE ******************** -->

    <form name="inputDashboard" method="GET" onSubmit="formatPopulation();">
        <div class="tabContent tabContent-1">

                <!-- modal start -->
               <div class="poi-modal-container">
                  <div class="poi-modal-title">
                     <div>
                           <img class="person-icon" src="./res/img/modal-person-green-icon.png" />
                           <p>TOTAL NUMBER OF INDIVIDUALS SELECTED</p>
                     </div>
                     <div class="exit">
                           <img src="./res/img/modal-exit-icon.png" />
                     </div>
                  </div>
                  <!-- <div id="poi-modal-data"> -->
                     <div class="poi-modal-list">
                           <p id="total-indiv-title">Total individuals (n)</p>
                           <p id="poi-modal__total-individuals">10,000</p>
                     </div>
                     <div class="poi-modal-list">
                           <p id="overweight-and-all-title">% With overweight and all obesity classes</p>
                           <p id="poi-modal__overweight-and-all">46.1%</p>
                     </div>
                     <div class="poi-modal-list">
                           <p id="among-indiv-title">Among individuals, % with overweight in all obesity classes and those <br> with overweight and obesity
                           </p>
                           <p id="poi-modal__among-indiv">100%</p>
                     </div>
                     <div class="poi-modal-list">
                           <p>Among individuals who are eligible, % using AOMs</p>
                           <p id="poi-modal__eligible">100%</p>
                     </div>
                     <div class="poi-modal-totals">
                           <p id="total-selected-title">Total selected individuals (n)</p>
                           <div class="total-row">
                              <img src="./res/img/icon-population.png" />
                              <p id="poi-modal__total-selected">4,613</p>
                           </div>
                     </div>
                  <!-- </div> -->
               </div>

                <!-- Loading Modal Here -->
                <div id="loadingModalBackdrop" class="loading-modal__backdrop hidden">
                    <div class="loading-modal__spinner">
                
                        <svg width="34px" height="27px" viewBox="0 0 34 27" version="1.1" xmlns="http://www.w3.org/2000/svg"
                            xmlns:xlink="http://www.w3.org/1999/xlink" class="loading-modal__arrow-up">
                            <g id="Symbols" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
                                <g id="ROI-Impact-of-BMI-Reduction-Tool-Header" transform="translate(-1648.000000, -204.000000)"
                                    fill="#FFFFFF" fill-rule="nonzero">
                                    <g id="Calculate" transform="translate(1612.500000, 180.000000)">
                                        <path
                                            d="M65.5844838,44.1063937 C63.1918187,45.7960572 60.3972256,46.6459057 57.5364735,46.6047678 C57.1594174,46.5992493 56.7833561,46.5821922 56.4117717,46.5480778 C56.2605513,46.5340307 56.1078385,46.508445 55.9556232,46.4883777 C55.6646234,46.451755 55.3736236,46.4116204 55.0866033,46.3544287 C54.911506,46.3203144 54.7408856,46.2771698 54.5682754,46.2350285 C54.2887166,46.1693082 54.011645,46.103588 53.7395477,46.0208105 C53.6077273,45.9811777 53.4803838,45.9325145 53.3510505,45.8898716 C53.0356764,45.7845185 52.7237843,45.6731452 52.4198511,45.5447147 C52.3502102,45.5161188 52.2840512,45.4850146 52.2149077,45.4534086 C51.8587438,45.2963823 51.5085491,45.1288207 51.1683032,44.9426968 C51.1528827,44.9346699 51.1384571,44.9256396 51.1230366,44.9171111 C49.9714732,44.2819822 48.9188995,43.4868169 47.9966539,42.5577027 C47.9812334,42.5411472 47.9668078,42.52409 47.9513873,42.5090396 C47.6663567,42.2185659 47.3922697,41.9130419 47.1321109,41.5974842 C47.0763981,41.5317639 47.0251622,41.4580167 46.9699469,41.3892863 C45.0896404,39.0188409 43.9564821,36.0182835 43.9564821,32.7523365 L47.5733363,32.7523365 L41.7861707,24 L36,32.7533399 L39.6168541,32.7533399 C39.6168541,36.5917055 40.803238,40.1481261 42.8183495,43.0889834 C42.8437187,43.1321281 42.8606315,43.1742693 42.8889854,43.2144038 C43.0984058,43.5164161 43.3297133,43.7928427 43.5525644,44.0777978 C43.6371285,44.186161 43.7137336,44.2975343 43.8012822,44.4023858 C44.1320769,44.8047344 44.4822715,45.1865141 44.84142,45.556755 C44.8747482,45.5908694 44.9080764,45.6279938 44.9433943,45.6621082 C46.1526602,46.8852078 47.517126,47.9131533 49.0049559,48.7339044 C49.0457456,48.7569817 49.0840481,48.7825675 49.1248378,48.8026348 C49.5546222,49.0359167 49.9928629,49.2476263 50.4420473,49.4437838 C50.552478,49.4924469 50.6609189,49.5461268 50.7723445,49.5947899 C51.1568622,49.7543247 51.5473491,49.8942938 51.942313,50.024731 C52.1288513,50.090953 52.3153897,50.1561716 52.5044152,50.2128616 C52.8486406,50.3182148 53.2023173,50.4035006 53.5584812,50.4892882 C53.7942656,50.5434698 54.0285578,50.6036716 54.2688192,50.651833 C54.3678089,50.6719003 54.4623216,50.7004961 54.5618087,50.7170516 C54.8975778,50.7772534 55.2338442,50.8113677 55.5686184,50.8515023 C55.6904901,50.866051 55.8083823,50.8886267 55.9317463,50.9001654 C56.533146,50.9598655 57.1355405,51 57.7354478,51 C61.412989,51 64.9985047,49.8651963 68.0751438,47.6914101 C69.0555893,46.9985879 69.2958507,45.634014 68.6059075,44.6451997 C67.9184516,43.6528735 66.5624422,43.4135714 65.5844838,44.1063937 Z"
                                            id="Path"></path>
                                    </g>
                                </g>
                            </g>
                        </svg>
                
                        <svg width="33px" height="27px" viewBox="0 0 33 27" version="1.1" xmlns="http://www.w3.org/2000/svg"
                            xmlns:xlink="http://www.w3.org/1999/xlink" class="loading-modal__arrow-down">
                            <g id="Symbols" stroke="none" stroke-width="1" fill="none" fill-rule="evenodd">
                                <g id="ROI-Impact-of-BMI-Reduction-Tool-Header" transform="translate(-1659.000000, -195.000000)"
                                    fill="#FFFFFF" fill-rule="nonzero">
                                    <g id="Calculate" transform="translate(1612.500000, 180.000000)">
                                        <path
                                            d="M75.8854685,33.2414389 C75.8824833,29.4155605 74.7043401,25.862744 72.6978149,22.9263246 C72.6694559,22.8776352 72.6495548,22.8264361 72.615723,22.7782487 C72.3669597,22.4203569 72.0958076,22.0855549 71.824158,21.7487451 C71.7933114,21.7090909 71.7649523,21.665923 71.7311205,21.6262688 C69.8967396,19.3800335 67.5907033,17.6437814 64.9796832,16.5083659 C64.9065467,16.4772448 64.8354004,16.4431121 64.7647516,16.4114891 C64.3468292,16.2378137 63.9204488,16.0837144 63.4905857,15.9406581 C63.3348599,15.8879532 63.1826167,15.8322365 63.0268908,15.7840491 C62.6507607,15.670106 62.2721428,15.5787507 61.8875547,15.4878974 C61.6756083,15.43971 61.4666471,15.3849972 61.2517156,15.3423313 C61.1477325,15.3227552 61.0457395,15.2906302 60.9417564,15.2710541 C60.6561761,15.2208589 60.3705958,15.199275 60.0820303,15.1626325 C59.8845122,15.1370329 59.6889842,15.1054099 59.4914661,15.0853318 C59.0103578,15.0396542 58.5327321,15.0200781 58.0551065,15.0125488 C57.9680393,15.0115449 57.8844548,15 57.7983827,15 C57.7814668,15 57.7670385,15.0040156 57.7516152,15.0060234 C54.0793706,15.0085332 50.4986709,16.1263804 47.4254485,18.2993307 C46.4433308,18.9920245 46.2050155,20.358338 46.8935924,21.3486893 C47.5796818,22.3390407 48.9334519,22.5799777 49.9155696,21.885778 C52.2892695,20.2092582 55.0604933,19.3584495 57.9003757,19.3855549 C58.3073525,19.3880647 58.7093541,19.4081428 59.1068779,19.4467931 C59.2282745,19.4593419 59.349671,19.4779141 59.471565,19.4939766 C59.7994351,19.5336308 60.1243201,19.5793084 60.440747,19.6420524 C60.5815471,19.6706637 60.720357,19.7078081 60.8586695,19.7389292 C61.1726088,19.8107083 61.4860506,19.887507 61.791532,19.981372 C61.8870572,20.0099833 61.9835773,20.0466258 62.0791025,20.0782487 C62.4298588,20.1936977 62.7746448,20.3181818 63.1109729,20.4607362 C63.1448047,20.4747909 63.1786365,20.4923592 63.2124683,20.5059119 C65.2359094,21.3843279 67.0110847,22.7355828 68.395204,24.4266592 C68.4041595,24.4366983 68.4121199,24.4492471 68.4210754,24.4587842 C70.3678974,26.8525934 71.5410653,29.9114891 71.543553,33.2414389 L67.9235487,33.2414389 L73.714262,42 L79.5,33.2414389 L75.8854685,33.2414389 Z"
                                            id="Path"></path>
                                    </g>
                                </g>
                            </g>
                        </svg>
                    </div>
                </div>



            <script>

                var myAges18To29 = 0;
                var myAges30To39 = 0;
                var myAges40To49 = 0;
                var myAges50To59 = 0;
                var myAges60To64 = 0;


                var myAgesTotal = 0;
                var myTimeHorizon = 0;
                var Wegovy_AOM;
                var totalSumproduct = 0;
                var totalSumproduct_30_70 = 0;
                var NI_weightgain = 0;
                var fixedAges18To29 = 0;
                var fixedAges30To39 = 0;
                var fixedAges40To49 = 0;
                var fixedAges50To59 = 0;
                var fixedAges60To64 = 0;
                var myDisplayIndustry;
                var LI_effic_y1 = 0;
                var LI_effic_y2 = 0;
                var LI_effic_y3 = 0;
                var LI_effic_y4 = 0;
                var LI_effic_y5 = 0;
                var LI_effic_y6 = 0;
                var LI_effic_y7 = 0;
                var LI_effic_y8 = 0;
                var LI_effic_y9 = 0;
                var LI_effic_y10 = 0;
                var Baseline18_29 = 0;
                var Baseline30_39 = 0;
                var Baseline40_49 = 0;
                var Baseline50_59 = 0;
                var Baseline60_64 = 0;
                var defaultIndustry = "Total_employed";
                var toShowIndustry = "Total_employed";
                var mySumProduct = 0;


                localStorage.setItem('whaIsTheIndustry', 'Total_employed');
                var myWorkingHoursInADayValue;
                var myEmployeeHourlyCompensationValue;
                var myWeightWatchersValue;
                var myIDEValue;
                var myJennyCraigValue;
                var myIDEMembershipValue;
                var fullResults;
                var myGenderWomen = 0;
                var myGenderMen = 0;
                var NI_effic_y1 = 0;
                var NI_effic_y2 = 0;
                var NI_effic_y3 = 0;
                var NI_effic_y4 = 0;
                var NI_effic_y5 = 0;
                var NI_effic_y6 = 0;
                var NI_effic_y7 = 0;
                var NI_effic_y8 = 0;
                var NI_effic_y9 = 0;
                var NI_effic_y10 = 0;
                var myAnnualweightReboundForWegovy = 0.3333;
                var myAnnualWeightReboundForOtherAOMs = 0.5;
                var BMI_change_AOM = 0;
                var BMI_change_ILT = 0;
                var BMI_change_NI = 0;
                var BMI_change_OAOM = 0;
                var myBL_18_29 = 0;
                var myBL_30_39 = 0;
                var myBL_40_49 = 0;
                var myBL_50_59 = 0;
                var myBL_60_64 = 0;
                var yr1_18_29 = 0;
                var yr1_30_39 = 0;
                var yr1_40_49 = 0;
                var yr1_50_59 = 0;
                var yr1_60_64 = 0;
                var yr2_18_29 = 0;
                var yr2_30_39 = 0;
                var yr2_40_49 = 0;
                var yr2_50_59 = 0;
                var yr2_60_64 = 0;
                var yr3_18_29 = 0;
                var yr3_30_39 = 0;
                var yr3_40_49 = 0;
                var yr3_50_59 = 0;
                var yr3_60_64 = 0;
                var yr4_18_29 = 0;
                var yr4_30_39 = 0;
                var yr4_40_49 = 0;
                var yr4_50_59 = 0;
                var yr4_60_64 = 0;
                var yr5_18_29 = 0;
                var yr5_30_39 = 0;
                var yr5_40_49 = 0;
                var yr5_50_59 = 0;
                var yr5_60_64 = 0;
                var yr6_18_29 = 0;
                var yr6_30_39 = 0;
                var yr6_40_49 = 0;
                var yr6_50_59 = 0;
                var yr6_60_64 = 0;
                var yr7_18_29 = 0;
                var yr7_30_39 = 0;
                var yr7_40_49 = 0;
                var yr7_50_59 = 0;
                var yr7_60_64 = 0;
                var yr8_18_29 = 0;
                var yr8_30_39 = 0;
                var yr8_40_49 = 0;
                var yr8_50_59 = 0;
                var yr8_60_64 = 0;
                var yr9_18_29 = 0;
                var yr9_30_39 = 0;
                var yr9_40_49 = 0;
                var yr9_50_59 = 0;
                var yr9_60_64 = 0;
                var yr10_18_29 = 0;
                var yr10_30_39 = 0;
                var yr10_40_49 = 0;
                var yr10_50_59 = 0;
                var yr10_60_64 = 0;
                var myPercentageEmployeesTakingAOMsAmongThoseEligibleValue = 0;
                var myPercentageIndividualsTakingAOMs = 0;
                var medicalCostsChkbx = true;

                const directMedicalCosts = [];
                const pharmacyCosts = [];
                const absenteeismCosts = [];
                const presenteeismCosts = [];
                const workersCosts = [];
                const STDCosts = [];
                const LTDCosts = [];
                const disabilityCosts = [];
                const TotalDirectAndIndirectCosts = [];
                const CumulativeTotalCosts = [];
                const CumulativeAOMInvestment = [];
                const CumulativeDirectMedicalCosts = [];
                const CumulativePharmacyCosts = [];
                const CumulativeAbsenteeismCosts = [];
                const CumulativePresenteeismCosts = [];
                const CumulativeWorkersCosts = [];
                const CumulativeDisabilityCosts = [];


                const directMedicalCosts_NI = [];
                const pharmacyCosts_NI = [];
                const absenteeismCosts_NI = [];
                const presenteeismCosts_NI = [];
                const workersCosts_NI = [];
                const STDCosts_NI = [];
                const LTDCosts_NI = [];
                const disabilityCosts_NI = [];
                const TotalDirectAndIndirectCosts_NI = [];
                const CumulativeTotalCosts_NI = [];
                const CumulativeInvestment_NI = [];
                const CumulativeDirectMedicalCosts_NI = [];
                const CumulativePharmacyCosts_NI = [];
                const CumulativeAbsenteeismCosts_NI = [];
                const CumulativePresenteeismCosts_NI = [];
                const CumulativeWorkersCosts_NI = [];
                const CumulativeDisabilityCosts_NI = [];


                const directMedicalCosts_ILT = [];
                const pharmacyCosts_ILT = [];
                const absenteeismCosts_ILT = [];
                const presenteeismCosts_ILT = [];
                const workersCosts_ILT = [];
                const STDCosts_ILT = [];
                const LTDCosts_ILT = [];
                const disabilityCosts_ILT = [];
                const TotalDirectAndIndirectCosts_ILT = [];
                const CumulativeTotalCosts_ILT = [];
                const CumulativeInvestment_ILT = [];
                const CumulativeDirectMedicalCosts_ILT = [];
                const CumulativePharmacyCosts_ILT = [];
                const CumulativeAbsenteeismCosts_ILT = [];
                const CumulativePresenteeismCosts_ILT = [];
                const CumulativeWorkersCosts_ILT = [];
                const CumulativeDisabilityCosts_ILT = [];


                const employeeNo = [];
                const percentageOfObesity = [];
                var percentageOfObesity18_29 = 0;
                var percentageOfObesity30_39 = 0;
                var percentageOfObesity40_49 = 0;
                var percentageOfObesity50_59 = 0;
                var percentageOfObesity60_64 = 0;
                // To be assigned from detailedResultsLoop
                let currentROITables = {};
                let currentDistributionTables = {};
                let currentEventsTables ={};
                

                const totalCostsTable ={ directMedicalCosts, pharmacyCosts, absenteeismCosts, presenteeismCosts, workersCosts, STDCosts, LTDCosts, disabilityCosts, TotalDirectAndIndirectCosts, CumulativeTotalCosts, CumulativeAOMInvestment, CumulativeDirectMedicalCosts, CumulativePharmacyCosts, CumulativeAbsenteeismCosts, CumulativePresenteeismCosts, CumulativeWorkersCosts, CumulativeDisabilityCosts, directMedicalCosts_NI, pharmacyCosts_NI, absenteeismCosts_NI, presenteeismCosts_NI, workersCosts_NI, STDCosts_NI, LTDCosts_NI, disabilityCosts_NI, TotalDirectAndIndirectCosts_NI, CumulativeTotalCosts_NI, CumulativeInvestment_NI, CumulativeDirectMedicalCosts_NI, CumulativePharmacyCosts_NI, CumulativeAbsenteeismCosts_NI, CumulativePresenteeismCosts_NI, CumulativeWorkersCosts_NI, CumulativeDisabilityCosts_NI, directMedicalCosts_ILT, pharmacyCosts_ILT, absenteeismCosts_ILT, presenteeismCosts_ILT, workersCosts_ILT, STDCosts_ILT, LTDCosts_ILT, disabilityCosts_ILT, TotalDirectAndIndirectCosts_ILT, CumulativeTotalCosts_ILT, CumulativeInvestment_ILT, CumulativeDirectMedicalCosts_ILT, CumulativePharmacyCosts_ILT, CumulativeAbsenteeismCosts_ILT, CumulativePresenteeismCosts_ILT, CumulativeWorkersCosts_ILT, CumulativeDisabilityCosts_ILT }

                const myParams = { myWorkingHoursInADayValue, myEmployeeHourlyCompensationValue, myWeightWatchersValue, myIDEValue, myJennyCraigValue, myIDEMembershipValue, fullResults, myGenderWomen, myGenderMen, NI_effic_y1, NI_effic_y2, NI_effic_y3, NI_effic_y4, NI_effic_y5, NI_effic_y6, NI_effic_y7, NI_effic_y8, NI_effic_y9, NI_effic_y10, myAnnualweightReboundForWegovy, myAnnualWeightReboundForOtherAOMs, BMI_change_AOM, BMI_change_ILT, BMI_change_NI, BMI_change_OAOM, myBL_18_29, myBL_30_39, myBL_40_49, myBL_50_59, myBL_60_64, yr1_18_29, yr1_30_39, yr1_40_49, yr1_50_59, yr1_60_64, yr2_18_29, yr2_30_39, yr2_40_49, yr2_50_59, yr2_60_64, yr3_18_29, yr3_30_39, yr3_40_49, yr3_50_59, yr3_60_64, yr4_18_29, yr4_30_39, yr4_40_49, yr4_50_59, yr4_60_64, yr5_18_29, yr5_30_39, yr5_40_49, yr5_50_59, yr5_60_64, yr6_18_29, yr6_30_39, yr6_40_49, yr6_50_59, yr6_60_64, yr7_18_29, yr7_30_39, yr7_40_49, yr7_50_59, yr7_60_64, yr8_18_29, yr8_30_39, yr8_40_49, yr8_50_59, yr8_60_64, yr9_18_29, yr9_30_39, yr9_40_49, yr9_50_59, yr9_60_64, yr10_18_29, yr10_30_39, yr10_40_49, yr10_50_59, yr10_60_64, myAges18To29, myAges30To39, myAges40To49, myAges50To59, myAges60To64,myPercentageIndividualsTakingAOMs };

               let userInputData;
               let formattedUserInputData;
               // let modalData = {};
                // console.log('hi hi hi', localStorage.getItem('whaIsTheIndustry'));


                //    var myParams.myWorkingHoursInADayValue = $('#myParams.myWorkingHoursInADayValue').val();
                // var myParams.myEmployeeHourlyCompensationValue = $('#myParams.myEmployeeHourlyCompensationValue').val();


                //        var myParams.myWorkingHoursInADayValue = $('#myParams.myWorkingHoursInADayValue').val();
                //        var myParams.myEmployeeHourlyCompensationValue = $('#myParams.myEmployeeHourlyCompensationValue').val();


                let comorbiditiesResultsArr = [];



                //        myParams.myEmployeeHourlyCompensationValue = myParams.myEmployeeHourlyCompensationValue.replace("$","");


                //        if (!myParams.myWorkingHoursInADayValue) {
                //            myParams.myWorkingHoursInADayValue = DefaultWorkingHoursInADay*1;
                //        }

                //        if (!myParams.myEmployeeHourlyCompensationValue) {
                //           var myParams.myEmployeeHourlyCompensationValue = DefaultHourlyCompensation*1;
                //        }
                //        console.log(myParams.myWorkingHoursInADayValue);
                //console.log(myParams.myEmployeeHourlyCompensationValue);

                //        myParams.myWorkingHoursInADayValue = Number(myParams.myWorkingHoursInADayValue);
                //       myParams.myEmployeeHourlyCompensationValue = Number(myParams.myEmployeeHourlyCompensationValue);

                let populationValue;


                function formatPopulation(myInputValue) {
                    //console.log('first'+myInputValue);
                    if (myInputValue) {
                        populationValue = myInputValue;
                    } else {
                        populationValue = 10000;
                    }
                    //    var populationValue = inputDashboard.numberOfIndividuals.value;
                    //    console.log(populationValue);
                    var commas = populationValue.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
                    document.getElementById("myPopulation").innerHTML = "<input type='text' value='" + commas + "' name='numberOfIndividuals' id='numberOfIndividualsID' onChange='formatPopulation($(this).val());' size='6'></input>";
                    //    var populationForCalculation = commas.
                    return populationValue;
                }



                //console.log('hi'+myTempFile);

                //if (inputDashboard.numberOfIndividuals) {
                //    var myValue = formatPopulation();
                //} else {
                //    var myValue = 10000;
                //}

                //var myInputName = document.getElementById("numberOfIndividualsID");

                //console.log(myInputName);

                //console.log(formatPopulation());


                //$(document).ready(function(){
                //  $("input").change(function(){
                //  	var myPopulationValue = document.getElementById('numberOfIndividuals').value;

                //console.log(myPopulationValue);
                //return myPopulationValue;
                //});
                //});



                //if  (inputDashboard.numberOfIndividuals) {
                //    var myPopulationValue = formatPopulation();
                //    myPopulationValue = myPopulationValue.replace(",","")
                //} else {
                //    var myPopulationValue = 10000;
                //}

                // Central Data Control

                for (let val of central_data_control.data) {
                    var AOM_rebate = val.AOM_rebate;
                    var Modifiable_AOM_WAC = val.Modifiable_AOM_WAC;
                    var Include_select_bmi0 = val.Include_select_bmi0;
                    var Include_select_bmi1 = val.Include_select_bmi1;
                    var Include_select_bmi2 = val.Include_select_bmi2;
                    var Include_select_bmi3 = val.Include_select_bmi3;
                    var Percentage_overweight_group_one_comorbidity = val.Percentage_overweight_group_one_comorbidity;
                    var discount_rate = val.discount_rate;
                    var Do_not_include_semaglutide = val.Do_not_include_semaglutide;
                    var Include_in_AOM_class = val.Include_in_AOM_class;
                    var Use_Sema_as_only_AOM = val.Use_Sema_as_only_AOM;
                    var Applied_half_cycle_correction = val.Applied_half_cycle_correction;
                    var Usermod_efficacy_inputs = val.Usermod_efficacy_inputs;
                    var Inflation_factor = val.Inflation_factor;
                    var Include_medcosts = val.Include_medcosts;
                    var Include_pharmcosts = val.Include_pharmcosts;
                    var Include_absenteeism = val.Include_absenteeism;
                    var Include_presenteeism = val.Include_presenteeism;
                    var Include_disability = val.Include_disability;
                    var Include_workerscomp = val.Include_workerscomp;
                    var BMI_cap = val.BMI_cap;
                    var FullInputs_AOMEff_reduction = val.FullInputs_AOMEff_reduction;
                    var FullInputs_ILTEff_reduction = val.FullInputs_ILTEff_reduction;
                    var Longterm_annual_discontinuation_rate_year_2_onwards = val.Longterm_annual_discontinuation_rate_year_2_onwards;
                    var Ratio_of_absenteeism_days_to_presenteeism_days = val.Ratio_of_absenteeism_days_to_presenteeism_days;
                    var Productivity_decline_on_presenteeism_days = val.Productivity_decline_on_presenteeism_days;
                    var DefaultHourlyCompensation = val.DefaultHourlyCompensation;
                    var DefaultWorkingHoursInADay = val.DefaultWorkingHoursInADay;
                    var OptionalAOMY1EfficacyAssumption = val.OptionalAOMY1EfficacyAssumption;
                    var OptionalLifestyle = val.OptionalLifestyle;
                    var DefaultWeightWatchers = val.DefaultWeightWatchers;
                    var DefaultIDE = val.DefaultIDE;
                    var DefaultJennyCraig = val.DefaultJennyCraig;
                    var DefaultNutriSystem = val.DefaultNutriSystem;
                    var DefaultMedifast = val.DefaultMedifast;
                    var default_LI_copay = val.default_LI_copay;
                    var default_dietician_visits = val.default_dietician_visits;
                    var DefaultIDEMembership = val.DefaultIDEMembership;
                    var usermod_effic_inputs_select = val.usermod_effic_inputs_select;
                    var usermod_equal_discont_select = val.usermod_equal_discont_select;
                    var AOM_efficacy_calculations_contrve = val.AOM_efficacy_calculations_contrve;
                    var AOM_efficacy_calculations_qsymia = val.AOM_efficacy_calculations_qsymia;
                }
                //        console.log("hi hi"+Include_in_AOM_class+"ha ha");

                var Year1WeightedArmEfficacy

                if (Do_not_include_semaglutide) {
                    Wegovy_AOM = "AOM vs.";
                    console.log('1');
                }

                if (Include_in_AOM_class) {
                    Wegovy_AOM = "AOM vs.";
                }

                if (Use_Sema_as_only_AOM) {
                    Wegovy_AOM = "Wegovy vs.";
                    console.log('3');
                }



                function calculateAgesTotal() {
                    if ((inputDashboard.ages18To29Display.value != "") && (inputDashboard.ages18To29Display.value != null)) {
                        if (!(isNaN(inputDashboard.ages18To29Display.value))) {
                            var UserDefined18To29Display = ((inputDashboard.ages18To29Display.value) * 1);
                            var UserDefined18To29DisplayPercentage = ((inputDashboard.ages18To29Display.value) * 1).toFixed(2) + '%';
                        } else {
                            var tempAges18To29Display = inputDashboard.ages18To29Display.value;
                            tempAges18To29Display = tempAges18To29Display.replace("%", "");
                            var UserDefined18To29Display = tempAges18To29Display * 1;
                            var UserDefined18To29DisplayPercentage = inputDashboard.ages18To29Display.value;
                        }
                    } else {
                        UserDefined18To29DisplayPercentage = "";
                        document.getElementById("ages_18_to_29_display").innerHTML = '<input type="text" name="ages18To29Display" id="ages18To29Display" value="' + UserDefined18To29DisplayPercentage + '" size="6" onBlur="calculateAgesTotal();" tabindex="1"></input>';
                    }
console.log('UserDefined18To29Display',UserDefined18To29Display)
                    if ((inputDashboard.ages30To39Display.value != "") && (inputDashboard.ages30To39Display.value != null)) {
                        if (!(isNaN(inputDashboard.ages30To39Display.value))) {
                            var UserDefined30To39Display = ((inputDashboard.ages30To39Display.value) * 1);
                            var UserDefined30To39DisplayPercentage = ((inputDashboard.ages30To39Display.value) * 1).toFixed(2) + '%';
                        } else {
                            var tempAges30To39Display = inputDashboard.ages30To39Display.value;
                            tempAges30To39Display = tempAges30To39Display.replace("%", "");
                            var UserDefined30To39Display = tempAges30To39Display * 1;
                            var UserDefined30To39DisplayPercentage = inputDashboard.ages30To39Display.value;
                        }
                    } else {
                        UserDefined30To39DisplayPercentage = "";
                    }

                    if ((inputDashboard.ages40To49Display.value != "") && (inputDashboard.ages40To49Display.value != null)) {
                        if (!(isNaN(inputDashboard.ages40To49Display.value))) {
                            var UserDefined40To49Display = ((inputDashboard.ages40To49Display.value) * 1);
                            var UserDefined40To49DisplayPercentage = ((inputDashboard.ages40To49Display.value) * 1).toFixed(2) + '%';
                        } else {
                            var tempAges40To49Display = inputDashboard.ages40To49Display.value;
                            tempAges40To49Display = tempAges40To49Display.replace("%", "");
                            var UserDefined40To49Display = tempAges40To49Display * 1;
                            var UserDefined40To49DisplayPercentage = inputDashboard.ages40To49Display.value;
                        }
                    } else {
                        UserDefined40To49DisplayPercentage = "";
                    }

                    if ((inputDashboard.ages50To59Display.value != "") && (inputDashboard.ages50To59Display.value != null)) {
                        if (!(isNaN(inputDashboard.ages50To59Display.value))) {
                            var UserDefined50To59Display = ((inputDashboard.ages50To59Display.value) * 1);
                            var UserDefined50To59DisplayPercentage = ((inputDashboard.ages50To59Display.value) * 1).toFixed(2) + '%';
                        } else {
                            var tempAges50To59Display = inputDashboard.ages50To59Display.value;
                            tempAges50To59Display = tempAges50To59Display.replace("%", "");
                            var UserDefined50To59Display = tempAges50To59Display * 1;
                            var UserDefined50To59DisplayPercentage = inputDashboard.ages50To59Display.value;
                        }
                    } else {
                        UserDefined50To59DisplayPercentage = "";
                    }

                    if ((inputDashboard.ages60To64Display.value != "") && (inputDashboard.ages60To64Display.value != null)) {
                        if (!(isNaN(inputDashboard.ages60To64Display.value))) {
                            var UserDefined60To64Display = ((inputDashboard.ages60To64Display.value) * 1);
                            var UserDefined60To64DisplayPercentage = ((inputDashboard.ages60To64Display.value) * 1).toFixed(2) + '%';
                        } else {
                            var tempAges60To64Display = inputDashboard.ages60To64Display.value;
                            tempAges60To64Display = tempAges60To64Display.replace("%", "");
                            var UserDefined60To64Display = tempAges60To64Display * 1;
                            var UserDefined60To64DisplayPercentage = inputDashboard.ages60To64Display.value;
                        }
                    } else {
                        UserDefined60To64DisplayPercentage = "";
                    }



                    document.getElementById("ages_18_to_29_display").innerHTML = '<input type="text" name="ages18To29Display" id="ages18To29Display" value="' + UserDefined18To29DisplayPercentage + '" size="6" onBlur="calculateAgesTotal();" tabindex="1"></input>';
                    document.getElementById("ages_30_to_39_display").innerHTML = '<input type="text" name="ages30To39Display" id="ages30To39Display" value="' + UserDefined30To39DisplayPercentage + '" size="6" onBlur="calculateAgesTotal();" tabindex="2"></input>';
                    document.getElementById("ages_40_to_49_display").innerHTML = '<input type="text" name="ages40To49Display" id="ages40To49Display" value="' + UserDefined40To49DisplayPercentage + '" size="6" onBlur="calculateAgesTotal();" tabindex="3"></input>';
                    document.getElementById("ages_50_to_59_display").innerHTML = '<input type="text" name="ages50To59Display" id="ages50To59Display" value="' + UserDefined50To59DisplayPercentage + '" size="6" onBlur="calculateAgesTotal();" tabindex="4"></input>';
                    document.getElementById("ages_60_to_64_display").innerHTML = '<input type="text" name="ages60To64Display" id="ages60To64Display" value="' + UserDefined60To64DisplayPercentage + '" size="6" onBlur="calculateAgesTotal();" tabindex="5"></input>';


                    if (!UserDefined18To29Display) {
                        UserDefined18To29Display = 0;
                    }
                    if (!UserDefined30To39Display) {
                        UserDefined30To39Display = 0;
                    }

                    if (!UserDefined40To49Display) {
                        UserDefined40To49Display = 0;
                    }

                    if (!UserDefined50To59Display) {
                        UserDefined50To59Display = 0;
                    }

                    if (!UserDefined60To64Display) {
                        UserDefined60To64Display = 0;
                    }


                    var myAgesTotal = ((UserDefined18To29Display) * 1 + (UserDefined30To39Display) * 1 + (UserDefined40To49Display) * 1 + (UserDefined50To59Display) * 1 + (UserDefined60To64Display) * 1);
                    document.getElementById("agesTotalHolder").innerHTML = '<input type="text" name="agesTotal" value="' + myAgesTotal.toFixed(2) + '%' + '"size="10"></input>';

                    console.log(UserDefined18To29DisplayPercentage);
                }

                function calculateGenderTotal() {
                    console.log(inputDashboard.AOM_VS, 'AOM');
                    if ((inputDashboard.womenDisplay.value != "") && (inputDashboard.womenDisplay.value != null)) {
                        if (!(isNaN(inputDashboard.womenDisplay.value))) {
                            var UserDefinedWomenDisplay = ((inputDashboard.womenDisplay.value) * 1);
                            var UserDefinedWomenDisplayPercentage = ((inputDashboard.womenDisplay.value) * 1).toFixed(2) + '%';
                        } else {
                            var tempAgesWomenDisplay = inputDashboard.womenDisplay.value;
                            tempAgesWomenDisplay = tempAgesWomenDisplay.replace("%", "");
                            var UserDefinedWomenDisplay = tempAgesWomenDisplay * 1;
                            var UserDefinedWomenDisplayPercentage = inputDashboard.womenDisplay.value;
                        }
                    } else {
                        UserDefinedWomenDisplayPercentage = "";
                        document.getElementById("Women_display").innerHTML = '<input type="text" name="womenDisplay" id="womenDisplay" value="' + UserDefinedWomenDisplayPercentage + '" size="6" onBlur="calculateGenderTotal();" tabindex="6"></input>';
                    }

                    if ((inputDashboard.menDisplay.value != "") && (inputDashboard.menDisplay.value != null)) {
                        if (!(isNaN(inputDashboard.menDisplay.value))) {
                            var UserDefinedMenDisplay = ((inputDashboard.menDisplay.value) * 1);
                            var UserDefinedMenDisplayPercentage = ((inputDashboard.menDisplay.value) * 1).toFixed(2) + '%';
                        } else {
                            var tempAgesMenDisplay = inputDashboard.menDisplay.value;
                            tempAgesMenDisplay = tempAgesMenDisplay.replace("%", "");
                            var UserDefinedMenDisplay = tempAgesMenDisplay * 1;
                            var UserDefinedMenDisplayPercentage = inputDashboard.menDisplay.value;
                        }
                    } else {
                        UserDefinedMenDisplayPercentage = "";
                        document.getElementById("Men_display").innerHTML = '<input type="text" name="menDisplay" id="menDisplay" value="' + UserDefinedMenDisplayPercentage + '" size="6" onBlur="calculateGenderTotal();" tabindex="7"></input>';
                    }






                    document.getElementById("Women_display").innerHTML = '<input type="text" name="womenDisplay" id="womenDisplay" value="' + UserDefinedWomenDisplayPercentage + '" size="6" onBlur="calculateGenderTotal();" tabindex="6"></input>';
                    document.getElementById("Men_display").innerHTML = '<input type="text" name="menDisplay" id="menDisplay" value="' + UserDefinedMenDisplayPercentage + '" size="6" onBlur="calculateGenderTotal();" tabindex="7"></input>';


                    if (!UserDefinedWomenDisplay) {
                        UserDefinedWomenDisplay = 0;
                    }
                    if (!UserDefinedMenDisplay) {
                        UserDefinedMenDisplay = 0;
                    }



                    var myGenderTotal = ((UserDefinedWomenDisplay) * 1 + (UserDefinedMenDisplay) * 1);
                    document.getElementById("genderTotalHolder").innerHTML = '<input type="text" name="genderTotal" value="' + myGenderTotal.toFixed(2) + '%' + '"size="6"></input>';

                    console.log(UserDefinedWomenDisplay);
                }


                function myDiscontinuationAssumptions() {
                    //  console.log(inputDashboard.AOM_VS, 'AOM');
                    if (((inputDashboard.setDefaultAssumption.value == "Base-case") && (inputDashboard.setAssumptionForWegovy.value == "Base-case")) || ((inputDashboard.setDefaultAssumption.value == "Base-case") && (inputDashboard.setAssumptionForWegovy.value == "Sensitivity"))) {
                        myAnnualWeightReboundForWegovy = 0.3333;
                        myParams.myAnnualweightReboundForWegovy = 0.3333;
                        myAnnualWeightReboundForWegovyDisplay = (myAnnualWeightReboundForWegovy * 100).toFixed(2) + "%";
                    } else {
                        myAnnualWeightReboundForWegovy = 0.50;
                        myParams.myAnnualweightReboundForWegovy = 0.50;
                        myAnnualWeightReboundForWegovyDisplay = (myAnnualWeightReboundForWegovy * 100).toFixed(2) + "%";
                    }

                    document.getElementById("annualweightReboundForWegovyValue").innerHTML = '<input type="text" size="6" name="annualweightReboundForWegovy" class="custom-user-input" maxLength="5" value="' + myAnnualWeightReboundForWegovyDisplay + '"></input>';

                    if (((inputDashboard.setDefaultAssumption.value == "Base-case") && (inputDashboard.setAssumptionForWegovy.value == "Base-case")) || ((inputDashboard.setDefaultAssumption.value == "Sensitivity") && (inputDashboard.setAssumptionForWegovy.value == "Sensitivity"))) {
                        myAnnualWeightReboundForOtherAOMs = 0.50;
                        myAnnualWeightReboundForOtherAOMsDisplay = (myAnnualWeightReboundForOtherAOMs * 100).toFixed(2) + "%";
                        myParams.myAnnualWeightReboundForOtherAOMs = 0.50;
                    } else if ((inputDashboard.setDefaultAssumption.value == "Base-case") && (inputDashboard.setAssumptionForWegovy.value == "Sensitivity")) {
                        myAnnualWeightReboundForOtherAOMs = 0.3334;
                        myParams.myAnnualWeightReboundForOtherAOMs = 0.3334;
                        myAnnualWeightReboundForOtherAOMsDisplay = (myAnnualWeightReboundForOtherAOMs * 100).toFixed(2) + "%";
                    } else {
                        myAnnualWeightReboundForOtherAOMs = 1;
                        myParams.myAnnualWeightReboundForOtherAOMs = 1;
                        myAnnualWeightReboundForOtherAOMsDisplay = (myAnnualWeightReboundForOtherAOMs * 100).toFixed(2) + "%";
                    }

                    document.getElementById("annualWeightReboundForOtherAOMSValue").innerHTML = '<input type="text" size="6" name="annualWeightReboundForOtherAOMs" class="custom-user-input" maxLength="5" value="' + myAnnualWeightReboundForOtherAOMsDisplay + '"></input>';

                    customUserInputs();

                }



                function FormatCurrency(myAmount) {
                    var amount = parseFloat(myAmount);
                    return amount.toLocaleString('en-US', { style: 'currency', currency: 'USD' });
                }

                function FormatLargeCurrency(myLargeAmount) {
                    var largeAmount = parseFloat(myLargeAmount);
                    largeAmount = Math.round(largeAmount);
                    largeAmount = largeAmount.toFixed(0);

                    return largeAmount.toLocaleString('en-US', { style: 'currency', currency: 'USD' });
                }

                // Get data for comorbidities results page

                let comorbiditiesData;
                let comorbiditiesArr = [];

                // function setComorbiditiesData(data, chosenYear) {
                //     // console.log('setData: ', data)
                //     comorbiditiesData = data;


                //     let year = 'Year' + chosenYear;

                //     if (!inputDashboard.View_By) {
                //         comorbiditiesArr = [comorbiditiesData[8].Year1, comorbiditiesData[1].Year1, comorbiditiesData[7].Year1, comorbiditiesData[11].Year1, comorbiditiesData[9].Year1, comorbiditiesData[10].Year1, comorbiditiesData[2].Year1, comorbiditiesData[6].Year1, comorbiditiesData[3].Year1, comorbiditiesData[4].Year1, comorbiditiesData[5].Year1, comorbiditiesData[12].Year1, comorbiditiesData[13].Year1, comorbiditiesData[0].Year1];

                //         comorbiditiesArr = comorbiditiesArr.map((val) => {
                //             let newVal = '$' + parseFloat(val).toFixed(2);
                //             return newVal;
                //         })
                //     } else if (inputDashboard.View_By.value == "ROI as % of investment") {
                //         comorbiditiesArr = [comorbiditiesData[8][year], comorbiditiesData[1][year], comorbiditiesData[7][year], comorbiditiesData[11][year], comorbiditiesData[9][year], comorbiditiesData[10][year], comorbiditiesData[2][year], comorbiditiesData[6][year], comorbiditiesData[3][year], comorbiditiesData[4][year], comorbiditiesData[5][year], comorbiditiesData[12][year], comorbiditiesData[13][year], comorbiditiesData[0][year]];

                //         comorbiditiesArr = comorbiditiesArr.map((val) => {
                //             let newVal = parseFloat(val * 100).toFixed(0) + '%';
                //             return newVal;
                //         })
                //     } else {
                //         comorbiditiesArr = [comorbiditiesData[8][year], comorbiditiesData[1][year], comorbiditiesData[7][year], comorbiditiesData[11][year], comorbiditiesData[9][year], comorbiditiesData[10][year], comorbiditiesData[2][year], comorbiditiesData[6][year], comorbiditiesData[3][year], comorbiditiesData[4][year], comorbiditiesData[5][year], comorbiditiesData[12][year], comorbiditiesData[13][year], comorbiditiesData[0][year]];

                //         comorbiditiesArr = comorbiditiesArr.map((val) => {
                //             let newVal = (Number(val)).toLocaleString('en-US', { style: 'currency', currency: 'USD' });
                //             return newVal;
                //         })
                //     }
                //     // console.log(comorbiditiesData, 'DATA');
                //     return comorbiditiesData[0];
                // };

                // function handleComorbiditiesDataChange(chosenYear) {
                //     if (inputDashboard.AOM_VS.value == "No intervention") {
                //         switch (inputDashboard.View_By.value) {
                //             case "ROI":
                //                 comorbiditiesData = ROI1.data;
                //                 break;
                //             case "ROI as % of investment":
                //                 comorbiditiesData = ROI2.data;
                //                 break;
                //             case "Cost offset (population)":
                //                 console.log('Getting offset population');
                //                 comorbiditiesData = ROI3.data;
                //                 break;
                //             case "Cost offset (per member)":
                //                 comorbiditiesData = ROI4.data;
                //                 break;
                //             case "Cost offset (PMPM)":
                //                 comorbiditiesData = ROI5.data;
                //                 break;
                //             case "Cost offset per treated patient per month (AOM vs. no intervention)":
                //                 comorbiditiesData = ROI8.data;
                //                 break;
                //             case "Cost offset (PPPM)":
                //                 comorbiditiesData = ROI7.data;
                //                 break;
                //             default:
                //         }
                //     } else if (inputDashboard.AOM_VS.value == "ILT") {
                //         switch (inputDashboard.View_By.value) {
                //             case "ROI":
                //                 comorbiditiesData = ROI9.data;
                //                 break;
                //             case "ROI as % of investment":
                //                 comorbiditiesData = ROI10.data;
                //                 break;
                //             case "Cost offset (population)":
                //                 comorbiditiesData = ROI11.data;
                //                 break;
                //             case "Cost offset (per member)":
                //                 comorbiditiesData = ROI12.data;
                //                 break;
                //             case "Cost offset (PMPM)":
                //                 comorbiditiesData = ROI13.data;
                //                 break;
                //             case "Cost offset per treated patient per month (AOM vs. no intervention)":
                //                 comorbiditiesData = ROI16.data;
                //                 break;
                //             case "Cost offset (PPPM)":
                //                 comorbiditiesData = ROI15.data;
                //                 break;
                //             default:
                //         }
                //     };

                //     // console.log(inputDashboard.selectIndustry.value, 'industry');

                //     function getObClass(value) {
                //         switch (value) {
                //             case "Overweight and obesity (I, II, and III)":
                //                 comorbiditiesArr = comorbiditiesArr.slice(0, 14);
                //                 break;
                //             case "Obesity classes I, II, and III":
                //                 comorbiditiesArr = comorbiditiesArr.slice(14, 28);
                //                 break;
                //             case "Obesity classes II and III":
                //                 comorbiditiesArr = comorbiditiesArr.slice(28, 42);
                //                 break;
                //             case "Obesity class III":
                //                 comorbiditiesArr = comorbiditiesArr.slice(42, 56);
                //                 break;
                //             default:
                //         };
                //     };


                //     function getIndustry(value) {
                //         switch (value) {
                //             case "Total_employed":
                //                 comorbiditiesArr = comorbiditiesData.slice(0, 56);
                //                 break;
                //             case "Agriculture__forestry__fishing__and_hunting":
                //                 comorbiditiesArr = comorbiditiesData.slice(56, 112);
                //                 break;
                //             case "Mining__quarrying__and_oil_and_gas_extraction":
                //                 comorbiditiesArr = comorbiditiesData.slice(112, 168);
                //                 break;
                //             case "Construction":
                //                 comorbiditiesArr = comorbiditiesData.slice(168, 224);
                //                 break;
                //             case "Manufacturing":
                //                 comorbiditiesArr = comorbiditiesData.slice(224, 280);
                //                 break;
                //             case "Wholesale_and_retail_trade":
                //                 comorbiditiesArr = comorbiditiesData.slice(280, 336);
                //                 break;
                //             case "Transportation_and_utilities":
                //                 comorbiditiesArr = comorbiditiesData.slice(336, 392);
                //                 break;
                //             case "Information":
                //                 comorbiditiesArr = comorbiditiesData.slice(392, 448);
                //                 break;
                //             case "Financial_activities":
                //                 comorbiditiesArr = comorbiditiesData.slice(448, 504);
                //                 break;
                //             case "Professional_and_business_services":
                //                 comorbiditiesArr = comorbiditiesData.slice(504, 560);
                //                 break;
                //             case "Education_and_health_services":
                //                 comorbiditiesArr = comorbiditiesData.slice(560, 616);
                //                 break;
                //             case "Leisure_and_hospitality":
                //                 comorbiditiesArr = comorbiditiesData.slice(616, 672);
                //                 break;
                //             case "Other_services":
                //                 comorbiditiesArr = comorbiditiesData.slice(672, 700);
                //                 break;
                //             default:
                //         }
                //     };

                //     getIndustry(inputDashboard.selectIndustry.value);
                //     getObClass(inputDashboard.Obesity_Class.value);
                //     return setComorbiditiesData(comorbiditiesArr, chosenYear);
                // };


                // Summary Results


                const ROI_savings_Investment = [];
var toSumTemp = 0;
const ClassA_obesity1_total_savings_NI = [];
const Class_obesity_total_savings_NI = [];
const Class_obesity_total_investment_NI = [];


                function toShowSummaryResult(myParams,currentROITables,currentDistributionTables,currentEventsTables) {

                    // console.log('currentROITables', currentROITables);

                    
                   // showSummaryResults(currentROITables,currentDistributionTables,currentEventsTables);

                    $("#myInput >div").remove();

                    $(".container").removeClass().addClass("container summaryResults");
                    $(".tabHeading").css("display", "none");

                    //        console.log(myParams.myWorkingHoursInADayValue);

                    if (!myParams.myWorkingHoursInADayValue || !myParams.myEmployeeHourlyCompensationValue) {
                        //            console.log('if is true');
                        myParams.myWorkingHoursInADayValue = inputDashboard.myWorkingHoursInADayVal.value;
                        myParams.myEmployeeHourlyCompensationValue = inputDashboard.myEmployeeHourlyCompensationVal.value;
                        myParams.myEmployeeHourlyCompensationValue = myParams.myEmployeeHourlyCompensationValue.replace("$", "");

                        //console.log('11111111',myParams.myEmployeeHourlyCompensationValue);

                    } else {
                        //            console.log(myParams.myWorkingHoursInADayValue, 'if work');
                        //            console.log(myParams.myEmployeeHourlyCompensationValue, 'if comp');
                    };


                    myNI_effic_y1 = myParams.NI_effic_y1;
                    myNI_effic_y2 = myParams.NI_effic_y2;
                    myNI_effic_y3 = myParams.NI_effic_y3;
                    myNI_effic_y4 = myParams.NI_effic_y4;
                    myNI_effic_y5 = myParams.NI_effic_y5;
                    myNI_effic_y6 = myParams.NI_effic_y6;
                    myNI_effic_y7 = myParams.NI_effic_y7;
                    myNI_effic_y8 = myParams.NI_effic_y8;
                    myNI_effic_y9 = myParams.NI_effic_y9;
                    myNI_effic_y10 = myParams.NI_effic_y10;
                    //console.log(myNI_effic_y1);


                    //console.log('summ'+myParams.myIDEValue);

                    //        myParams.myWeightWatchersValue = myParams.myWeightWatchersValue.replace("%","");
                    //        myParams.myWeightWatchersValue = myParams.myWeightWatchersValue/100;


                    //        myParams.myIDEValue = myParams.myIDEValue.replace("%","");
                    //        myParams.myIDEValue = myParams.myIDEValue/100;

                    //        console.log(myParams.myWeightWatchersValue);

                    //console.log(myWeightWatchers);

                    //        myParams.myWorkingHoursInADayValue = $('#myParams.myWorkingHoursInADayValue').val();
                    //        myParams.myEmployeeHourlyCompensationValue = $('#myParams.myEmployeeHourlyCompensationValue').val();

                    //myParams.myWorkingHoursInADayValue = myParams.myWorkingHoursInADayValue;
                    //myParams.myEmployeeHourlyCompensationValue = myParams.myEmployeeHourlyCompensationValue;

                    //        console.log('Hello: '+myParams.myWorkingHoursInADayValue1);

                    //        console.log('Kitty: '+myParams.myEmployeeHourlyCompensationValue1);

                    // console.log('txt18_29-10',myAges18To29);
                    //     console.log('txt30_39-10',myAges30To39);
                    //     console.log('txt40_49-10',myAges40To49);
                    //     console.log('txt50_59-10',myAges50To59);
                    //     console.log('txt60_64-10',myAges60To64);


                    var resultNavBar = '';
                    resultNavBar += '<div class="resultsPage_header"><div><img src="./res/img/icon-results.svg"/><h2>Summary Results</h2></div>' +
                        '<div class="resultsPage_pageNav"><a href="#" class="resultsPage_active" onClick="toShowSummaryResult(myParams,currentROITables,currentDistributionTables,currentEventsTables);">Summary Results</a>' +
                        '<a href="#" onClick="eventBasedAnalysis();">Event-Based Analysis</a>' +
                        '<a href="#" onClick="detailedResults(myParams);">Detailed Results</a><a href="#" onClick="actions();">Actions</a>' +
                        '</div></div>';
                    resultNavBar += '<table>';
                    resultNavBar += '<tr>';
                    // resultNavBar +=  '<td colspan="5">AOM vs.: <select name="AOM_VS" onChange="toShowSummaryResult(myParams,currentROITables,currentDistributionTables,currentEventsTables);">';
                    // GEOFF'S CHANGES BEGIN
                    resultNavBar += '<td colspan="5" class="results">' +
                        '<div class="custom-select__container results AOM-vs">' +
                        'AOM vs.: ' +
                        '<div class="custom-select">' +
                        '<select name="AOM_VS" onChange="toShowSummaryResult(myParams,currentROITables,currentDistributionTables,currentEventsTables);">';
                    // GEOFF'S CHANGES END


                    if (inputDashboard.AOM_VS) {
                        if (inputDashboard.AOM_VS.value == "No intervention") {
                            resultNavBar += '<option value="No intervention" selected>No intervention</option><optgroup class="divider"></optgroup>';
                        } else {
                            resultNavBar += '<option value="No intervention">No intervention</option><optgroup class="divider"></optgroup>';
                        }

                        if (inputDashboard.AOM_VS.value == "ILT") {
                            resultNavBar += '<option value="ILT" selected>ILT</option><optgroup class="divider"></optgroup>';
                        } else {
                            resultNavBar += '<option value="ILT">ILT</option><optgroup class="divider"></optgroup>';
                        }
                    } else {
                        resultNavBar += '<option value="No intervention">No intervention</option><optgroup class="divider"></optgroup>';
                        resultNavBar += '<option value="ILT">ILT</option><optgroup class="divider"></optgroup>';
                    }

                    // resultNavBar +=  '</select>&nbsp;&nbsp;View By: <select name="View_By" onChange="toShowSummaryResult(myParams,currentROITables,currentDistributionTables,currentEventsTables);">';
                    // GEOFF'S CHANGES BEGIN
                    resultNavBar += '</select></div><div class="custom-select__buffer"></div></div>' +
                        '<div class="custom-select__container results view-by">' +
                        // '&nbsp;&nbsp;View By: ' + 
                        'View By: ' +
                        '<div class="custom-select">' +
                        '<select name="View_By" onChange="toShowSummaryResult(myParams,currentROITables,currentDistributionTables,currentEventsTables);">';
                    // GEOFF'S CHANGES END

                    if (inputDashboard.View_By) {
                        if (inputDashboard.View_By.value == "ROI") {
                            resultNavBar += '<option value="ROI" selected>ROI</option><optgroup class="divider"></optgroup>';
                        } else {
                            resultNavBar += '<option value="ROI">ROI</option><optgroup class="divider"></optgroup>';
                        }

                        if (inputDashboard.View_By.value == "ROI as % of investment") {
                            resultNavBar += '<option value="ROI as % of investment" selected>ROI as % of investment</option><optgroup class="divider"></optgroup>';
                        } else {
                            resultNavBar += '<option value="ROI as % of investment">ROI as % of investment</option><optgroup class="divider"></optgroup>';
                        }

                        if (inputDashboard.View_By.value == "Cost offset (population)") {
                            resultNavBar += '<option value="Cost offset (population)" selected>Cost offset (population)</option><optgroup class="divider"></optgroup>';
                        } else {
                            resultNavBar += '<option value="Cost offset (population)">Cost offset (population)</option><optgroup class="divider"></optgroup>';
                        }

                        if (inputDashboard.View_By.value == "Cost offset (per member)") {
                            resultNavBar += '<option value="Cost offset (per member)" selected>Cost offset (per member)</option><optgroup class="divider"></optgroup>';
                        } else {
                            resultNavBar += '<option value="Cost offset (per member)">Cost offset (per member)</option><optgroup class="divider"></optgroup>';
                        }

                        if (inputDashboard.View_By.value == "Cost offset (PMPM)") {
                            resultNavBar += '<option value="Cost offset (PMPM)" selected>Cost offset (PMPM)</option><optgroup class="divider"></optgroup>';
                        } else {
                            resultNavBar += '<option value="Cost offset (PMPM)">Cost offset (PMPM)</option><optgroup class="divider"></optgroup>';
                        }

                        if (inputDashboard.View_By.value == "Cost offset per treated patient per month (AOM vs. no intervention)") {
                            resultNavBar += '<option value="Cost offset per treated patient per month (AOM vs. no intervention)" selected>Cost offset per treated patient per month (AOM vs. no intervention)</option>';
                        } else {
                            resultNavBar += '<option value="Cost offset per treated patient per month (AOM vs. no intervention)">Cost offset per treated patient per month (AOM vs. no intervention)</option><optgroup class="divider"></optgroup>';
                        }

                        if (inputDashboard.View_By.value == "Cost offset (PPPM)") {
                            resultNavBar += '<option value="Cost offset (PPPM)" selected>Cost offset (PPPM)</option><optgroup class="divider"></optgroup>';
                        } else {
                            resultNavBar += '<option value="Cost offset (PPPM)">Cost offset (PPPM)</option><optgroup class="divider"></optgroup>';
                        }
                    } else {

                        resultNavBar += '<option value="ROI">ROI</option><optgroup class="divider"></optgroup>';
                        resultNavBar += '<option value="ROI as % of investment">ROI as % of investment</option><optgroup class="divider"></optgroup>';
                        resultNavBar += '<option value="Cost offset (population)">Cost offset (population)</option><optgroup class="divider"></optgroup>';
                        resultNavBar += '<option value="Cost offset (per member)">Cost offset (per member)</option><optgroup class="divider"></optgroup>';
                        resultNavBar += '<option value="Cost offset (PMPM)">Cost offset (PMPM)</option><optgroup class="divider"></optgroup>';
                        resultNavBar += '<option value="Cost offset per treated patient per month (AOM vs. no intervention)">Cost offset per treated patient per month (AOM vs. no intervention)</option><optgroup class="divider"></optgroup>';
                        resultNavBar += '<option value="Cost offset (PPPM)">Cost offset (PPPM)</option><optgroup class="divider"></optgroup>';
                    }



                    // resultNavBar +=  '</select></td>';
                    // GEOFF'S CHANGES BEGIN
                    resultNavBar += '</select></div><div class="custom-select__buffer"></div></div></td>';
                    // GEOFF'S CHANGES END


                    resultNavBar += '</tr>';
                    resultNavBar += '</table>';

                    if (myParams.fullResults) {
                        console.log('working');
                    } else {
                        document.getElementById("MyNavbar").innerHTML = resultNavBar;
                    }
                    // console.log(document.getElementById("MyNavbar"), 'navbar');


                    let txtArr = [];

                    if (inputDashboard.AOM_VS.value == "No intervention") {
                        switch (inputDashboard.View_By.value) {
                            case "ROI":
                                var myTempDataFile = ROI1.data;
                                break;
                            case "ROI as % of investment":
                                var myTempDataFile = ROI2.data;
                                break;
                            case "Cost offset (population)":
                                var myTempDataFile = ROI3.data;
                                break;
                            case "Cost offset (per member)":
                                var myTempDataFile = ROI4.data;
                                break;
                            case "Cost offset (PMPM)":
                                var myTempDataFile = ROI5.data;
                                break;
                            case "Cost offset per treated patient per month (AOM vs. no intervention)":
                                var myTempDataFile = ROI8.data;
                                break;
                            case "Cost offset (PPPM)":
                                var myTempDataFile = ROI7.data;
                                break;
                            default:
                        }
                    } else if (inputDashboard.AOM_VS.value == "ILT") {
                        switch (inputDashboard.View_By.value) {
                            case "ROI":
                                var myTempDataFile = ROI9.data;
                                break;
                            case "ROI as % of investment":
                                var myTempDataFile = ROI10.data;
                                break;
                            case "Cost offset (population)":
                                var myTempDataFile = ROI11.data;
                                break;
                            case "Cost offset (per member)":
                                var myTempDataFile = ROI12.data;
                                break;
                            case "Cost offset (PMPM)":
                                var myTempDataFile = ROI13.data;
                                break;
                            case "Cost offset per treated patient per month (AOM vs. no intervention)":
                                var myTempDataFile = ROI16.data;
                                break;
                            case "Cost offset (PPPM)":
                                var myTempDataFile = ROI15.data;
                                break;
                            default:
                        }
                    }

                    for (let val of myTempDataFile) {
                        if (val.Title) {
                            var myTitle = val.Title;
                            var myDescription = val.Description;
                        }
                    }

                    txtArr.push('<div class="resultsPage_title"><b>' + myTitle + '</b><p>' + myDescription + '</p></div>')



                    toShowIndustry = localStorage.getItem('whaIsTheIndustry');

                    // console.log('oh no no', localStorage.getItem('whaIsTheIndustry'));

                    if (!toShowIndustry) {
                        myDisplayIndustry = "Total_employed";
                    } else {
                        myDisplayIndustry = toShowIndustry;
                    }
                    //            console.log(myDisplayIndustry);



                    if (inputDashboard.Obesity_Class) {
                        var myObesityClass = inputDashboard.Obesity_Class.value;
                    } else {
                        var myObesityClass = "Overweight and obesity (I, II, and III)";
                    }


                    if (inputDashboard.POI1) {
                        var myPOIValue = inputDashboard.POI1.value;
                        if ((myPOIValue === "People with overweight/ obesity") || (myPOIValue === "People with obesity")) {
                            if (myObesityClass === "Overweight and obesity (I, II, and III)") {
                                var myPOIValue = "People with overweight/ obesity";
                            } else {
                                var myPOIValue = "People with obesity";
                            }
                        } else {
                            var myPOIValue = inputDashboard.POI1.value;
                        }
                    } else {
                        if (myObesityClass === "Overweight and obesity (I, II, and III)") {
                            var myPOIValue = "People with overweight/ obesity";
                        } else {
                            var myPOIValue = "People with obesity";
                        }
                    }

                    var myPOIIndex;

                    switch (myPOIValue) {
                        case "People with overweight/ obesity":
                        case "People with obesity":
                            myPOIIndex = 1;
                            break;
                        case "Cardiovascular diseases":
                            myPOIIndex = 2;
                            break;
                        case "Cerebrovascular diseases":
                            myPOIIndex = 3;
                            break;
                        case "Dyslipidemia":
                            myPOIIndex = 4;
                            break;
                        case "Hypertension":
                            myPOIIndex = 5;
                            break;
                        case "Osteoarthritis":
                            myPOIIndex = 6;
                            break;
                        case "Diabetes":
                            myPOIIndex = 7;
                            break;
                        case "Cardiovascular diseases (with cerebrovascular diseases)":
                            myPOIIndex = 8;
                            break;
                        case "Any cardiometabolic disease*":
                            myPOIIndex = 9;
                            break;
                        case "Cardiovascular diseases (with dyslipidemia)":
                            myPOIIndex = 10;
                            break;
                        case "Cardiovascular diseases (with hypertension)":
                            myPOIIndex = 11;
                            break;
                        case "Cardiovascular diseases (with diabetes)":
                            myPOIIndex = 12;
                            break;
                        case "Osteoarthritis (with cardiovascular diseases)":
                            myPOIIndex = 13;
                            break;
                        case "Osteoarthritis (with diabetes)":
                            myPOIIndex = 14;
                            break;
                        default:
                    }


                        // console.log('txt18_29',myAges18To29);
                        // console.log('txt30_39',myAges30To39);
                        // console.log('txt40_49',myAges40To49);
                        // console.log('txt50_59',myAges50To59);
                        // console.log('txt60_64',myAges60To64);

                        // for (let val of BMISummary.data) {
                        //     if (val.Class_Name = "Overweight and obesity (I, II, and III)") {
                        //         for (let i=0;i<14;i++) {
                        //             percentageOfObesity[i] = val.group18_29_1;
                        //         }
                        //     } else {
                        //         for (let i=0;i<14;i++) {
                        //             percentageOfObesity[i] = val.group18_29;
                        //         }
                        //     }
                        // }





    if (Object.keys(currentROITables).length != 0) {
        // console.log(currentROITables['Overweight and obesity (I, II, and III)']['People with overweight/ obesity'].totals.savings.NI.Year1)
        // console.log(currentROITables['Overweight and obesity (I, II, and III)']['People with overweight/ obesity'].totals.investment.NI.Year1)
        // console.log('currentROITables', currentROITables);
        // console.log(inputDashboard.AOM_VS.value)

        for (var myYear in currentROITables['Overweight and obesity (I, II, and III)']['People with overweight/ obesity'].totals.investment.NI) {
            // ROI_savings_Investment[i] = currentROITables['Overweight and obesity (I, II, and III)']['People with overweight/ obesity'].totals.savings.NI / currentROITables['Overweight and obesity (I, II, and III)']['People with overweight/ obesity'].totals.investment.NI;
            // console.log('ROI_savings_Investment',ROI_savings_Investment[i])
            // console.log('ClassA_obesity1_total_savings_NI',currentROITables['Overweight and obesity (I, II, and III)']['People with overweight/ obesity'].totals.savings.NI.Year[i]);
            ROI_savings_Investment[myYear] = currentROITables['Overweight and obesity (I, II, and III)']['People with overweight/ obesity'].totals.savings.NI[myYear] / currentROITables['Overweight and obesity (I, II, and III)']['People with overweight/ obesity'].totals.investment.NI[myYear];
            // console.log(ROI_savings_Investment[myYear])
        }

        for (var myTempClass in currentROITables) {
            // console.log(currentROITables[myTempClass])

            txtArr.push('<div class="resultsPage_sectionTitle">' + myTempClass + '</div>');

            txtArr.push('<table class="table table-striped"><tr><th>Population of Interest</th><th>Emp.</th><th>Year 1</th><th>Year 2</th><th>Year 3</th><th>Year 4</th><th>Year 5</th><th>Year 6</th><th>Year 7</th><th>Year 8</th><th>Year 9</th><th>Year 10</th></tr>');



            for (var myTempPOI in currentROITables[myTempClass]) {

                if ((!((myTempClass == "Overweight and obesity (I, II, and III)") && (myTempPOI == "People with obesity"))) && (!((myTempClass == "Obesity classes I, II and III") && (myTempPOI == "People with overweight/ obesity"))) && (!((myTempClass == "Obesity classes II and III") && (myTempPOI == "People with overweight/ obesity"))) && (!((myTempClass == "Obesity class III") && (myTempPOI == "People with overweight/ obesity")))) {

                    for (let val of BMISummary.data) {
                            if (val.Class_Name == myTempClass) {
                                    if ((myTempPOI == "People with overweight/ obesity") || (myTempPOI == "People with obesity")) {
                                        percentageOfObesity18_29 = val.group18_29;
                                        // console.log('=================================================================')
                                        // console.log('percentageOfObesity18_29',myTempClass,myTempPOI,percentageOfObesity18_29)
                                        // console.log('=================================================================')
                                        percentageOfObesity30_39 = val.group30_39;
                                        percentageOfObesity40_49 = val.group40_49;
                                        percentageOfObesity50_59 = val.group50_59;
                                        percentageOfObesity60_64 = val.group60_64;
                                    } else {
                                        percentageOfObesity18_29 = val.group18_29_1;
                                        // console.log('*******************************************************************')
                                        // console.log('percentageOfObesity18_29',myTempClass,myTempPOI,percentageOfObesity18_29)
                                        // console.log('*******************************************************************')
                                        percentageOfObesity30_39 = val.group30_39_1;
                                        percentageOfObesity40_49 = val.group40_49_1;
                                        percentageOfObesity50_59 = val.group50_59_1;
                                        percentageOfObesity60_64 = val.group60_64_1;
                                    }
                            }
                        }

                        txtArr.push('<tr><td>' + myTempPOI.replace('overweight/ obesity', 'overweight and obesity') + '</td>');

                        for (let val of Prevalence.data) {
                            if (val.Comorbidity == myTempPOI) {
                                prevalanceAge18_29 = val.Age18_29;
                                // console.log('@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@')
                                // console.log('prevalanceAge18_29',prevalanceAge18_29)
                                // console.log('@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@')
                                prevalanceAge30_39 = val.Age30_39;
                                prevalanceAge40_49 = val.Age40_49;
                                prevalanceAge50_59 = val.Age50_59;
                                prevalanceAge60_64 = val.Age60_64;


                        //         console.log('txt18_29-1',myAges18To29);
                        // console.log('txt30_39-1',myAges30To39);
                        // console.log('txt40_49-1',myAges40To49);
                        // console.log('txt50_59-1',myAges50To59);
                        // console.log('txt60_64-1',myAges60To64);

                                var selectedEmployees18_29 = myAges18To29 /100 * populationValue * percentageOfObesity18_29 * prevalanceAge18_29 * myPercentageIndividualsTakingAOMs / 100;
                                var selectedEmployees30_39 = myAges30To39 /100 * populationValue * percentageOfObesity30_39 * prevalanceAge30_39 * myPercentageIndividualsTakingAOMs / 100;
                                var selectedEmployees40_49 = myAges40To49 /100 * populationValue * percentageOfObesity40_49 * prevalanceAge40_49 * myPercentageIndividualsTakingAOMs / 100;
                                var selectedEmployees50_59 = myAges50To59 /100 * populationValue * percentageOfObesity50_59 * prevalanceAge50_59 * myPercentageIndividualsTakingAOMs / 100;
                                var selectedEmployees60_64 = myAges60To64 /100 * populationValue * percentageOfObesity60_64 * prevalanceAge60_64 * myPercentageIndividualsTakingAOMs / 100;
                                var selectedEmployees = selectedEmployees18_29*1 + selectedEmployees30_39*1 + selectedEmployees40_49*1 + selectedEmployees50_59*1 + selectedEmployees60_64*1;
                                txtArr.push('<td align="center">' + selectedEmployees.toFixed(0) + '</td>');


                            }
                        }

                    // var myTempTemp = showPrevalence(myParams);

                    // console.log(myTempTemp);
                    // console.log('myPercentageIndividualsTakingAOMs',myPercentageIndividualsTakingAOMs)





                    for (var myTempYear in currentROITables[myTempClass][myTempPOI].totals.savings.NI) {
                        // console.log(myTempClass, myTempPOI,myTempYear,currentROITables[myTempClass][myTempPOI].totals.savings.NI[myTempYear]);
                        // console.log(myTempClass, myTempPOI,myTempYear, currentROITables[myTempClass][myTempPOI].totals.investment.NI[myTempYear]);


                        if (inputDashboard.AOM_VS.value == "ILT") {

                            switch (inputDashboard.View_By.value) {
                                        case "ROI as % of investment":
                                            txtArr.push('<td align="center">' + (currentROITables[myTempClass][myTempPOI].totals.costOffsets_population.ILT[myTempYear] / currentROITables[myTempClass][myTempPOI].totals.investment.ILT[myTempYear] * 100).toFixed(0) + '%</td>');
                                            break;
                                        case "ROI":
                                            txtArr.push('<td align="center">' + FormatCurrency(currentROITables[myTempClass][myTempPOI].totals.savings.ILT[myTempYear] / currentROITables[myTempClass][myTempPOI].totals.investment.ILT[myTempYear]) + '</td>');
                                            break;
                                        case "Cost offset (population)":
                                            txtArr.push('<td align="center">' + FormatCurrency(currentROITables[myTempClass][myTempPOI].totals.costOffsets_population.ILT[myTempYear]) + '</td>');
                                            break;
                                        case "Cost offset (per member)":
                                            txtArr.push('<td align="center">' + FormatCurrency(currentROITables[myTempClass][myTempPOI].totals.costOffsets_perMember.ILT[myTempYear]) + '</td>');
                                            break;
                                        case "Cost offset (PMPM)":
                                            txtArr.push('<td align="center">' + FormatCurrency(currentROITables[myTempClass][myTempPOI].totals.costOffsets_PMPM.ILT[myTempYear]) + '</td>');
                                            break;
                                        case "Cost offset per treated patient per month (AOM vs. no intervention)":
                                            txtArr.push('<td align="center">' + FormatCurrency(currentROITables[myTempClass][myTempPOI].totals.costOffsets_perPatient.ILT[myTempYear]) + '</td>');
                                            break;
                                        case "Cost offset (PPPM)":
                                            txtArr.push('<td align="center">' + FormatCurrency(currentROITables[myTempClass][myTempPOI].totals.costOffsets_PPPM.ILT[myTempYear]) + '</td>');
                                            break;
                                        default:
                                    }
                        } else {
                                    switch (inputDashboard.View_By.value) {
                                        case "ROI as % of investment":
                                            txtArr.push('<td align="center">' + (currentROITables[myTempClass][myTempPOI].totals.costOffsets_population.NI[myTempYear] / currentROITables[myTempClass][myTempPOI].totals.investment.NI[myTempYear] * 100).toFixed(0) + '%</td>');
                                            break;
                                        case "ROI":
                                            txtArr.push('<td align="center">' + FormatCurrency(currentROITables[myTempClass][myTempPOI].totals.savings.NI[myTempYear] / currentROITables[myTempClass][myTempPOI].totals.investment.NI[myTempYear]) + '</td>');
                                            break;
                                        case "Cost offset (population)":
                                            txtArr.push('<td align="center">' + FormatCurrency(currentROITables[myTempClass][myTempPOI].totals.costOffsets_population.NI[myTempYear]) + '</td>');
                                            break;
                                        case "Cost offset (per member)":
                                            txtArr.push('<td align="center">' + FormatCurrency(currentROITables[myTempClass][myTempPOI].totals.costOffsets_perMember.NI[myTempYear]) + '</td>');
                                            break;
                                        case "Cost offset (PMPM)":
                                            txtArr.push('<td align="center">' + FormatCurrency(currentROITables[myTempClass][myTempPOI].totals.costOffsets_PMPM.NI[myTempYear]) + '</td>');
                                            break;
                                        case "Cost offset per treated patient per month (AOM vs. no intervention)":
                                            txtArr.push('<td align="center">' + FormatCurrency(currentROITables[myTempClass][myTempPOI].totals.costOffsets_perPatient.NI[myTempYear]) + '</td>');
                                            break;
                                        case "Cost offset (PPPM)":
                                            txtArr.push('<td align="center">' + FormatCurrency(currentROITables[myTempClass][myTempPOI].totals.costOffsets_PPPM.NI[myTempYear]) + '</td>');
                                            break;
                                        default:
                                    }

                        }
                    }


                        // console.log(myTempClass, myTempPOI,myTempYear,);
                    txtArr.push('</tr>')
                }

            }
        txtArr.push('</table>')

        }
    }
 












                    for (let valOC of Obesity_Class.data) {

                        for (let val of BMISummary.data) {
                            var myBMIClass = val.Class_Name;



                            if (valOC.Name == myBMIClass) {

                                // console.log('myBMIClass',myBMIClass)

                                if ((val.Class_Name == "Overweight and obesity (I, II, and III)") && (myPOIIndex != 1)) {
                                    var myBMIGroup18_29 = val.group18_29_1;
                                    var myBMIGroup30_39 = val.group30_39_1;
                                    var myBMIGroup40_49 = val.group40_49_1;
                                    var myBMIGroup50_59 = val.group50_59_1;
                                    var myBMIGroup60_64 = val.group60_64_1;
                                } else {
                                    var myBMIGroup18_29 = val.group18_29;
                                    var myBMIGroup30_39 = val.group30_39;
                                    var myBMIGroup40_49 = val.group40_49;
                                    var myBMIGroup50_59 = val.group50_59;
                                    var myBMIGroup60_64 = val.group60_64;
                                }


                                var industryEmployee = ((myBMIGroup18_29 * myAges18To29 / 100) + (myBMIGroup30_39 * myAges30To39 / 100) + (myBMIGroup40_49 * myAges40To49 / 100) + (myBMIGroup50_59 * myAges50To59 / 100) + (myBMIGroup60_64 * myAges60To64 / 100)) * populationValue;
                                //                    console.log('myDisplayIndustry',myDisplayIndustry);
                                //                    console.log('fixedAges18To29',myAges18To29);
                                //                    console.log('fixedAges30To39',myAges30To39);
                                //                    console.log('fixedAges40To49',myAges40To49);
                                //                    console.log('fixedAges50To59',myAges50To59);
                                //                    console.log('fixedAges60To64',myAges60To64);



                                //                    console.log('populationValue',populationValue);


                                // txtArr.push('<div class="resultsPage_sectionTitle">' + valOC.Name + '</div>');

                                // txtArr.push('<table class="table table-striped"><tr><th>Population of Interest</th><th>Emp.</th><th>Year 1</th><th>Year 2</th><th>Year 3</th><th>Year 4</th><th>Year 5</th><th>Year 6</th><th>Year 7</th><th>Year 8</th><th>Year 9</th><th>Year 10</th></tr>');
                            }

                        }



                        //console.log(inputDashboard.AOM_VS.value);
                        //console.log(inputDashboard.View_By.value);

// console.log('myTempClass',myTempClass)
// console.log('myTempPOI',myTempPOI)


                        // console.log('myBMIGroup18_29',myBMIGroup18_29);
                        // console.log('myBMIGroup30_39',myBMIGroup30_39);
                        // console.log('myBMIGroup40_49',myBMIGroup40_49);
                        // console.log('myBMIGroup50_59',myBMIGroup50_59);
                        // console.log('myBMIGroup60_64',myBMIGroup60_64);

                        // console.log('Prevalence18_29_comorbidity',Prevalence18_29_comorbidity);
                        // console.log('Prevalence30_39_comorbidity',Prevalence30_39_comorbidity);
                        // console.log('Prevalence40_49_comorbidity',Prevalence40_49_comorbidity);
                        // console.log('Prevalence50_59_comorbidity',Prevalence50_59_comorbidity);
                        // console.log('Prevalence60_64_comorbidity',Prevalence60_64_comorbidity);

// console.log('industryEmployee',industryEmployee)





                        for (let val of myTempDataFile) {
                            //            console.log(val.Obesity_Class);
                            //            console.log(valOC.Name);

                            if ((val.Obesity_Class == valOC.Name) && (val.Industry == myDisplayIndustry)) {
                                //          if (ROI1.data.find(element => val.Obesity_Class === "'+valOC.Name+''")) {


                                var myEmployees = val.Pop_number;
                                myEmployees = (myEmployees) * 1;
                                var myYear1 = val.Year1;
                                myYear1 = (myYear1 * 1).toFixed(2);
                                var myYear2 = val.Year2;
                                myYear2 = (myYear2 * 1).toFixed(2);
                                var myYear3 = val.Year3;
                                myYear3 = (myYear3 * 1).toFixed(2);
                                var myYear4 = val.Year4;
                                myYear4 = (myYear4 * 1).toFixed(2);
                                var myYear5 = val.Year5;
                                myYear5 = (myYear5 * 1).toFixed(2);
                                var myYear6 = val.Year6;
                                myYear6 = (myYear6 * 1).toFixed(2);
                                var myYear7 = val.Year7;
                                myYear7 = (myYear7 * 1).toFixed(2);
                                var myYear8 = val.Year8;
                                myYear8 = (myYear8 * 1).toFixed(2);
                                var myYear9 = val.Year9;
                                myYear9 = (myYear9 * 1).toFixed(2);
                                var myYear10 = val.Year10;
                                myYear10 = (myYear10 * 1).toFixed(2);
                                // push the text into the array

                                // var myParams.myWorkingHoursInADayValue = document.getElementById('myParams.myWorkingHoursInADayValue').value;
                                // var myParams.myEmployeeHourlyCompensationValue = document.getElementById('myParams.myEmployeeHourlyCompensationValue').value;


                                //console.log(myParams.myWorkingHoursInADayValue);
                                //console.log(myParams.myEmployeeHourlyCompensationValue);


                                // console.log(myParams.myEmployeeHourlyCompensationValue);
                                // console.log(myParams.myWorkingHoursInADayValue);

                                //    if (inputDashboard.AOM_VS.value=="No intervention") {
                                // switch (inputDashboard.View_By.value) {
                                //     case "ROI as % of investment":
                                //         txtArr.push('<tr><td>' + val.Population_of_Interest + '</td><td align="center">' + myEmployees + '</td><td align="center">' + (myYear1 * 100).toFixed(0) + '%</td><td align="center">' + (myYear2 * 100).toFixed(0) + '%</td><td align="center">' + (myYear3 * 100).toFixed(0) + '%</td><td align="center">' + (myYear4 * 100).toFixed(0) + '%</td><td align="center">' + (myYear5 * 100).toFixed(0) + '%</td><td align="center">' + (myYear6 * 100).toFixed(0) + '%</td><td align="center">' + (myYear7 * 100).toFixed(0) + '%</td><td align="center">' + (myYear8 * 100).toFixed(0) + '%</td><td align="center">' + (myYear9 * 100).toFixed(0) + '%</td><td align="center">' + (myYear10 * 100).toFixed(0) + '%</td></tr>');
                                //         break;
                                //     case "ROI":
                                //     case "Cost offset (population)":
                                //         txtArr.push('<tr><td>' + val.Population_of_Interest + '</td>');
                                //         txtArr.push('<td align="center">' + myEmployees + '</td>');
                                //         txtArr.push('<td align="center">' + FormatCurrency(myYear1) + '</td>');
                                //         txtArr.push('<td align="center">' + FormatCurrency(myYear2) + '</td>');
                                //         txtArr.push('<td align="center">' + FormatCurrency(myYear3) + '</td>');
                                //         txtArr.push('<td align="center">' + FormatCurrency(myYear4) + '</td>');
                                //         txtArr.push('<td align="center">' + FormatCurrency(myYear5) + '</td>');
                                //         txtArr.push('<td align="center">' + FormatCurrency(myYear6) + '</td>');
                                //         txtArr.push('<td align="center">' + FormatCurrency(myYear7) + '</td>');
                                //         txtArr.push('<td align="center">' + FormatCurrency(myYear8) + '</td>');
                                //         txtArr.push('<td align="center">' + FormatCurrency(myYear9) + '</td>');
                                //         txtArr.push('<td align="center">' + FormatCurrency(myYear10) + '</td>');
                                //         txtArr.push('</tr>');
                                //         break;
                                //     case "Cost offset (per member)":
                                //     case "Cost offset (PMPM)":
                                //     case "Cost offset per treated patient per month (AOM vs. no intervention)":
                                //     case "Cost offset (PPPM)":
                                //         txtArr.push('<tr><td>' + val.Population_of_Interest + '</td>');
                                //         txtArr.push('<td align="center">' + myEmployees + '</td>');
                                //         txtArr.push('<td align="center">' + FormatCurrency(myYear1) + '</td>');
                                //         txtArr.push('<td align="center">' + FormatCurrency(myYear2) + '</td>');
                                //         txtArr.push('<td align="center">' + FormatCurrency(myYear3) + '</td>');
                                //         txtArr.push('<td align="center">' + FormatCurrency(myYear4) + '</td>');
                                //         txtArr.push('<td align="center">' + FormatCurrency(myYear5) + '</td>');
                                //         txtArr.push('<td align="center">' + FormatCurrency(myYear6) + '</td>');
                                //         txtArr.push('<td align="center">' + FormatCurrency(myYear7) + '</td>');
                                //         txtArr.push('<td align="center">' + FormatCurrency(myYear8) + '</td>');
                                //         txtArr.push('<td align="center">' + FormatCurrency(myYear9) + '</td>');
                                //         txtArr.push('<td align="center">' + FormatCurrency(myYear10) + '</td>');
                                //         txtArr.push('</tr>');
                                //         break;
                                //     default:
                                // }
                                //    }



                                //      console.log('txtArr ==> ', txtArr);
                            }

                        }



                        txtArr.push('</table>');

                        comorbiditiesResultsArr = txtArr;

                    }



                    // join the array with <br /> tags as separators
                    let txt = txtArr;
                    //  let txt = txtArr.join('<br>');
                    //  console.log('txt ==> ', txt);
                    //alert(txt);
                    //   let txt = txtArr.join("");
                    document.getElementById("myInput").innerHTML = txt.join("");
                    document.getElementById("myInput2").innerHTML = "";
                    if (inputDashboard.View_By.value) {
                        const currentTableClass = inputDashboard.View_By.value.replace(/[()% ]/g, '').slice(0, 20);
                        $(".table.table-striped").removeClass().addClass("table table-striped").addClass(currentTableClass)
                    }

                    buildCustomSelect();

                    //         console.log('here: '+myParams.myWorkingHoursInADayValue);

                    // console.log('there: '+myParams.myEmployeeHourlyCompensationValue);

                    // console.log('Snoopy: '+myParams.myWorkingHoursInADayValue1);

                    //console.log('Dog: '+myParams.myEmployeeHourlyCompensationValue1);

                    //console.log(myParams.myWorkingHoursInADayValue, 'summ work');
                    //console.log(myParams.myEmployeeHourlyCompensationValue, 'summ comp');


                    return;

                }




                // Detail Results Function
                //    var my_Population_of_Interest;

                function toggleTableSwitch() {
                    const toggleGraph = $(".toggleGraph")
                    const toggleTable = $(".toggleTable")
                    const graphArea = $(".graphHolder")
                    const tableArea = $(".tableHolder")
                    const pageContainer = $(".container")
                    const dropdownAOM = $(".custom-select__container.AOM-vs")
                    const dropdownObesity = $(".obesity .custom-select")
                    const dropdownViewBy = $(".view-by .custom-select")
                    
                    if (toggleGraph.hasClass("toggleActive")) {
                        toggleGraph.removeClass("toggleActive")
                        toggleTable.addClass("toggleActive")
                        graphArea.addClass("resultHidden")
                        tableArea.removeClass("resultHidden")
                    } else if (toggleTable.hasClass("toggleActive")) {
                        toggleTable.removeClass("toggleActive")
                        toggleGraph.addClass("toggleActive")
                        tableArea.addClass("resultHidden")
                        graphArea.removeClass("resultHidden")
                    }
                    
                    if (pageContainer.hasClass("eventAnalysis")) {
                        const viewBySection = $(".eventBased_viewBySection")
                        if (toggleGraph.hasClass("toggleActive")) {
                            viewBySection.addClass("sectionHidden")
                        } else if (toggleTable.hasClass("toggleActive")) {
                            viewBySection.removeClass("sectionHidden")
                        }
                    }
                    
                    if (pageContainer.hasClass("simpleResultPage")) {
                        const tableNote = $(".simpleResult_tableNote")
                        if (toggleGraph.hasClass("toggleActive")) {
                            tableNote.removeClass("rightAlign")
                        } else if (toggleTable.hasClass("toggleActive")) {
                            tableNote.addClass("rightAlign")
                        }
                    }

                    // Remove "AOM vs" dropdown from Detailed Results when viewing
                    // data as chart, replace when viewing as table 
                    
                    if (pageContainer.hasClass('detailedResults')) {
                        console.log("Toggle switch for Detailed Results", toggleGraph.hasClass('toggleActive'));
                        if (toggleGraph.hasClass('toggleActive')) {
                            dropdownAOM.addClass("menu-hide");
                            dropdownObesity.addClass("constrain-width");
                            dropdownViewBy.addClass("constrain-width");
                        }
                        else {
                            dropdownAOM.removeClass("menu-hide");
                            dropdownObesity.removeClass("constrain-width");
                            dropdownViewBy.removeClass("constrain-width");
                        }

                        console.log("   -> Intervention dropdown hidden?", dropdownAOM.hasClass("menu-hide"));
                    }
                  
                 }

                function toggleViewBy() {
                    const rateBtn = $(".eventBased_viewBy .rateBtn");
                    const perBtn = $(".eventBased_viewBy .perBtn");
                    const rateContent = $(".eventBased_viewByNum .viewByCount")
                    const perContent = $(".eventBased_viewByNum .viewByPer")
                    if (rateBtn.hasClass("toggleActive")) {
                        rateBtn.removeClass("toggleActive")
                        perBtn.addClass("toggleActive")
                        rateContent.addClass("resultHidden")
                        perContent.removeClass("resultHidden")
                    } else if (perBtn.hasClass("toggleActive")) {
                        perBtn.removeClass("toggleActive")
                        rateBtn.addClass("toggleActive")
                        perContent.addClass("resultHidden")
                        rateContent.removeClass("resultHidden")
                    }
                }

                function eventBasedAnalysis() {


                    $(".container").removeClass().addClass("container eventAnalysis");

                    if (inputDashboard.Obesity_Class) {
                        var myObesityClass = inputDashboard.Obesity_Class.value;
                    } else {
                        var myObesityClass = "Overweight and obesity (I, II, and III)";
                    }

                    if (inputDashboard.POI1) {
                        var myPOIValue = inputDashboard.POI1.value;
                        if ((myPOIValue === "People with overweight/ obesity") || (myPOIValue === "People with obesity")) {
                            if (myObesityClass === "Overweight and obesity (I, II, and III)") {
                                var myPOIValue = "People with overweight/ obesity";
                            } else {
                                var myPOIValue = "People with obesity";
                            }
                        } else {
                            var myPOIValue = inputDashboard.POI1.value;
                        }
                    } else {
                        if (myObesityClass === "Overweight and obesity (I, II, and III)") {
                            var myPOIValue = "People with overweight/ obesity";
                        } else {
                            var myPOIValue = "People with obesity";
                        }
                    }

                    var myPOIIndex;

                    switch (myPOIValue) {
                        case "People with overweight/ obesity":
                        case "People with obesity":
                            myPOIIndex = 1;
                            break;
                        case "Cardiovascular diseases":
                            myPOIIndex = 2;
                            break;
                        case "Cerebrovascular diseases":
                            myPOIIndex = 3;
                            break;
                        case "Dyslipidemia":
                            myPOIIndex = 4;
                            break;
                        case "Hypertension":
                            myPOIIndex = 5;
                            break;
                        case "Osteoarthritis":
                            myPOIIndex = 6;
                            break;
                        case "Diabetes":
                            myPOIIndex = 7;
                            break;
                        case "Cardiovascular diseases (with cerebrovascular diseases)":
                            myPOIIndex = 8;
                            break;
                        case "Any cardiometabolic disease*":
                            myPOIIndex = 9;
                            break;
                        case "Cardiovascular diseases (with dyslipidemia)":
                            myPOIIndex = 10;
                            break;
                        case "Cardiovascular diseases (with hypertension)":
                            myPOIIndex = 11;
                            break;
                        case "Cardiovascular diseases (with diabetes)":
                            myPOIIndex = 12;
                            break;
                        case "Osteoarthritis (with cardiovascular diseases)":
                            myPOIIndex = 13;
                            break;
                        case "Osteoarthritis (with diabetes)":
                            myPOIIndex = 14;
                            break;
                        default:
                    }

                    // console.log('txt18_29-6',myAges18To29);
                    //     console.log('txt30_39-6',myAges30To39);
                    //     console.log('txt40_49-6',myAges40To49);
                    //     console.log('txt50_59-6',myAges50To59);
                    //     console.log('txt60_64-6',myAges60To64);

                    var resultNavBar = '';
                    resultNavBar += '<div class="resultsPage_header"><div><img src="./res/img/icon-results.svg"/><h2>Event-Based Analysis</h2></div>' +
                        '<div class="resultsPage_pageNav"><a href="#" onClick="toShowSummaryResult(myParams,currentROITables,currentDistributionTables,currentEventsTables);">Summary Results</a>' +
                        '<a href="#" class="resultsPage_active" onClick="eventBasedAnalysis();">Event-Based Analysis</a>' +
                        '<a href="#" onClick="detailedResults(myParams);">Detailed Results</a><a href="#" onClick="actions();">Actions</a>' +
                        '</div></div>';
                    resultNavBar += '<table>';
                    resultNavBar += '<tr>';
                    // resultNavBar +=  '<td colspan="5">AOM vs.: <select name="AOM_VS" onChange="detailedResults(myParams);">';
                    // GEOFF'S CHANGES BEGIN
                    resultNavBar += '<td colspan="5" class="results results-detailed">' +
                        '<div class="custom-select__container results AOM-vs">' +
                        'AOM vs.: ' +
                        '<div class="custom-select">' +
                        '<select name="AOM_VS" onChange="calculateEventsResultsLoop(currentEventsTables, currentROITables, myParams);">';
                    // GEOFF'S CHANGES END


                    if (inputDashboard.AOM_VS) {
                        if (inputDashboard.AOM_VS.value == "No intervention") {
                            resultNavBar += '<option value="No intervention" selected>No intervention</option><optgroup class="divider"></optgroup>';
                        } else {
                            resultNavBar += '<option value="No intervention">No intervention</option><optgroup class="divider"></optgroup>';
                        }

                        if (inputDashboard.AOM_VS.value == "ILT") {
                            resultNavBar += '<option value="ILT" selected>ILT</option><optgroup class="divider"></optgroup>';
                        } else {
                            resultNavBar += '<option value="ILT">ILT</option><optgroup class="divider"></optgroup>';
                        }
                    } else {
                        resultNavBar += '<option value="No intervention">No intervention</option><optgroup class="divider"></optgroup>';
                        resultNavBar += '<option value="ILT">ILT</option><optgroup class="divider"></optgroup>';
                    }

                    // resultNavBar +=  '</select>&nbsp;&nbsp;Obesity class: <select name="Obesity_Class" onChange="detailedResults(myParams);"><optgroup class="divider"></optgroup>';

                    // GEOFF'S CHANGES BEGIN
                    resultNavBar += '</select></div><div class="custom-select__buffer"></div></div>' +
                        '<div class="custom-select__container results obesity">' +
                        // '&nbsp;&nbsp;View By: ' +
                        'Obesity class: ' +
                        '<div class="custom-select">' +
                        '<select name="Obesity_Class" onChange="calculateEventsResultsLoop(currentEventsTables, currentROITables, myParams);">';
                    // GEOFF'S CHANGES END

                    var i = 0;
                    for (let valObesity of Obesity_Class.data) {

                        if (inputDashboard.Obesity_Class) {
                            if (inputDashboard.Obesity_Class.value == valObesity.Name) {
                                //                        console.log()
                                resultNavBar += '<option value="' + valObesity.Name + '" selected>' + valObesity.ShortForm + '</option><optgroup class="divider"></optgroup>';
                            } else {
                                resultNavBar += '<option value="' + valObesity.Name + '">' + valObesity.ShortForm + '</option><optgroup class="divider"></optgroup>';
                            }
                        } else {

                            resultNavBar += '<option value="' + valObesity.Name + '">' + valObesity.ShortForm + '</option><optgroup class="divider"></optgroup>';

                        }

                    }

                    // resultNavBar +=  '</select>&nbsp;&nbsp;View By: <select name="View_By" onChange="detailedResults(myParams);">';
                    // GEOFF'S CHANGES BEGIN
                    resultNavBar += '</select></div><div class="custom-select__buffer"></div></div>' +
                        '<div class="custom-select__container results view-by">' +
                        // '&nbsp;&nbsp;View By: ' +
                        'View By: ' +
                        '<div class="custom-select">' +
                        '<select name="View_By" onChange="calculateEventsResultsLoop(currentEventsTables, currentROITables, myParams);">';
                    // GEOFF'S CHANGES END

                    if (inputDashboard.View_By) {
                     if (inputDashboard.View_By.value == "savings_per_patient") {
                            resultNavBar += '<option value="savings_per_patient" selected>Savings per patient</option><optgroup class="divider"></optgroup>';
                        } else {
                            resultNavBar += '<option value="savings_per_patient">Savings per patient</option><optgroup class="divider"></optgroup>';
                        }

                        if (inputDashboard.View_By.value == "total_savings") {
                            resultNavBar += '<option value="total_savings" selected>Total savings</option><optgroup class="divider"></optgroup>';
                        } else {
                            resultNavBar += '<option value="total_savings">Total savings</option><optgroup class="divider"></optgroup>';
                        }

                        if (inputDashboard.View_By.value == "PPPM_treated") {
                            resultNavBar += '<option value="PPPM_treated" selected>PPPM &#40;treated patients&#41;</option><optgroup class="divider"></optgroup>';
                        } else {
                           resultNavBar += '<option value="PPPM_treated">PPPM &#40;treated patients&#41;</option><optgroup class="divider"></optgroup>';
                        }

                        if (inputDashboard.View_By.value == "PMPM_based") {
                            resultNavBar += '<option value="PMPM_based" selected>PMPM &#40;based on 10,000 individuals&#41;</option><optgroup class="divider"></optgroup>';
                        } else {
                           resultNavBar += '<option value="PMPM_based">PMPM &#40;based on 10,000 individuals&#41;</option><optgroup class="divider"></optgroup>';
                        }
                    } else {
                        resultNavBar += '<option value="savings_per_patient">Savings per patient</option><optgroup class="divider"></optgroup>';
                        resultNavBar += '<option value="total_savings">Total savings</option><optgroup class="divider"></optgroup>';
                        resultNavBar += '<option value="PPPM_treated">PPPM &#40;treated patients&#41;</option><optgroup class="divider"></optgroup>';
                        resultNavBar += '<option value="PMPM_based">PPPM &#40;based on 10,000 individuals&#41;</option><optgroup class="divider"></optgroup>';
                    }
                    // GEOFF'S CHANGES BEGIN
                    resultNavBar += '</select></div><div class="custom-select__buffer"></div></div></td>';
                    resultNavBar += '<td class="switchToggle__container"><div class="detailedResults_switchToggle" onClick="toggleTableSwitch()">' +
                        '<div class="toggleGraph"><svg viewBox="0 0 18 17" xmlns="http://www.w3.org/2000/svg"><path d="M12.8 16.2a.7.7 0 01-.7-.7V.9c0-.4.3-.7.7-.7h3.8c.4 0 .7.3.7.7v14.6c0 .4-.4.7-.7.7zm-5.6 0c-.4 0-.7-.3-.7-.6v-11c0-.2.3-.4.7-.4H11c.4 0 .7.2.7.5v11c0 .3-.4.5-.7.5zm-5.6 0c-.4 0-.7-.2-.7-.4V8.5c0-.2.3-.3.7-.3h3.8c.4 0 .7.1.7.3v7.3c0 .2-.4.4-.7.4z" fill-rule="nonzero"/></svg></div>' +
                        '<div class="toggleTable toggleActive"><svg viewBox="0 0 17 17" xmlns="http://www.w3.org/2000/svg"><path d="M.9 11.7c0-.4.3-.7.7-.7h14.6c.4 0 .7.3.7.7v3.6c0 .4-.3.7-.7.7H1.5a.7.7 0 01-.6-.6zm0-5.5c0-.4.3-.7.7-.7h14.6c.4 0 .7.3.7.7v3.7c0 .4-.3.7-.7.7H1.5a.7.7 0 01-.6-.7zM.9.7c0-.4.3-.7.7-.7h14.6c.4 0 .7.3.7.7v3.7c0 .4-.3.7-.7.7H1.5a.7.7 0 01-.6-.7z" /></svg></div>' +
                        '</div></td>';

                    // GEOFF'S CHANGES END


                    resultNavBar += '</tr>';
                    resultNavBar += '<tr class="detailedResults_tableNote_row"><td><div class="detailedResults_tableNote">*All refers to overweight and obesity classes I, II, and III</div></td></tr>';

                    resultNavBar += '</table>';
                    document.getElementById("MyNavbar").innerHTML = resultNavBar;




                    let txtArr = [];

                    txtArr.push('<table border="0" style="background: #FAFAFA">');
                    txtArr.push('<tr>');
                    txtArr.push('<td valign="top" class="detailedResults_td_padding">');
                    txtArr.push('<div style="margin-right: 25px;">');
                    txtArr.push('<div class="detailedResults_subTitle"><b>Population of Interest</b></div>');
                    txtArr.push('<div><div class="custom-select population resizable detailedResults_select"><select name="POI1" onChange="calculateEventsResultsLoop(currentEventsTables, currentROITables, myParams);">');

                     txtArr.push('<option value="People with overweight/ obesity">People with overweight and obesity</option>')
                     txtArr.push('<option value="Diabetes">Diabetes</option>')
                     txtArr.push('<option value="Hypertension">Hypertension</option>')
                     txtArr.push('<option value="Dyslipidemia">Dyslipidemia</option>')
                     txtArr.push('<option value="HFpEF">HFpEF</option>')
                     txtArr.push('<option value="OA">Knee osteoarthritis</option>')


                     let txt = txtArr;
                     txtArr.push('</select></div><br /><br />');
                     txtArr.push('<p class="detailedResults_population" id="rcorners2"><img src="./res/img/poi.jpg"><span class="eventsPopulationContainer" id="poi-button"></span></p>');

                     txtArr.push('</div>');
                     txtArr.push('<div class="eventBased_viewBySection" id="eventBased_viewBySection"><div><b>View by</b></div>')
                     txtArr.push('<div class="eventBased_viewBy" onclick="toggleViewBy()"><div class="toggleActive rateBtn">Event rate</div><div class="perBtn">% Events</div></div>')
                     txtArr.push('<div class="eventBased_viewByNote" id="icon_note"></div>')
                     txtArr.push('<div id="icon_table">')
                    
                            // icons dynamically created here

                        txtArr.push('</div>');
                        txtArr.push('<div class="eventBased_viewByBottomNote">Cost information is related to the above events avoided per the 10,000 individuals over 10 years</div>')
                     txtArr.push('</div>');
                     
                     txtArr.push('</td>');
                     txtArr.push('<td valign="top">');
                     txtArr.push('<div class="table-container">');
                     txtArr.push('<div class="table-content">');
                     txtArr.push('<div class="table-holder eventBased_tableHolder tableHolder">');
                     // TOP TABLE STARTS
                    txtArr.push('   <table id="event_top_table">');
                 
                     //top table is dynamically created here

                    txtArr.push('   </table>');
                    // TOP TABLE ENDS
                    txtArr.push('   <div class="eventBased_tableBottom"><div class="eventBased_tableBottomNote">*Based on literature sourced annual direct costs treating the event and absenteeism and short-term disability days</div>' +

                     // TABLE TOTALS START
                        '<div class="eventBased_tableTotal" id="event_top_table_total"></div></div>');
                    txtArr.push('</div>');
                 
                    // TABLE TOTALS END


                    txtArr.push('<div class="table-holder eventBased_tableHolder tableHolder" style="margin-top: 15px">');
                     // BOTTOM TABLE START
                    txtArr.push('   <table id="event_bottom_table">');
                 
                     //bottom table is dynamically created here

                    txtArr.push('   </table>');
                    // BOTTOM TABLE ENDS
                    txtArr.push('   <div class="eventBased_tableBottom"><div class="eventBased_tableBottomNote">*Events avoided as a percentage of the number of events with No intervention</div></div>');
                    txtArr.push('</div>');
                    txtArr.push('</div>');
                    txtArr.push('</div>');


                    txtArr.push('</td>');


                    txtArr.push()

                    txtArr.push('</tr>');
                    txtArr.push('</table>');


                    document.getElementById("myInput2").innerHTML = "";
                    console.log("myInput2 cleared : line 1758");
                    document.getElementById("myInput").innerHTML = txt.join("");

					// attach modal functionality for POI modal
					poi_modal_population.init();

                    const dropdownAOM = $(".custom-select__container.AOM-vs")
                    const dropdownObesity = $(".obesity .custom-select")
                    const dropdownViewBy = $(".view-by .custom-select")
                    dropdownAOM.removeClass("menu-hide")
                    dropdownObesity.addClass("constrain-width")
                  //   dropdownViewBy.addClass("constrain-width")


                    const graph = "<div class='eventBased_graphHolder graphHolder resultHidden'>" 
                        + "<div id='eventsAvoidedChartHolder' class='Gplaceholder'></div>" 
                        + "<div id='eventsAvoidedLegend' class='chart-legend'>"
                            + "<h4>Legend</h4>"
                            + "<ul>"
                            + "</ul>"
                        + "</div>"
                    + "</div>" 
                     + "<div class='eventBased_graphHolder graphHolder resultHidden'>" 
                           + "<div id='eventsSavingsChartHolder' class='Gplaceholder GplaceholderTwo'></div>" 
                           
                           + "<div class='chart-legend'>"
                              + "<h4>Legend</h4>"
                                 + "<ul>"
                                       + "<li class='chart-purple'>Direct costs</li>"
                                       + "<li class='chart-blue'>Indirect costs</li>"
                                 + "</ul>"
                           + "</div>"

                     + "</div>"
                     $(".table-content").append(graph)


                     buildCustomSelect();
                     console.log(currentEventsTables, 'CET')
                  
                     calculateEventsResultsLoop(currentEventsTables, currentROITables, myParams);
                     

               }

          

                var myPercentageIndividualsTakingAOMs = 100;
                function myEligibilityForTreatment() {
                    if (inputDashboard.myPercentageEmployeesTakingAOMsAmongThoseEligibleValue.value == "100%") {
                        myPercentageIndividualsTakingAOMs = 100;
                    } else {
                        myPercentageIndividualsTakingAOMs = (inputDashboard.myPercentageEmployeesTakingAOMsAmongThoseEligibleValue.value);
                    }
                    myParams.myPercentageIndividualsTakingAOMs = myPercentageIndividualsTakingAOMs;
                    return myPercentageIndividualsTakingAOMs;
                }

                function showMedicalCostsCheckbox() {
                    if (inputDashboard.medicalCostsChkbx) {
                        myParams.medicalCostsChkbx = inputDashboard.medicalCostsChkbx.checked;
                    } else {
                        myParams.medicalCostsChkbx = true;
                    }
                }

                function showPharmacyCostsCheckbox() {
                    if (inputDashboard.pharmacyCostsChkbx) {
                        myParams.pharmacyCostsChkbx = inputDashboard.pharmacyCostsChkbx.checked;
                    } else {
                        myParams.pharmacyCostsChkbx = true;
                    }
                }

                function showAbsenteeismCheckbox() {
                    if (inputDashboard.absenteeismChkbx) {
                        myParams.absenteeismChkbx = inputDashboard.absenteeismChkbx.checked;
                    } else {
                        myParams.absenteeismChkbx = true;
                    }
                }

                function showPresenteeismCheckbox() {
                    if (inputDashboard.presenteeismChkbx) {
                        myParams.presenteeismChkbx = inputDashboard.presenteeismChkbx.checked;
                    } else {
                        myParams.presenteeismChkbx = true;
                    }
                }

                function showWorkersCompensationCheckbox() {
                    if (inputDashboard.workersCompensationChkbx) {
                        myParams.workersCompensationChkbx = inputDashboard.workersCompensationChkbx.checked;
                    } else {
                        myParams.workersCompensationChkbx = true;
                    }
                }

                function showShortTermAndLongTermDisabilityCheckbox() {
                    if (inputDashboard.shortTermAndLongTermDisabilityChkbx) {
                        myParams.shortTermAndLongTermDisabilityChkbx = inputDashboard.shortTermAndLongTermDisabilityChkbx.checked;
                    } else {
                        myParams.shortTermAndLongTermDisabilityChkbx = true;
                    }
                }

                function showMyIntensiveDietAndExercise() {
                    if (inputDashboard.myIntensiveDietAndExerciseVal) {
                       myParams.myIDEValue = inputDashboard.myIntensiveDietAndExerciseVal.value/100;
                    } else {
                       myParams.myIDEValue = 0.83;
                    }
                }

                function showMyWeightWatchers() {
                    if (inputDashboard.myWeightWatchersVal) {
                       myParams.myWeightWatchersValue = inputDashboard.myWeightWatchersVal.value/100;
                    } else {
                       myParams.myWeightWatchersValue = 0.135;
                    }
                }

                function showMyJennyCraig() {
                    if (inputDashboard.myJennyCraigVal) {
                       myParams.myJennyCraigValue = inputDashboard.myJennyCraigVal.value/100;
                    } else {
                       myParams.myJennyCraigValue = 0.035;
                    }
                }

                


                function showMyBMI(BMI_half_unit) {

                    for (var val of BMIAge.data) {
                        if (BMI_half_unit == val.BMI_half_unit) {
                            Age_group_less_than_30 = val.Age_group_less_than_30;
                            Age_group_30_39 = val.Age_group_30_39;
                            Age_group_40_49 = val.Age_group_40_49;
                            Age_group_50_59 = val.Age_group_50_59;
                            Age_group_60_64 = val.Age_group_60_64;
                            return [Age_group_less_than_30, Age_group_30_39, Age_group_40_49, Age_group_50_59, Age_group_60_64];
                        }
                    }
                }





                const ObesityClassA_BL_18_29_comorbidity = [];
                const ObesityClassA_BL_30_39_comorbidity = [];
                const ObesityClassA_BL_40_49_comorbidity = [];
                const ObesityClassA_BL_50_59_comorbidity = [];
                const ObesityClassA_BL_60_64_comorbidity = [];

                const ObesityClassB_BL_18_29_comorbidity = [];
                const ObesityClassB_BL_30_39_comorbidity = [];
                const ObesityClassB_BL_40_49_comorbidity = [];
                const ObesityClassB_BL_50_59_comorbidity = [];
                const ObesityClassB_BL_60_64_comorbidity = [];

                const ObesityClassC_BL_18_29_comorbidity = [];
                const ObesityClassC_BL_30_39_comorbidity = [];
                const ObesityClassC_BL_40_49_comorbidity = [];
                const ObesityClassC_BL_50_59_comorbidity = [];
                const ObesityClassC_BL_60_64_comorbidity = [];

                const ObesityClassD_BL_18_29_comorbidity = [];
                const ObesityClassD_BL_30_39_comorbidity = [];
                const ObesityClassD_BL_40_49_comorbidity = [];
                const ObesityClassD_BL_50_59_comorbidity = [];
                const ObesityClassD_BL_60_64_comorbidity = [];




                const ObesityClassA_Total_BL_18_29_comorbidity = [];
                const ObesityClassB_Total_BL_18_29_comorbidity = [];
                const ObesityClassC_Total_BL_18_29_comorbidity = [];
                const ObesityClassD_Total_BL_18_29_comorbidity = [];

                const ObesityClassA_Total_BL_30_39_comorbidity = [];
                const ObesityClassB_Total_BL_30_39_comorbidity = [];
                const ObesityClassC_Total_BL_30_39_comorbidity = [];
                const ObesityClassD_Total_BL_30_39_comorbidity = [];

                const ObesityClassA_Total_BL_40_49_comorbidity = [];
                const ObesityClassB_Total_BL_40_49_comorbidity = [];
                const ObesityClassC_Total_BL_40_49_comorbidity = [];
                const ObesityClassD_Total_BL_40_49_comorbidity = [];

                const ObesityClassA_Total_BL_50_59_comorbidity = [];
                const ObesityClassB_Total_BL_50_59_comorbidity = [];
                const ObesityClassC_Total_BL_50_59_comorbidity = [];
                const ObesityClassD_Total_BL_50_59_comorbidity = [];

                const ObesityClassA_Total_BL_60_64_comorbidity = [];
                const ObesityClassB_Total_BL_60_64_comorbidity = [];
                const ObesityClassC_Total_BL_60_64_comorbidity = [];
                const ObesityClassD_Total_BL_60_64_comorbidity = [];


                // const ObseityClassA_BL_Count_comorbidity = new Array(15);
                // ObseityClassA_BL_Count_comorbidity.forEach(array => {
                //     array.push(new Array(65));
                // })
                const ObseityClassA_BL_Count_comorbidity = [];
                const ObseityClassB_BL_Count_comorbidity = [];
                const ObseityClassC_BL_Count_comorbidity = [];
                const ObseityClassD_BL_Count_comorbidity = [];

                const ObseityClassA_Count_comorbidity = [];
                for (k = 1; k <= 14; k++) {
                    ObseityClassA_Count_comorbidity[k] = [];
                    for (m = 18; m <= 64; m++) {
                        ObseityClassA_Count_comorbidity[k][m] = [];
                    }
                }

                const ObseityClassB_Count_comorbidity = [];
                for (k = 1; k <= 14; k++) {
                    ObseityClassB_Count_comorbidity[k] = [];
                    for (m = 18; m <= 64; m++) {
                        ObseityClassB_Count_comorbidity[k][m] = [];
                    }
                }

                const ObseityClassC_Count_comorbidity = [];
                for (k = 1; k <= 14; k++) {
                    ObseityClassC_Count_comorbidity[k] = [];
                    for (m = 18; m <= 64; m++) {
                        ObseityClassC_Count_comorbidity[k][m] = [];
                    }
                }

                const ObseityClassD_Count_comorbidity = [];
                for (k = 1; k <= 14; k++) {
                    ObseityClassD_Count_comorbidity[k] = [];
                    for (m = 18; m <= 64; m++) {
                        ObseityClassD_Count_comorbidity[k][m] = [];
                    }
                }

                const ObseityClassA_Proportions29_comorbidity = [];
                const ObseityClassA_Proportions39_comorbidity = [];
                const ObseityClassA_Proportions49_comorbidity = [];
                const ObseityClassA_Proportions59_comorbidity = [];
                const ObseityClassA_Proportions64_comorbidity = [];

                const ObseityClassB_Proportions29_comorbidity = [];
                const ObseityClassB_Proportions39_comorbidity = [];
                const ObseityClassB_Proportions49_comorbidity = [];
                const ObseityClassB_Proportions59_comorbidity = [];
                const ObseityClassB_Proportions64_comorbidity = [];

                const ObseityClassC_Proportions29_comorbidity = [];
                const ObseityClassC_Proportions39_comorbidity = [];
                const ObseityClassC_Proportions49_comorbidity = [];
                const ObseityClassC_Proportions59_comorbidity = [];
                const ObseityClassC_Proportions64_comorbidity = [];

                const ObseityClassD_Proportions29_comorbidity = [];
                const ObseityClassD_Proportions39_comorbidity = [];
                const ObseityClassD_Proportions49_comorbidity = [];
                const ObseityClassD_Proportions59_comorbidity = [];
                const ObseityClassD_Proportions64_comorbidity = [];

                for (k = 1; k <= 14; k++) {
                    ObseityClassA_Proportions29_comorbidity[k] = [];
                    ObseityClassA_Proportions39_comorbidity[k] = [];
                    ObseityClassA_Proportions49_comorbidity[k] = [];
                    ObseityClassA_Proportions59_comorbidity[k] = [];
                    ObseityClassA_Proportions64_comorbidity[k] = [];

                    ObseityClassB_Proportions29_comorbidity[k] = [];
                    ObseityClassB_Proportions39_comorbidity[k] = [];
                    ObseityClassB_Proportions49_comorbidity[k] = [];
                    ObseityClassB_Proportions59_comorbidity[k] = [];
                    ObseityClassB_Proportions64_comorbidity[k] = [];

                    ObseityClassC_Proportions29_comorbidity[k] = [];
                    ObseityClassC_Proportions39_comorbidity[k] = [];
                    ObseityClassC_Proportions49_comorbidity[k] = [];
                    ObseityClassC_Proportions59_comorbidity[k] = [];
                    ObseityClassC_Proportions64_comorbidity[k] = [];

                    ObseityClassD_Proportions29_comorbidity[k] = [];
                    ObseityClassD_Proportions39_comorbidity[k] = [];
                    ObseityClassD_Proportions49_comorbidity[k] = [];
                    ObseityClassD_Proportions59_comorbidity[k] = [];
                    ObseityClassD_Proportions64_comorbidity[k] = [];

                }



                const ObseityClassB_yr1_Count_comorbidity = [];
                const ObseityClassC_yr1_Count_comorbidity = [];
                const ObseityClassD_yr1_Count_comorbidity = [];

                const ObseityClassA_yr2_Count_comorbidity = [];
                const ObseityClassB_yr2_Count_comorbidity = [];
                const ObseityClassC_yr2_Count_comorbidity = [];
                const ObseityClassD_yr2_Count_comorbidity = [];

                const ObseityClassA_yr3_Count_comorbidity = [];
                const ObseityClassB_yr3_Count_comorbidity = [];
                const ObseityClassC_yr3_Count_comorbidity = [];
                const ObseityClassD_yr3_Count_comorbidity = [];

                const ObseityClassA_yr4_Count_comorbidity = [];
                const ObseityClassB_yr4_Count_comorbidity = [];
                const ObseityClassC_yr4_Count_comorbidity = [];
                const ObseityClassD_yr4_Count_comorbidity = [];

                const ObseityClassA_yr5_Count_comorbidity = [];
                const ObseityClassB_yr5_Count_comorbidity = [];
                const ObseityClassC_yr5_Count_comorbidity = [];
                const ObseityClassD_yr5_Count_comorbidity = [];

                const ObseityClassA_yr6_Count_comorbidity = [];
                const ObseityClassB_yr6_Count_comorbidity = [];
                const ObseityClassC_yr6_Count_comorbidity = [];
                const ObseityClassD_yr6_Count_comorbidity = [];

                const ObseityClassA_yr7_Count_comorbidity = [];
                const ObseityClassB_yr7_Count_comorbidity = [];
                const ObseityClassC_yr7_Count_comorbidity = [];
                const ObseityClassD_yr7_Count_comorbidity = [];

                const ObseityClassA_yr8_Count_comorbidity = [];
                const ObseityClassB_yr8_Count_comorbidity = [];
                const ObseityClassC_yr8_Count_comorbidity = [];
                const ObseityClassD_yr8_Count_comorbidity = [];

                const ObseityClassA_yr9_Count_comorbidity = [];
                const ObseityClassB_yr9_Count_comorbidity = [];
                const ObseityClassC_yr9_Count_comorbidity = [];
                const ObseityClassD_yr9_Count_comorbidity = [];

                const ObseityClassA_yr10_Count_comorbidity = [];
                const ObseityClassB_yr10_Count_comorbidity = [];
                const ObseityClassC_yr10_Count_comorbidity = [];
                const ObseityClassD_yr10_Count_comorbidity = [];


                const age18_29_comorbidity = [];
                const age30_39_comorbidity = [];
                const age40_49_comorbidity = [];
                const age50_59_comorbidity = [];
                const age60_64_comorbidity = [];
                const Prevalence18_29_comorbidity = [];
                const Prevalence30_39_comorbidity = [];
                const Prevalence40_49_comorbidity = [];
                const Prevalence50_59_comorbidity = [];
                const Prevalence60_64_comorbidity = [];

                const ObseityClassA_BL_proportions_29_comorbidity = [];
                const ObseityClassA_BL_proportions_39_comorbidity = [];
                const ObseityClassA_BL_proportions_49_comorbidity = [];
                const ObseityClassA_BL_proportions_59_comorbidity = [];
                const ObseityClassA_BL_proportions_64_comorbidity = [];

                const ObseityClassB_BL_proportions_29_comorbidity = [];
                const ObseityClassB_BL_proportions_39_comorbidity = [];
                const ObseityClassB_BL_proportions_49_comorbidity = [];
                const ObseityClassB_BL_proportions_59_comorbidity = [];
                const ObseityClassB_BL_proportions_64_comorbidity = [];

                const ObseityClassC_BL_proportions_29_comorbidity = [];
                const ObseityClassC_BL_proportions_39_comorbidity = [];
                const ObseityClassC_BL_proportions_49_comorbidity = [];
                const ObseityClassC_BL_proportions_59_comorbidity = [];
                const ObseityClassC_BL_proportions_64_comorbidity = [];

                const ObseityClassD_BL_proportions_29_comorbidity = [];
                const ObseityClassD_BL_proportions_39_comorbidity = [];
                const ObseityClassD_BL_proportions_49_comorbidity = [];
                const ObseityClassD_BL_proportions_59_comorbidity = [];
                const ObseityClassD_BL_proportions_64_comorbidity = [];

                const ObseityClassA_total_count18_29_comorbidity = [];
                const ObseityClassB_total_count18_29_comorbidity = [];
                const ObseityClassC_total_count18_29_comorbidity = [];
                const ObseityClassD_total_count18_29_comorbidity = [];

                const ObseityClassA_total_count30_39_comorbidity = [];
                const ObseityClassB_total_count30_39_comorbidity = [];
                const ObseityClassC_total_count30_39_comorbidity = [];
                const ObseityClassD_total_count30_39_comorbidity = [];

                const ObseityClassA_total_count40_49_comorbidity = [];
                const ObseityClassB_total_count40_49_comorbidity = [];
                const ObseityClassC_total_count40_49_comorbidity = [];
                const ObseityClassD_total_count40_49_comorbidity = [];

                const ObseityClassA_total_count50_59_comorbidity = [];
                const ObseityClassB_total_count50_59_comorbidity = [];
                const ObseityClassC_total_count50_59_comorbidity = [];
                const ObseityClassD_total_count50_59_comorbidity = [];

                const ObseityClassA_total_count60_64_comorbidity = [];
                const ObseityClassB_total_count60_64_comorbidity = [];
                const ObseityClassC_total_count60_64_comorbidity = [];
                const ObseityClassD_total_count60_64_comorbidity = [];


                for (k = 1; k <= 14; k++) {
                    ObseityClassA_total_count18_29_comorbidity[k] = [];
                    ObseityClassB_total_count18_29_comorbidity[k] = [];
                    ObseityClassC_total_count18_29_comorbidity[k] = [];
                    ObseityClassD_total_count18_29_comorbidity[k] = [];

                    ObseityClassA_total_count30_39_comorbidity[k] = [];
                    ObseityClassB_total_count30_39_comorbidity[k] = [];
                    ObseityClassC_total_count30_39_comorbidity[k] = [];
                    ObseityClassD_total_count30_39_comorbidity[k] = [];

                    ObseityClassA_total_count40_49_comorbidity[k] = [];
                    ObseityClassB_total_count40_49_comorbidity[k] = [];
                    ObseityClassC_total_count40_49_comorbidity[k] = [];
                    ObseityClassD_total_count40_49_comorbidity[k] = [];

                    ObseityClassA_total_count50_59_comorbidity[k] = [];
                    ObseityClassB_total_count50_59_comorbidity[k] = [];
                    ObseityClassC_total_count50_59_comorbidity[k] = [];
                    ObseityClassD_total_count50_59_comorbidity[k] = [];

                    ObseityClassA_total_count60_64_comorbidity[k] = [];
                    ObseityClassB_total_count60_64_comorbidity[k] = [];
                    ObseityClassC_total_count60_64_comorbidity[k] = [];
                    ObseityClassD_total_count60_64_comorbidity[k] = [];

                }


                const ObseityClassA_total_yr1_count30_39_comorbidity = [];
                const ObseityClassA_total_yr1_count40_49_comorbidity = [];
                const ObseityClassA_total_yr1_count50_59_comorbidity = [];
                const ObseityClassA_total_yr1_count60_64_comorbidity = [];

                const ObseityClassA_total_yr2_count18_29_comorbidity = [];
                const ObseityClassA_total_yr2_count30_39_comorbidity = [];
                const ObseityClassA_total_yr2_count40_49_comorbidity = [];
                const ObseityClassA_total_yr2_count50_59_comorbidity = [];
                const ObseityClassA_total_yr2_count60_64_comorbidity = [];

                const ObseityClassA_total_yr3_count18_29_comorbidity = [];
                const ObseityClassA_total_yr3_count30_39_comorbidity = [];
                const ObseityClassA_total_yr3_count40_49_comorbidity = [];
                const ObseityClassA_total_yr3_count50_59_comorbidity = [];
                const ObseityClassA_total_yr3_count60_64_comorbidity = [];

                const ObseityClassA_total_yr4_count18_29_comorbidity = [];
                const ObseityClassA_total_yr4_count30_39_comorbidity = [];
                const ObseityClassA_total_yr4_count40_49_comorbidity = [];
                const ObseityClassA_total_yr4_count50_59_comorbidity = [];
                const ObseityClassA_total_yr4_count60_64_comorbidity = [];

                const ObseityClassA_total_yr5_count18_29_comorbidity = [];
                const ObseityClassA_total_yr5_count30_39_comorbidity = [];
                const ObseityClassA_total_yr5_count40_49_comorbidity = [];
                const ObseityClassA_total_yr5_count50_59_comorbidity = [];
                const ObseityClassA_total_yr5_count60_64_comorbidity = [];

                const ObseityClassA_total_yr6_count18_29_comorbidity = [];
                const ObseityClassA_total_yr6_count30_39_comorbidity = [];
                const ObseityClassA_total_yr6_count40_49_comorbidity = [];
                const ObseityClassA_total_yr6_count50_59_comorbidity = [];
                const ObseityClassA_total_yr6_count60_64_comorbidity = [];

                const ObseityClassA_total_yr7_count18_29_comorbidity = [];
                const ObseityClassA_total_yr7_count30_39_comorbidity = [];
                const ObseityClassA_total_yr7_count40_49_comorbidity = [];
                const ObseityClassA_total_yr7_count50_59_comorbidity = [];
                const ObseityClassA_total_yr7_count60_64_comorbidity = [];

                const ObseityClassA_total_yr8_count18_29_comorbidity = [];
                const ObseityClassA_total_yr8_count30_39_comorbidity = [];
                const ObseityClassA_total_yr8_count40_49_comorbidity = [];
                const ObseityClassA_total_yr8_count50_59_comorbidity = [];
                const ObseityClassA_total_yr8_count60_64_comorbidity = [];

                const ObseityClassA_total_yr9_count18_29_comorbidity = [];
                const ObseityClassA_total_yr9_count30_39_comorbidity = [];
                const ObseityClassA_total_yr9_count40_49_comorbidity = [];
                const ObseityClassA_total_yr9_count50_59_comorbidity = [];
                const ObseityClassA_total_yr9_count60_64_comorbidity = [];

                const ObseityClassA_total_yr10_count18_29_comorbidity = [];
                const ObseityClassA_total_yr10_count30_39_comorbidity = [];
                const ObseityClassA_total_yr10_count40_49_comorbidity = [];
                const ObseityClassA_total_yr10_count50_59_comorbidity = [];
                const ObseityClassA_total_yr10_count60_64_comorbidity = [];




                var returnAgeBaseline = 0;
                var myBaseline = 0;

                function showAgeBaseline(myAge) {
                    // for (var val of AgePercentage.data) {

                    //     //        var myTempAge = JSON.stringify('val.Age'+myAge);
                    //     //        var myBaseline = myTempAge;

                    //     //        var myNamePlate = JSON.parse(JSON.stringify({
                    //     //            myBaseline: 'val.Age'+myAge
                    //     //        }));

                    //     //        var myNamePlate = 'val.Age'+myAge;
                    //     //        myBaseline = JSON.parse(myNamePlate);
                    //     //        return myBaseline;

                    // }
                    // //    return myBaseline;
                    // //console.log('myAge: '+myAge);
                    // switch (myAge) {
                    //     case 18:
                    //         myBaseline = val.Age18;
                    //         console.log('val.Age18', val.Age18)
                    //         break;
                    //     case 19:
                    //         myBaseline = val.Age19;
                    //         break;
                    //     case 20:
                    //         myBaseline = val.Age20;
                    //         break;
                    //     case 21:
                    //         myBaseline = val.Age21;
                    //         break;
                    //     case 22:
                    //         myBaseline = val.Age22;
                    //         break;
                    //     case 23:
                    //         myBaseline = val.Age23;
                    //         break;
                    //     case 24:
                    //         myBaseline = val.Age24;
                    //         break;
                    //     case 25:
                    //         myBaseline = val.Age25;
                    //         break;
                    //     case 26:
                    //         myBaseline = val.Age26;
                    //         break;
                    //     case 27:
                    //         myBaseline = val.Age27;
                    //         break;
                    //     case 28:
                    //         myBaseline = val.Age28;
                    //         break;
                    //     case 29:
                    //         myBaseline = val.Age29;
                    //         break;
                    //     case 30:
                    //         myBaseline = val.Age30;
                    //         break;
                    //     case 31:
                    //         myBaseline = val.Age31;
                    //         break;
                    //     case 32:
                    //         myBaseline = val.Age32;
                    //         break;
                    //     case 33:
                    //         myBaseline = val.Age33;
                    //         break;
                    //     case 34:
                    //         myBaseline = val.Age34;
                    //         break;
                    //     case 35:
                    //         myBaseline = val.Age35;
                    //         break;
                    //     case 36:
                    //         myBaseline = val.Age36;
                    //         break;
                    //     case 37:
                    //         myBaseline = val.Age37;
                    //         break;
                    //     case 38:
                    //         myBaseline = val.Age38;
                    //         break;
                    //     case 39:
                    //         myBaseline = val.Age39;
                    //         break;
                    //     case 40:
                    //         myBaseline = val.Age40;
                    //         break;
                    //     case 41:
                    //         myBaseline = val.Age41;
                    //         break;
                    //     case 42:
                    //         myBaseline = val.Age42;
                    //         break;
                    //     case 43:
                    //         myBaseline = val.Age43;
                    //         break;
                    //     case 44:
                    //         myBaseline = val.Age44;
                    //         break;
                    //     case 45:
                    //         myBaseline = val.Age45;
                    //         break;
                    //     case 46:
                    //         myBaseline = val.Age46;
                    //         break;
                    //     case 47:
                    //         myBaseline = val.Age47;
                    //         break;
                    //     case 48:
                    //         myBaseline = val.Age48;
                    //         break;
                    //     case 49:
                    //         myBaseline = val.Age49;
                    //         break;
                    //     case 50:
                    //         myBaseline = val.Age50;
                    //         break;
                    //     case 51:
                    //         myBaseline = val.Age51;
                    //         break;
                    //     case 52:
                    //         myBaseline = val.Age52;
                    //         break;
                    //     case 53:
                    //         myBaseline = val.Age53;
                    //         break;
                    //     case 54:
                    //         myBaseline = val.Age54;
                    //         break;
                    //     case 55:
                    //         myBaseline = val.Age55;
                    //         break;
                    //     case 56:
                    //         myBaseline = val.Age56;
                    //         break;
                    //     case 57:
                    //         myBaseline = val.Age57;
                    //         break;
                    //     case 58:
                    //         myBaseline = val.Age58;
                    //         break;
                    //     case 59:
                    //         myBaseline = val.Age59;
                    //         break;
                    //     case 60:
                    //         myBaseline = val.Age60;
                    //         break;
                    //     case 61:
                    //         myBaseline = val.Age61;
                    //         break;
                    //     case 62:
                    //         myBaseline = val.Age62;
                    //         break;
                    //     case 63:
                    //         myBaseline = val.Age63;
                    //         break;
                    //     case 64:
                    //         myBaseline = val.Age64;
                    //         break;
                    //     default:
                    // }

                    myBaseline = AgePercentage.data[0][`Age${myAge}`]
                    return myBaseline;

                }







                function showIndustryAgeDistribution() {



                    ((window, document) => {
                        "use strict";

                        // use for-of (ES2015+) to iterate over the first dimesion of 
                        // our native JS object (data.applicants).
                        for (let val of industry_age_distribution_data.industry_age_distribution) {

                            if (inputDashboard.selectIndustry) {
                                var mySelectedIndustry = inputDashboard.selectIndustry.value;
                            } else {
                                var mySelectedIndustry = "Total_employed";
                            }



                            if (industry_age_distribution_data.industry_age_distribution.find(element => val.Industry === mySelectedIndustry)) {
                                //      console.log('Industry: ' + val.Industry + ', Age Group: ' + val.years_16_to_19);

                            }
                        }
                        // create an intermediate array to hold the text strings
                        let txtArr18_29 = [];
                        let txtArr30_39 = [];
                        let txtArr40_49 = [];
                        let txtArr50_59 = [];
                        let txtArr60_64 = [];
                        let txtArrWomen = [];
                        let txtArrMen = [];

                        for (let val of industry_age_distribution_data.industry_age_distribution) {
                            // push the text into the array
                            if (industry_age_distribution_data.industry_age_distribution.find(element => val.Industry === "Total_employed_2018_Years_in_category")) {
                                var myTotalEmployed2018_16_19 = val.years_16_to_19;
                                var myTotalEmployed2018_20_24 = val.years_20_to_24;
                                var myTotalEmployed2018_25_34 = val.years_25_to_34;
                                var myTotalEmployed2018_35_44 = val.years_35_to_44;
                                var myTotalEmployed2018_45_54 = val.years_45_to_54;
                                var myTotalEmployed2018_55_64 = val.years_55_to_64;
                            }

                            if (industry_age_distribution_data.industry_age_distribution.find(element => val.Industry === "Total_employed_distributed_into_model_age_Years_in_category")) {
                                var mydistributedIntoModelAge_16_17 = val.years_16_to_17;
                                var mydistributedIntoModelAge_18_29 = val.years_18_to_29;
                                var mydistributedIntoModelAge_30_39 = val.years_30_to_39;
                                var mydistributedIntoModelAge_40_49 = val.years_40_to_49;
                                var mydistributedIntoModelAge_50_59 = val.years_50_to_59;
                                var mydistributedIntoModelAge_60_64 = val.years_60_to_64;
                            }


                            //console.log(inputDashboard.selectIndustry.value);

                            if (industry_age_distribution_data.industry_age_distribution.find(element => val.Industry === mySelectedIndustry)) {

                                //        txtArr.push('Industry: ' + val.Industry + ', Age Group: ' + ((((2*(val.years_16_to_19/myTotalEmployed2018_16_19)) + (5*(val.years_20_to_24/myTotalEmployed2018_20_24)) + (5*(val.years_25_to_34/myTotalEmployed2018_25_34))) / (((val.years_16_to_19)*1 + (val.years_20_to_24)*1 + (val.years_25_to_34)*1 + (val.years_35_to_44)*1 + (val.years_45_to_54)*1 + (val.years_55_to_64)*1) - ((val.years_16_to_19/myTotalEmployed2018_16_19)* mydistributedIntoModelAge_16_17)))*100).toFixed(2) + '%' );

                                //        var myAges18To29 = ( ((((2*(val.years_16_to_19/myTotalEmployed2018_16_19)) + (5*(val.years_20_to_24/myTotalEmployed2018_20_24)) + (5*(val.years_25_to_34/myTotalEmployed2018_25_34))) / (((val.years_16_to_19)*1 + (val.years_20_to_24)*1 + (val.years_25_to_34)*1 + (val.years_35_to_44)*1 + (val.years_45_to_54)*1 + (val.years_55_to_64)*1) - ((val.years_16_to_19/myTotalEmployed2018_16_19)* mydistributedIntoModelAge_16_17)))*100).toFixed(2));
                                //        txtArr18_29.push(myAges18To29 + '%');

                                //        var myAges30To39 = ( ((((5*(val.years_25_to_34/myTotalEmployed2018_25_34)) + (5*(val.years_35_to_44/myTotalEmployed2018_35_44))) / (((val.years_16_to_19)*1 + (val.years_20_to_24)*1 + (val.years_25_to_34)*1 + (val.years_35_to_44)*1 + (val.years_45_to_54)*1 + (val.years_55_to_64)*1) - ((val.years_16_to_19/myTotalEmployed2018_16_19)* mydistributedIntoModelAge_16_17)))*100).toFixed(2));
                                //        txtArr30_39.push(myAges30To39 + '%' );

                                //        var myAges40To49 = ( ((((5*(val.years_35_to_44/myTotalEmployed2018_35_44)) + (5*(val.years_45_to_54/myTotalEmployed2018_45_54))) / (((val.years_16_to_19)*1 + (val.years_20_to_24)*1 + (val.years_25_to_34)*1 + (val.years_35_to_44)*1 + (val.years_45_to_54)*1 + (val.years_55_to_64)*1) - ((val.years_16_to_19/myTotalEmployed2018_16_19)* mydistributedIntoModelAge_16_17)))*100).toFixed(2));
                                //        txtArr40_49.push(myAges40To49 + '%' );

                                //        var myAges50To59 = ( ((((5*(val.years_45_to_54/myTotalEmployed2018_45_54)) + (5*(val.years_55_to_64/myTotalEmployed2018_55_64))) / (((val.years_16_to_19)*1 + (val.years_20_to_24)*1 + (val.years_25_to_34)*1 + (val.years_35_to_44)*1 + (val.years_45_to_54)*1 + (val.years_55_to_64)*1) - ((val.years_16_to_19/myTotalEmployed2018_16_19)* mydistributedIntoModelAge_16_17)))*100).toFixed(2));
                                //        txtArr50_59.push(myAges50To59 + '%' );

                                //        var myAges60To64 = ( ((((5*(val.years_55_to_64/myTotalEmployed2018_55_64))) / (((val.years_16_to_19)*1 + (val.years_20_to_24)*1 + (val.years_25_to_34)*1 + (val.years_35_to_44)*1 + (val.years_45_to_54)*1 + (val.years_55_to_64)*1) - ((val.years_16_to_19/myTotalEmployed2018_16_19)* mydistributedIntoModelAge_16_17)))*100).toFixed(2));
                                //        txtArr60_64.push(myAges60To64 + '%' );


                                myAges18To29 = (((((2 * (val.years_16_to_19 / myTotalEmployed2018_16_19)) + (5 * (val.years_20_to_24 / myTotalEmployed2018_20_24)) + (5 * (val.years_25_to_34 / myTotalEmployed2018_25_34))) / (((val.years_16_to_19) * 1 + (val.years_20_to_24) * 1 + (val.years_25_to_34) * 1 + (val.years_35_to_44) * 1 + (val.years_45_to_54) * 1 + (val.years_55_to_64) * 1) - ((val.years_16_to_19 / myTotalEmployed2018_16_19) * mydistributedIntoModelAge_16_17))) * 100));

                                myParams.myAges18To29 = myAges18To29;

                                var fixedAges18To29 = myAges18To29.toFixed(2);

                                txtArr18_29.push(fixedAges18To29 + '%');

                                myAges30To39 = (((((5 * (val.years_25_to_34 / myTotalEmployed2018_25_34)) + (5 * (val.years_35_to_44 / myTotalEmployed2018_35_44))) / (((val.years_16_to_19) * 1 + (val.years_20_to_24) * 1 + (val.years_25_to_34) * 1 + (val.years_35_to_44) * 1 + (val.years_45_to_54) * 1 + (val.years_55_to_64) * 1) - ((val.years_16_to_19 / myTotalEmployed2018_16_19) * mydistributedIntoModelAge_16_17))) * 100));

                                myParams.myAges30To39 = myAges30To39;
                                // console.log('myAges30To39-2',myAges30To39)
                                var fixedAges30To39 = myAges30To39.toFixed(2);

                                txtArr30_39.push(fixedAges30To39 + '%');

                                myAges40To49 = (((((5 * (val.years_35_to_44 / myTotalEmployed2018_35_44)) + (5 * (val.years_45_to_54 / myTotalEmployed2018_45_54))) / (((val.years_16_to_19) * 1 + (val.years_20_to_24) * 1 + (val.years_25_to_34) * 1 + (val.years_35_to_44) * 1 + (val.years_45_to_54) * 1 + (val.years_55_to_64) * 1) - ((val.years_16_to_19 / myTotalEmployed2018_16_19) * mydistributedIntoModelAge_16_17))) * 100));
                                myParams.myAges40To49 = myAges40To49;

                                var fixedAges40To49 = myAges40To49.toFixed(2);

                                txtArr40_49.push(fixedAges40To49 + '%');

                                myAges50To59 = (((((5 * (val.years_45_to_54 / myTotalEmployed2018_45_54)) + (5 * (val.years_55_to_64 / myTotalEmployed2018_55_64))) / (((val.years_16_to_19) * 1 + (val.years_20_to_24) * 1 + (val.years_25_to_34) * 1 + (val.years_35_to_44) * 1 + (val.years_45_to_54) * 1 + (val.years_55_to_64) * 1) - ((val.years_16_to_19 / myTotalEmployed2018_16_19) * mydistributedIntoModelAge_16_17))) * 100));
                                myParams.myAges50To59 = myAges50To59;

                                var fixedAges50To59 = myAges50To59.toFixed(2);

                                txtArr50_59.push(fixedAges50To59 + '%');

                                myAges60To64 = (((((5 * (val.years_55_to_64 / myTotalEmployed2018_55_64))) / (((val.years_16_to_19) * 1 + (val.years_20_to_24) * 1 + (val.years_25_to_34) * 1 + (val.years_35_to_44) * 1 + (val.years_45_to_54) * 1 + (val.years_55_to_64) * 1) - ((val.years_16_to_19 / myTotalEmployed2018_16_19) * mydistributedIntoModelAge_16_17))) * 100));
                                myParams.myAges60To64 = myAges60To64;

                                var fixedAges60To64 = myAges60To64.toFixed(2);

                                txtArr60_64.push(fixedAges60To64 + '%');

                    //             console.log('myAges18To29-12',myAges18To29)
                    // console.log('myAges30To39-12',myAges30To39)
                    // console.log('myAges40To49-12',myAges40To49)
                    // console.log('myAges50To59-12',myAges50To59)
                    // console.log('myAges60To64-12',myAges60To64)

                                localStorage.setItem('showAges18To29', myAges18To29);
                                localStorage.setItem('showAges30To39', myAges30To39);
                                localStorage.setItem('showAges40To49', myAges40To49);
                                localStorage.setItem('showAges50To59', myAges50To59);
                                localStorage.setItem('showAges60To64', myAges60To64);

                                // console.log(  ((val.years_16_to_19)*1 + (val.years_20_to_24)*1 + (val.years_25_to_34)*1 + (val.years_35_to_44)*1 + (val.years_45_to_54)*1 + (val.years_55_to_64)*1)  )
                                //         console.log('txtArr ==> ', txtArr);
                            }
                        }

                        // console.log('what is the industry? ', mySelectedIndustry);

                        for (let val of industry_sex_distribution_data.industry_sex_distribution) {

                            if (industry_sex_distribution_data.industry_sex_distribution.find(element => val.Industry === mySelectedIndustry)) {

                                //        txtArr.push('Industry: ' + val.Industry + ', Age Group: ' + ((((2*(val.years_16_to_19/myTotalEmployed2018_16_19)) + (5*(val.years_20_to_24/myTotalEmployed2018_20_24)) + (5*(val.years_25_to_34/myTotalEmployed2018_25_34))) / (((val.years_16_to_19)*1 + (val.years_20_to_24)*1 + (val.years_25_to_34)*1 + (val.years_35_to_44)*1 + (val.years_45_to_54)*1 + (val.years_55_to_64)*1) - ((val.years_16_to_19/myTotalEmployed2018_16_19)* mydistributedIntoModelAge_16_17)))*100).toFixed(2) + '%' );

                                myGenderWomen = (((val.Women) * 1).toFixed(2));
                                txtArrWomen.push(myGenderWomen + '%');
                                myParams.myGenderWomen = myGenderWomen;

                                myGenderMen = ((100 - ((val.Women) * 1)).toFixed(2));
                                txtArrMen.push(myGenderMen + '%');
                                myParams.myGenderMen = myGenderMen;

                                localStorage.setItem('showWomen', myGenderWomen);
                                localStorage.setItem('showMen', myGenderMen);

                                var testingWomen = localStorage.getItem('showWomen');
                                var testingMen = localStorage.getItem('showMen');



                                // console.log('showWomen: ', testingWomen);
                                // console.log('showMen: ', testingMen);



                                // console.log(  ((val.years_16_to_19)*1 + (val.years_20_to_24)*1 + (val.years_25_to_34)*1 + (val.years_35_to_44)*1 + (val.years_45_to_54)*1 + (val.years_55_to_64)*1)  )
                                //         console.log('txtArr ==> ', txtArr);
                            }
                        }






                        // join the array with <br /> tags as separators
                        //  let txt = txtArr.join('<br>');
                        let txt18_29 = txtArr18_29;
                        let txt30_39 = txtArr30_39;
                        let txt40_49 = txtArr40_49;
                        let txt50_59 = txtArr50_59;
                        let txt60_64 = txtArr60_64;
                        let txtWomen = txtArrWomen;
                        let txtMen = txtArrMen;
                        //  console.log('txt ==> ', txt);

                        //  if ((myIndustry) == inputDashboard.selectIndustry.value) {
                        //    alert(myIndustry);

                        // document.getElementById("ages_18_to_29_display").innerHTML = '<input type="text" name="ages18To29Display" value="'+txt18_29+'"size="6"></input>';
                        // document.getElementById("ages_30_to_39_display").innerHTML = '<input type="text" name="ages30To39Display" value="'+txt30_39+'"size="6"></input>';
                        // document.getElementById("ages_40_to_49_display").innerHTML = '<input type="text" name="ages40To49Display" value="'+txt40_49+'"size="6"></input>';
                        // document.getElementById("ages_50_to_59_display").innerHTML = '<input type="text" name="ages50To59Display" value="'+txt50_59+'"size="6"></input>';
                        // document.getElementById("ages_60_to_64_display").innerHTML = '<input type="text" name="ages60To64Display" value="'+txt60_64+'"size="6"></input>';
                        // document.getElementById("Women_display").innerHTML = '<input type="text" name="womenDisplay" value="'+txtWomen+'"size="6"></input>';
                        // document.getElementById("Men_display").innerHTML = '<input type="text" name="menDisplay" value="'+txtMen+'"size="6"></input>';
                        //  }

                        // write to DOM target
                        // document.getElementById('demo').innerHTML(txt);


                    })(window, document);

                    // document.getElementById("demo").innerHTML = 'hello ' + myObject[0].applicant.name + " it looks like you're " + myObject[0].applicant.age + " years old!";
                }



                showIndustryAgeDistribution();

                function showPrevalence(myParams, myPOIValue, myObesityClass) {
                    
                    // console.log('myAges18To29-13',myAges18To29)
                    // console.log('myAges30To39-13',myAges30To39)
                    // console.log('myAges40To49-13',myAges40To49)
                    // console.log('myAges50To59-13',myAges50To59)
                    // console.log('myAges60To64-13',myAges60To64)

                    // myAges18To29 = myParams.myAges18To29;
                    // myAges30To39 = myParams.myAges30To39;
                    // myAges40To49 = myParams.myAges40To49;
                    // myAges50To59 = myParams.myAges50To59;
                    // myAges60To64 = myParams.myAges60To64;
                    // console.log('myAges18To29-11',myAges18To29)
                    // console.log('myAges30To39-11',myAges30To39)
                    // console.log('myAges40To49-11',myAges40To49)
                    // console.log('myAges50To59-11',myAges50To59)
                    // console.log('myAges60To64-11',myAges60To64)

                    for (let val of Prevalence.data) {
                        if ((val.Comorbidity == "People with obesity") || (val.Comorbidity == "People with overweight/ obesity")) {
                            age18_29_comorbidity[1] = val.Age18_29;
                            age30_39_comorbidity[1] = val.Age30_39;
                            age40_49_comorbidity[1] = val.Age40_49;
                            age50_59_comorbidity[1] = val.Age50_59;
                            age60_64_comorbidity[1] = val.Age60_64;
                            Prevalence18_29_comorbidity[1] = myAges18To29 * 100 * age18_29_comorbidity[1];
                            Prevalence30_39_comorbidity[1] = myAges30To39 * 100 * age30_39_comorbidity[1];
                            Prevalence40_49_comorbidity[1] = myAges40To49 * 100 * age40_49_comorbidity[1];
                            Prevalence50_59_comorbidity[1] = myAges50To59 * 100 * age50_59_comorbidity[1];
                            Prevalence60_64_comorbidity[1] = myAges60To64 * 100 * age60_64_comorbidity[1];
                        }

                        if (val.Comorbidity == "Cardiovascular diseases") {
                            age18_29_comorbidity[2] = val.Age18_29;
                            age30_39_comorbidity[2] = val.Age30_39;
                            age40_49_comorbidity[2] = val.Age40_49;
                            age50_59_comorbidity[2] = val.Age50_59;
                            age60_64_comorbidity[2] = val.Age60_64;
                            Prevalence18_29_comorbidity[2] = myAges18To29 * 100 * age18_29_comorbidity[2];
                            Prevalence30_39_comorbidity[2] = myAges30To39 * 100 * age30_39_comorbidity[2];
                            Prevalence40_49_comorbidity[2] = myAges40To49 * 100 * age40_49_comorbidity[2];
                            Prevalence50_59_comorbidity[2] = myAges50To59 * 100 * age50_59_comorbidity[2];
                            Prevalence60_64_comorbidity[2] = myAges60To64 * 100 * age60_64_comorbidity[2];
                        }
                        if (val.Comorbidity == "Cerebrovascular diseases") {
                            age18_29_comorbidity[3] = val.Age18_29;
                            age30_39_comorbidity[3] = val.Age30_39;
                            age40_49_comorbidity[3] = val.Age40_49;
                            age50_59_comorbidity[3] = val.Age50_59;
                            age60_64_comorbidity[3] = val.Age60_64;
                            Prevalence18_29_comorbidity[3] = myAges18To29 * 100 * age18_29_comorbidity[3];
                            Prevalence30_39_comorbidity[3] = myAges30To39 * 100 * age30_39_comorbidity[3];
                            Prevalence40_49_comorbidity[3] = myAges40To49 * 100 * age40_49_comorbidity[3];
                            Prevalence50_59_comorbidity[3] = myAges50To59 * 100 * age50_59_comorbidity[3];
                            Prevalence60_64_comorbidity[3] = myAges60To64 * 100 * age60_64_comorbidity[3];
                        }
                        if (val.Comorbidity == "Dyslipidemia") {
                            age18_29_comorbidity[4] = val.Age18_29;
                            age30_39_comorbidity[4] = val.Age30_39;
                            age40_49_comorbidity[4] = val.Age40_49;
                            age50_59_comorbidity[4] = val.Age50_59;
                            age60_64_comorbidity[4] = val.Age60_64;
                            Prevalence18_29_comorbidity[4] = myAges18To29 * 100 * age18_29_comorbidity[4];
                            Prevalence30_39_comorbidity[4] = myAges30To39 * 100 * age30_39_comorbidity[4];
                            Prevalence40_49_comorbidity[4] = myAges40To49 * 100 * age40_49_comorbidity[4];
                            Prevalence50_59_comorbidity[4] = myAges50To59 * 100 * age50_59_comorbidity[4];
                            Prevalence60_64_comorbidity[4] = myAges60To64 * 100 * age60_64_comorbidity[4];
                        }
                        if (val.Comorbidity == "Hypertension") {
                            age18_29_comorbidity[5] = val.Age18_29;
                            age30_39_comorbidity[5] = val.Age30_39;
                            age40_49_comorbidity[5] = val.Age40_49;
                            age50_59_comorbidity[5] = val.Age50_59;
                            age60_64_comorbidity[5] = val.Age60_64;
                            Prevalence18_29_comorbidity[5] = myAges18To29 * 100 * age18_29_comorbidity[5];
                            Prevalence30_39_comorbidity[5] = myAges30To39 * 100 * age30_39_comorbidity[5];
                            Prevalence40_49_comorbidity[5] = myAges40To49 * 100 * age40_49_comorbidity[5];
                            Prevalence50_59_comorbidity[5] = myAges50To59 * 100 * age50_59_comorbidity[5];
                            Prevalence60_64_comorbidity[5] = myAges60To64 * 100 * age60_64_comorbidity[5];
                        }
                        if (val.Comorbidity == "Osteoarthritis") {
                            age18_29_comorbidity[6] = val.Age18_29;
                            age30_39_comorbidity[6] = val.Age30_39;
                            age40_49_comorbidity[6] = val.Age40_49;
                            age50_59_comorbidity[6] = val.Age50_59;
                            age60_64_comorbidity[6] = val.Age60_64;
                            Prevalence18_29_comorbidity[6] = myAges18To29 * 100 * age18_29_comorbidity[6];
                            Prevalence30_39_comorbidity[6] = myAges30To39 * 100 * age30_39_comorbidity[6];
                            Prevalence40_49_comorbidity[6] = myAges40To49 * 100 * age40_49_comorbidity[6];
                            Prevalence50_59_comorbidity[6] = myAges50To59 * 100 * age50_59_comorbidity[6];
                            Prevalence60_64_comorbidity[6] = myAges60To64 * 100 * age60_64_comorbidity[6];
                        }
                        if (val.Comorbidity == "Diabetes") {
                            age18_29_comorbidity[7] = val.Age18_29;
                            age30_39_comorbidity[7] = val.Age30_39;
                            age40_49_comorbidity[7] = val.Age40_49;
                            age50_59_comorbidity[7] = val.Age50_59;
                            age60_64_comorbidity[7] = val.Age60_64;
                            Prevalence18_29_comorbidity[7] = myAges18To29 * 100 * age18_29_comorbidity[7];
                            Prevalence30_39_comorbidity[7] = myAges30To39 * 100 * age30_39_comorbidity[7];
                            Prevalence40_49_comorbidity[7] = myAges40To49 * 100 * age40_49_comorbidity[7];
                            Prevalence50_59_comorbidity[7] = myAges50To59 * 100 * age50_59_comorbidity[7];
                            Prevalence60_64_comorbidity[7] = myAges60To64 * 100 * age60_64_comorbidity[7];
                        }
                        if (val.Comorbidity == "Cardiovascular diseases (with cerebrovascular diseases)") {
                            age18_29_comorbidity[8] = val.Age18_29;
                            age30_39_comorbidity[8] = val.Age30_39;
                            age40_49_comorbidity[8] = val.Age40_49;
                            age50_59_comorbidity[8] = val.Age50_59;
                            age60_64_comorbidity[8] = val.Age60_64;
                            Prevalence18_29_comorbidity[8] = myAges18To29 * 100 * age18_29_comorbidity[8];
                            Prevalence30_39_comorbidity[8] = myAges30To39 * 100 * age30_39_comorbidity[8];
                            Prevalence40_49_comorbidity[8] = myAges40To49 * 100 * age40_49_comorbidity[8];
                            Prevalence50_59_comorbidity[8] = myAges50To59 * 100 * age50_59_comorbidity[8];
                            Prevalence60_64_comorbidity[8] = myAges60To64 * 100 * age60_64_comorbidity[8];
                        }
                        if (val.Comorbidity == "Any cardiometabolic disease*") {
                            age18_29_comorbidity[9] = val.Age18_29;
                            age30_39_comorbidity[9] = val.Age30_39;
                            age40_49_comorbidity[9] = val.Age40_49;
                            age50_59_comorbidity[9] = val.Age50_59;
                            age60_64_comorbidity[9] = val.Age60_64;
                            Prevalence18_29_comorbidity[9] = myAges18To29 * 100 * age18_29_comorbidity[9];
                            Prevalence30_39_comorbidity[9] = myAges30To39 * 100 * age30_39_comorbidity[9];
                            Prevalence40_49_comorbidity[9] = myAges40To49 * 100 * age40_49_comorbidity[9];
                            Prevalence50_59_comorbidity[9] = myAges50To59 * 100 * age50_59_comorbidity[9];
                            Prevalence60_64_comorbidity[9] = myAges60To64 * 100 * age60_64_comorbidity[9];
                        }
                        if (val.Comorbidity == "Cardiovascular diseases (with dyslipidemia)") {
                            age18_29_comorbidity[10] = val.Age18_29;
                            age30_39_comorbidity[10] = val.Age30_39;
                            age40_49_comorbidity[10] = val.Age40_49;
                            age50_59_comorbidity[10] = val.Age50_59;
                            age60_64_comorbidity[10] = val.Age60_64;
                            Prevalence18_29_comorbidity[10] = myAges18To29 * 100 * age18_29_comorbidity[10];
                            Prevalence30_39_comorbidity[10] = myAges30To39 * 100 * age30_39_comorbidity[10];
                            Prevalence40_49_comorbidity[10] = myAges40To49 * 100 * age40_49_comorbidity[10];
                            Prevalence50_59_comorbidity[10] = myAges50To59 * 100 * age50_59_comorbidity[10];
                            Prevalence60_64_comorbidity[10] = myAges60To64 * 100 * age60_64_comorbidity[10];
                        }
                        if (val.Comorbidity == "Cardiovascular diseases (with hypertension)") {
                            age18_29_comorbidity[11] = val.Age18_29;
                            age30_39_comorbidity[11] = val.Age30_39;
                            age40_49_comorbidity[11] = val.Age40_49;
                            age50_59_comorbidity[11] = val.Age50_59;
                            age60_64_comorbidity[11] = val.Age60_64;
                            Prevalence18_29_comorbidity[11] = myAges18To29 * 100 * age18_29_comorbidity[11];
                            Prevalence30_39_comorbidity[11] = myAges30To39 * 100 * age30_39_comorbidity[11];
                            Prevalence40_49_comorbidity[11] = myAges40To49 * 100 * age40_49_comorbidity[11];
                            Prevalence50_59_comorbidity[11] = myAges50To59 * 100 * age50_59_comorbidity[11];
                            Prevalence60_64_comorbidity[11] = myAges60To64 * 100 * age60_64_comorbidity[11];
                        }
                        if (val.Comorbidity == "Cardiovascular diseases (with diabetes)") {
                            age18_29_comorbidity[12] = val.Age18_29;
                            age30_39_comorbidity[12] = val.Age30_39;
                            age40_49_comorbidity[12] = val.Age40_49;
                            age50_59_comorbidity[12] = val.Age50_59;
                            age60_64_comorbidity[12] = val.Age60_64;
                            Prevalence18_29_comorbidity[12] = myAges18To29 * 100 * age18_29_comorbidity[12];
                            Prevalence30_39_comorbidity[12] = myAges30To39 * 100 * age30_39_comorbidity[12];
                            Prevalence40_49_comorbidity[12] = myAges40To49 * 100 * age40_49_comorbidity[12];
                            Prevalence50_59_comorbidity[12] = myAges50To59 * 100 * age50_59_comorbidity[12];
                            Prevalence60_64_comorbidity[12] = myAges60To64 * 100 * age60_64_comorbidity[12];
                        }
                        if (val.Comorbidity == "Osteoarthritis (with cardiovascular diseases)") {
                            age18_29_comorbidity[13] = val.Age18_29;
                            age30_39_comorbidity[13] = val.Age30_39;
                            age40_49_comorbidity[13] = val.Age40_49;
                            age50_59_comorbidity[13] = val.Age50_59;
                            age60_64_comorbidity[13] = val.Age60_64;
                            Prevalence18_29_comorbidity[13] = myAges18To29 * 100 * age18_29_comorbidity[13];
                            Prevalence30_39_comorbidity[13] = myAges30To39 * 100 * age30_39_comorbidity[13];
                            Prevalence40_49_comorbidity[13] = myAges40To49 * 100 * age40_49_comorbidity[13];
                            Prevalence50_59_comorbidity[13] = myAges50To59 * 100 * age50_59_comorbidity[13];
                            Prevalence60_64_comorbidity[13] = myAges60To64 * 100 * age60_64_comorbidity[13];
                        }
                        if (val.Comorbidity == "Osteoarthritis (with diabetes)") {
                            age18_29_comorbidity[14] = val.Age18_29;
                            age30_39_comorbidity[14] = val.Age30_39;
                            age40_49_comorbidity[14] = val.Age40_49;
                            age50_59_comorbidity[14] = val.Age50_59;
                            age60_64_comorbidity[14] = val.Age60_64;
                            Prevalence18_29_comorbidity[14] = myAges18To29 * 100 * age18_29_comorbidity[14];
                            Prevalence30_39_comorbidity[14] = myAges30To39 * 100 * age30_39_comorbidity[14];
                            Prevalence40_49_comorbidity[14] = myAges40To49 * 100 * age40_49_comorbidity[14];
                            Prevalence50_59_comorbidity[14] = myAges50To59 * 100 * age50_59_comorbidity[14];
                            Prevalence60_64_comorbidity[14] = myAges60To64 * 100 * age60_64_comorbidity[14];


                        }

                    }

                    // if (inputDashboard.Obesity_Class) {
                    //     var myObesityClass = inputDashboard.Obesity_Class.value;
                    // } else {
                    //     var myObesityClass = "Overweight and obesity (I, II, and III)";
                    // }


                    // if (inputDashboard.POI1) {
                        // var myPOIValue = inputDashboard.POI1.value;
                        // if ((myPOIValue === "People with overweight/ obesity") || (myPOIValue === "People with obesity")) {
                        //     if (myObesityClass === "Overweight and obesity (I, II, and III)") {
                        //         var myPOIValue = "People with overweight/ obesity";
                        //     } else {
                        //         var myPOIValue = "People with obesity";
                        //     }
                        // } else {
                        //     var myPOIValue = inputDashboard.POI1.value;
                        // }
                    // } else {
                    //     if (myObesityClass === "Overweight and obesity (I, II, and III)") {
                    //         var myPOIValue = "People with overweight/ obesity";
                    //     } else {
                    //         var myPOIValue = "People with obesity";
                    //     }
                    // }

                    // !Replacing refs to inputDashboard

                    if ((myPOIValue === "People with overweight/ obesity") || (myPOIValue === "People with obesity")) {
                            if (myObesityClass === "Overweight and obesity (I, II, and III)") {
                                myPOIValue = "People with overweight/ obesity";
                            } else {
                                myPOIValue = "People with obesity";
                            }
                        }
                    
                    var showPOIIndex;

                    switch (myPOIValue) {
                        case "People with overweight/ obesity":
                        case "People with obesity":
                            showPOIIndex = 1;
                            break;
                        case "Cardiovascular diseases":
                            showPOIIndex = 2;
                            break;
                        case "Cerebrovascular diseases":
                            showPOIIndex = 3;
                            break;
                        case "Dyslipidemia":
                            showPOIIndex = 4;
                            break;
                        case "Hypertension":
                            showPOIIndex = 5;
                            break;
                        case "Osteoarthritis":
                            showPOIIndex = 6;
                            break;
                        case "Diabetes":
                            showPOIIndex = 7;
                            break;
                        case "Cardiovascular diseases (with cerebrovascular diseases)":
                            showPOIIndex = 8;
                            break;
                        case "Any cardiometabolic disease*":
                            showPOIIndex = 9;
                            break;
                        case "Cardiovascular diseases (with dyslipidemia)":
                            showPOIIndex = 10;
                            break;
                        case "Cardiovascular diseases (with hypertension)":
                            showPOIIndex = 11;
                            break;
                        case "Cardiovascular diseases (with diabetes)":
                            showPOIIndex = 12;
                            break;
                        case "Osteoarthritis (with cardiovascular diseases)":
                            showPOIIndex = 13;
                            break;
                        case "Osteoarthritis (with diabetes)":
                            showPOIIndex = 14;
                            break;
                        default:
                    }
                    var myPrevalence1a = Prevalence18_29_comorbidity[showPOIIndex];
                    var myPrevalence2a = Prevalence30_39_comorbidity[showPOIIndex];
                    var myPrevalence3a = Prevalence40_49_comorbidity[showPOIIndex];
                    var myPrevalence4a = Prevalence50_59_comorbidity[showPOIIndex];
                    var myPrevalence5a = Prevalence60_64_comorbidity[showPOIIndex];


                    // console.log('Prevalence18_29_comorbidity', Prevalence18_29_comorbidity[1])
                    // console.log('Prevalence30_39_comorbidity', Prevalence30_39_comorbidity[1])
                    // console.log('Prevalence40_49_comorbidity', Prevalence40_49_comorbidity[1])
                    // console.log('Prevalence50_59_comorbidity', Prevalence50_59_comorbidity[1])
                    // console.log('Prevalence60_64_comorbidity', Prevalence60_64_comorbidity[1])
                    // console.log('Prevalence18_29_comorbidity[1]',Prevalence18_29_comorbidity[1])

                    return [myPrevalence1a, myPrevalence2a, myPrevalence3a, myPrevalence4a, myPrevalence5a];

                }

                showPrevalence(myParams);
                



                function exportProportions(myPOIValue, myParams) {

                    // console.log('Prevalence18_29_comorbidity[2]',Prevalence18_29_comorbidity[2])
                    // console.log('Prevalence30_39_comorbidity[2]',Prevalence30_39_comorbidity[2])
                    // console.log('Prevalence40_49_comorbidity[2]',Prevalence40_49_comorbidity[2])
                    // console.log('Prevalence50_59_comorbidity[2]',Prevalence50_59_comorbidity[2])
                    // console.log('Prevalence60_64_comorbidity[2]',Prevalence60_64_comorbidity[2])

                    for (k = 1; k <= 14; k++) {
                        // Class A    
                        if (isNaN(ObesityClassA_Total_BL_18_29_comorbidity[k]) || !(ObesityClassA_Total_BL_18_29_comorbidity[k])) {
                            ObesityClassA_Total_BL_18_29_comorbidity[k] = 0;
                        }
                        if (isNaN(ObesityClassA_Total_BL_30_39_comorbidity[k]) || !(ObesityClassA_Total_BL_30_39_comorbidity[k])) {
                            ObesityClassA_Total_BL_30_39_comorbidity[k] = 0;
                        }
                        if (isNaN(ObesityClassA_Total_BL_40_49_comorbidity[k]) || !(ObesityClassA_Total_BL_40_49_comorbidity[k])) {
                            ObesityClassA_Total_BL_40_49_comorbidity[k] = 0;
                        }
                        if (isNaN(ObesityClassA_Total_BL_50_59_comorbidity[k]) || !(ObesityClassA_Total_BL_50_59_comorbidity[k])) {
                            ObesityClassA_Total_BL_50_59_comorbidity[k] = 0;
                        }
                        if (isNaN(ObesityClassA_Total_BL_60_64_comorbidity[k]) || !(ObesityClassA_Total_BL_60_64_comorbidity[k])) {
                            ObesityClassA_Total_BL_60_64_comorbidity[k] = 0;
                        }
                        // Class B
                        if (isNaN(ObesityClassB_Total_BL_18_29_comorbidity[k]) || !(ObesityClassB_Total_BL_18_29_comorbidity[k])) {
                            ObesityClassB_Total_BL_18_29_comorbidity[k] = 0;
                        }
                        if (isNaN(ObesityClassB_Total_BL_30_39_comorbidity[k]) || !(ObesityClassB_Total_BL_30_39_comorbidity[k])) {
                            ObesityClassB_Total_BL_30_39_comorbidity[k] = 0;
                        }
                        if (isNaN(ObesityClassB_Total_BL_40_49_comorbidity[k]) || !(ObesityClassB_Total_BL_40_49_comorbidity[k])) {
                            ObesityClassB_Total_BL_40_49_comorbidity[k] = 0;
                        }
                        if (isNaN(ObesityClassB_Total_BL_50_59_comorbidity[k]) || !(ObesityClassB_Total_BL_50_59_comorbidity[k])) {
                            ObesityClassB_Total_BL_50_59_comorbidity[k] = 0;
                        }
                        if (isNaN(ObesityClassB_Total_BL_60_64_comorbidity[k]) || !(ObesityClassB_Total_BL_60_64_comorbidity[k])) {
                            ObesityClassB_Total_BL_60_64_comorbidity[k] = 0;
                        }
                        // Class C    
                        if (isNaN(ObesityClassC_Total_BL_18_29_comorbidity[k]) || !(ObesityClassC_Total_BL_18_29_comorbidity[k])) {
                            ObesityClassC_Total_BL_18_29_comorbidity[k] = 0;
                        }
                        if (isNaN(ObesityClassC_Total_BL_30_39_comorbidity[k]) || !(ObesityClassC_Total_BL_30_39_comorbidity[k])) {
                            ObesityClassC_Total_BL_30_39_comorbidity[k] = 0;
                        }
                        if (isNaN(ObesityClassC_Total_BL_40_49_comorbidity[k]) || !(ObesityClassC_Total_BL_40_49_comorbidity[k])) {
                            ObesityClassC_Total_BL_40_49_comorbidity[k] = 0;
                        }
                        if (isNaN(ObesityClassC_Total_BL_50_59_comorbidity[k]) || !(ObesityClassC_Total_BL_50_59_comorbidity[k])) {
                            ObesityClassC_Total_BL_50_59_comorbidity[k] = 0;
                        }
                        if (isNaN(ObesityClassC_Total_BL_60_64_comorbidity[k]) || !(ObesityClassC_Total_BL_60_64_comorbidity[k])) {
                            ObesityClassC_Total_BL_60_64_comorbidity[k] = 0;
                        }
                        // Class D    
                        if (isNaN(ObesityClassD_Total_BL_18_29_comorbidity[k]) || !(ObesityClassD_Total_BL_18_29_comorbidity[k])) {
                            ObesityClassD_Total_BL_18_29_comorbidity[k] = 0;
                        }
                        if (isNaN(ObesityClassD_Total_BL_30_39_comorbidity[k]) || !(ObesityClassD_Total_BL_30_39_comorbidity[k])) {
                            ObesityClassD_Total_BL_30_39_comorbidity[k] = 0;
                        }
                        if (isNaN(ObesityClassD_Total_BL_40_49_comorbidity[k]) || !(ObesityClassD_Total_BL_40_49_comorbidity[k])) {
                            ObesityClassD_Total_BL_40_49_comorbidity[k] = 0;
                        }
                        if (isNaN(ObesityClassD_Total_BL_50_59_comorbidity[k]) || !(ObesityClassD_Total_BL_50_59_comorbidity[k])) {
                            ObesityClassD_Total_BL_50_59_comorbidity[k] = 0;
                        }
                        if (isNaN(ObesityClassD_Total_BL_60_64_comorbidity[k]) || !(ObesityClassD_Total_BL_60_64_comorbidity[k])) {
                            ObesityClassD_Total_BL_60_64_comorbidity[k] = 0;
                        }
                    }

                    for (k = 1; k <= 14; k++) {
                        for (yr = 1; yr <= 10; yr++) {
                            if (isNaN(ObseityClassA_total_count18_29_comorbidity[k][yr]) || !(ObseityClassA_total_count18_29_comorbidity[k][yr])) {
                                ObseityClassA_total_count18_29_comorbidity[k][yr] = 0;
                            }
                            if (isNaN(ObseityClassA_total_count30_39_comorbidity[k][yr]) || !(ObseityClassA_total_count30_39_comorbidity[k][yr])) {
                                ObseityClassA_total_count30_39_comorbidity[k][yr] = 0;
                            }
                            if (isNaN(ObseityClassA_total_count40_49_comorbidity[k][yr]) || !(ObseityClassA_total_count40_49_comorbidity[k][yr])) {
                                ObseityClassA_total_count40_49_comorbidity[k][yr] = 0;
                            }
                            if (isNaN(ObseityClassA_total_count50_59_comorbidity[k][yr]) || !(ObseityClassA_total_count50_59_comorbidity[k][yr])) {
                                ObseityClassA_total_count50_59_comorbidity[k][yr] = 0;
                            }
                            if (isNaN(ObseityClassA_total_count60_64_comorbidity[k][yr]) || !(ObseityClassA_total_count60_64_comorbidity[k][yr])) {
                                ObseityClassA_total_count60_64_comorbidity[k][yr] = 0;
                            }

                            if (isNaN(ObseityClassB_total_count18_29_comorbidity[k][yr]) || !(ObseityClassB_total_count18_29_comorbidity[k][yr])) {
                                ObseityClassB_total_count18_29_comorbidity[k][yr] = 0;
                            }
                            if (isNaN(ObseityClassB_total_count30_39_comorbidity[k][yr]) || !(ObseityClassB_total_count30_39_comorbidity[k][yr])) {
                                ObseityClassB_total_count30_39_comorbidity[k][yr] = 0;
                            }
                            if (isNaN(ObseityClassB_total_count40_49_comorbidity[k][yr]) || !(ObseityClassB_total_count40_49_comorbidity[k][yr])) {
                                ObseityClassB_total_count40_49_comorbidity[k][yr] = 0;
                            }
                            if (isNaN(ObseityClassB_total_count50_59_comorbidity[k][yr]) || !(ObseityClassB_total_count50_59_comorbidity[k][yr])) {
                                ObseityClassB_total_count50_59_comorbidity[k][yr] = 0;
                            }
                            if (isNaN(ObseityClassB_total_count60_64_comorbidity[k][yr]) || !(ObseityClassB_total_count60_64_comorbidity[k][yr])) {
                                ObseityClassB_total_count60_64_comorbidity[k][yr] = 0;
                            }

                            if (isNaN(ObseityClassC_total_count18_29_comorbidity[k][yr]) || !(ObseityClassC_total_count18_29_comorbidity[k][yr])) {
                                ObseityClassC_total_count18_29_comorbidity[k][yr] = 0;
                            }
                            if (isNaN(ObseityClassC_total_count30_39_comorbidity[k][yr]) || !(ObseityClassC_total_count30_39_comorbidity[k][yr])) {
                                ObseityClassC_total_count30_39_comorbidity[k][yr] = 0;
                            }
                            if (isNaN(ObseityClassC_total_count40_49_comorbidity[k][yr]) || !(ObseityClassC_total_count40_49_comorbidity[k][yr])) {
                                ObseityClassC_total_count40_49_comorbidity[k][yr] = 0;
                            }
                            if (isNaN(ObseityClassC_total_count50_59_comorbidity[k][yr]) || !(ObseityClassC_total_count50_59_comorbidity[k][yr])) {
                                ObseityClassC_total_count50_59_comorbidity[k][yr] = 0;
                            }
                            if (isNaN(ObseityClassC_total_count60_64_comorbidity[k][yr]) || !(ObseityClassC_total_count60_64_comorbidity[k][yr])) {
                                ObseityClassC_total_count60_64_comorbidity[k][yr] = 0;
                            }

                            if (isNaN(ObseityClassD_total_count18_29_comorbidity[k][yr]) || !(ObseityClassD_total_count18_29_comorbidity[k][yr])) {
                                ObseityClassD_total_count18_29_comorbidity[k][yr] = 0;
                            }
                            if (isNaN(ObseityClassD_total_count30_39_comorbidity[k][yr]) || !(ObseityClassD_total_count30_39_comorbidity[k][yr])) {
                                ObseityClassD_total_count30_39_comorbidity[k][yr] = 0;
                            }
                            if (isNaN(ObseityClassD_total_count40_49_comorbidity[k][yr]) || !(ObseityClassD_total_count40_49_comorbidity[k][yr])) {
                                ObseityClassD_total_count40_49_comorbidity[k][yr] = 0;
                            }
                            if (isNaN(ObseityClassD_total_count50_59_comorbidity[k][yr]) || !(ObseityClassD_total_count50_59_comorbidity[k][yr])) {
                                ObseityClassD_total_count50_59_comorbidity[k][yr] = 0;
                            }
                            if (isNaN(ObseityClassD_total_count60_64_comorbidity[k][yr]) || !(ObseityClassD_total_count60_64_comorbidity[k][yr])) {
                                ObseityClassD_total_count60_64_comorbidity[k][yr] = 0;
                            }


                        }
                    }

                    totalSumproduct_30_70 = 0;
                    if (Include_select_bmi0 == true) {
                        if ((myPOIValue == "People with overweight/ obesity") || (myPOIValue == "People with obesity")) {
                            var BMI_age_proportions = Percentage_overweight_group_one_comorbidity;
                        } else {
                            var BMI_age_proportions = 1;
                        }
                        for (i = 27; i <= 70; i += 0.5) {
                            var values = showMyBMI(i);
                            var myAgeGroupLessThan30 = Age_group_less_than_30;
                            var myAgeGroup30To39 = Age_group_30_39;
                            var myAgeGroup40To49 = Age_group_40_49;
                            var myAgeGroup50To59 = Age_group_50_59;
                            var myAgeGroup60To64 = Age_group_60_64;
                            // console.log('i',i)
                            if (i <= 29.5) {
                                for (k = 1; k <= 14; k++) {

                                    if (k != 1) {
                                        BMI_age_proportions = 1;
                                    } else {
                                        BMI_age_proportions = Percentage_overweight_group_one_comorbidity;
                                    }
                                    ObesityClassA_BL_18_29_comorbidity[k] = myAgeGroupLessThan30 * BMI_age_proportions * Prevalence18_29_comorbidity[k] * (myPercentageIndividualsTakingAOMs / 100);
                                    ObesityClassA_Total_BL_18_29_comorbidity[k] += ObesityClassA_BL_18_29_comorbidity[k] * 1;

                                    ObesityClassA_BL_30_39_comorbidity[k] = myAgeGroup30To39 * BMI_age_proportions * Prevalence30_39_comorbidity[k] * (myPercentageIndividualsTakingAOMs / 100);
                                    ObesityClassA_Total_BL_30_39_comorbidity[k] += ObesityClassA_BL_30_39_comorbidity[k];

                                    ObesityClassA_BL_40_49_comorbidity[k] = myAgeGroup40To49 * BMI_age_proportions * Prevalence40_49_comorbidity[k] * (myPercentageIndividualsTakingAOMs / 100);
                                    ObesityClassA_Total_BL_40_49_comorbidity[k] += ObesityClassA_BL_40_49_comorbidity[k];

                                    ObesityClassA_BL_50_59_comorbidity[k] = myAgeGroup50To59 * BMI_age_proportions * Prevalence50_59_comorbidity[k] * (myPercentageIndividualsTakingAOMs / 100);
                                    ObesityClassA_Total_BL_50_59_comorbidity[k] += ObesityClassA_BL_50_59_comorbidity[k];

                                    ObesityClassA_BL_60_64_comorbidity[k] = myAgeGroup60To64 * BMI_age_proportions * Prevalence60_64_comorbidity[k] * (myPercentageIndividualsTakingAOMs / 100);
                                    ObesityClassA_Total_BL_60_64_comorbidity[k] += ObesityClassA_BL_60_64_comorbidity[k];

                                    //                         console.log('myAgeGroup60To64',myAgeGroup60To64)                
                                    // console.log('i',i)
                                    // console.log('k',k)
                                    //                         console.log('BMI_age_proportions',BMI_age_proportions)
                                    // console.log('Prevalence18_29_comorbidity[k]',Prevalence18_29_comorbidity[1])
                                    // console.log('myPercentageIndividualsTakingAOMs',myPercentageIndividualsTakingAOMs)
                                    // console.log('ObesityClassA_BL_30_39_comorbidity',ObesityClassA_BL_30_39_comorbidity[1])
                                    // console.log('ObesityClassA_Total_BL_18_29_comorbidity',ObesityClassA_Total_BL_18_29_comorbidity[1])

                                    // console.log('ObesityClassA_Total_BL_30_39_comorbidity - 0', i, ' ' ,k, ' ',ObesityClassA_Total_BL_30_39_comorbidity[k])

                                }

                            } else if ((i <= 34.5) && (i >= 30)) {
                                for (k = 1; k <= 14; k++) {
                                    ObesityClassB_BL_18_29_comorbidity[k] = myAgeGroupLessThan30 * Prevalence18_29_comorbidity[k] * (myPercentageIndividualsTakingAOMs / 100);
                                    ObesityClassA_Total_BL_18_29_comorbidity[k] += ObesityClassB_BL_18_29_comorbidity[k] * 1;
                                    ObesityClassB_Total_BL_18_29_comorbidity[k] += ObesityClassB_BL_18_29_comorbidity[k] * 1;

                                    ObesityClassB_BL_30_39_comorbidity[k] = myAgeGroup30To39 * Prevalence30_39_comorbidity[k] * (myPercentageIndividualsTakingAOMs / 100);
                                    ObesityClassA_Total_BL_30_39_comorbidity[k] += ObesityClassB_BL_30_39_comorbidity[k];
                                    ObesityClassB_Total_BL_30_39_comorbidity[k] += ObesityClassB_BL_30_39_comorbidity[k];

                                    ObesityClassB_BL_40_49_comorbidity[k] = myAgeGroup40To49 * Prevalence40_49_comorbidity[k] * (myPercentageIndividualsTakingAOMs / 100);
                                    ObesityClassA_Total_BL_40_49_comorbidity[k] += ObesityClassB_BL_40_49_comorbidity[k];
                                    ObesityClassB_Total_BL_40_49_comorbidity[k] += ObesityClassB_BL_40_49_comorbidity[k];

                                    ObesityClassB_BL_50_59_comorbidity[k] = myAgeGroup50To59 * Prevalence50_59_comorbidity[k] * (myPercentageIndividualsTakingAOMs / 100);
                                    ObesityClassA_Total_BL_50_59_comorbidity[k] += ObesityClassB_BL_50_59_comorbidity[k];
                                    ObesityClassB_Total_BL_50_59_comorbidity[k] += ObesityClassB_BL_50_59_comorbidity[k];

                                    ObesityClassB_BL_60_64_comorbidity[k] = myAgeGroup60To64 * Prevalence60_64_comorbidity[k] * (myPercentageIndividualsTakingAOMs / 100);
                                    ObesityClassA_Total_BL_60_64_comorbidity[k] += ObesityClassB_BL_60_64_comorbidity[k];
                                    ObesityClassB_Total_BL_60_64_comorbidity[k] += ObesityClassB_BL_60_64_comorbidity[k];
                                    // console.log('ObesityClassA_Total_BL_30_39_comorbidity - 1', i, ' ' ,k, ' ',ObesityClassA_Total_BL_30_39_comorbidity[k])

                                }
                            } else if ((i <= 39.5) && (i >= 35)) {
                                for (k = 1; k <= 14; k++) {
                                    ObesityClassC_BL_18_29_comorbidity[k] = myAgeGroupLessThan30 * Prevalence18_29_comorbidity[k] * (myPercentageIndividualsTakingAOMs / 100);
                                    ObesityClassA_Total_BL_18_29_comorbidity[k] += ObesityClassC_BL_18_29_comorbidity[k] * 1;
                                    ObesityClassB_Total_BL_18_29_comorbidity[k] += ObesityClassC_BL_18_29_comorbidity[k] * 1;
                                    ObesityClassC_Total_BL_18_29_comorbidity[k] += ObesityClassC_BL_18_29_comorbidity[k] * 1;

                                    ObesityClassC_BL_30_39_comorbidity[k] = myAgeGroup30To39 * Prevalence30_39_comorbidity[k] * (myPercentageIndividualsTakingAOMs / 100);
                                    ObesityClassA_Total_BL_30_39_comorbidity[k] += ObesityClassC_BL_30_39_comorbidity[k];
                                    ObesityClassB_Total_BL_30_39_comorbidity[k] += ObesityClassC_BL_30_39_comorbidity[k];
                                    ObesityClassC_Total_BL_30_39_comorbidity[k] += ObesityClassC_BL_30_39_comorbidity[k];

                                    ObesityClassC_BL_40_49_comorbidity[k] = myAgeGroup40To49 * Prevalence40_49_comorbidity[k] * (myPercentageIndividualsTakingAOMs / 100);
                                    ObesityClassA_Total_BL_40_49_comorbidity[k] += ObesityClassC_BL_40_49_comorbidity[k];
                                    ObesityClassB_Total_BL_40_49_comorbidity[k] += ObesityClassC_BL_40_49_comorbidity[k];
                                    ObesityClassC_Total_BL_40_49_comorbidity[k] += ObesityClassC_BL_40_49_comorbidity[k];

                                    ObesityClassC_BL_50_59_comorbidity[k] = myAgeGroup50To59 * Prevalence50_59_comorbidity[k] * (myPercentageIndividualsTakingAOMs / 100);
                                    ObesityClassA_Total_BL_50_59_comorbidity[k] += ObesityClassC_BL_50_59_comorbidity[k];
                                    ObesityClassB_Total_BL_50_59_comorbidity[k] += ObesityClassC_BL_50_59_comorbidity[k];
                                    ObesityClassC_Total_BL_50_59_comorbidity[k] += ObesityClassC_BL_50_59_comorbidity[k];

                                    ObesityClassC_BL_60_64_comorbidity[k] = myAgeGroup60To64 * Prevalence60_64_comorbidity[k] * (myPercentageIndividualsTakingAOMs / 100);
                                    ObesityClassA_Total_BL_60_64_comorbidity[k] += ObesityClassC_BL_60_64_comorbidity[k];
                                    ObesityClassB_Total_BL_60_64_comorbidity[k] += ObesityClassC_BL_60_64_comorbidity[k];
                                    ObesityClassC_Total_BL_60_64_comorbidity[k] += ObesityClassC_BL_60_64_comorbidity[k];
                                    // console.log('ObesityClassA_Total_BL_30_39_comorbidity - 2', i, ' ' ,k, ' ',ObesityClassA_Total_BL_30_39_comorbidity[k])

                                }
                            } else if ((i <= 70) && (i >= 40)) {
                                for (k = 1; k <= 14; k++) {
                                    ObesityClassD_BL_18_29_comorbidity[k] = myAgeGroupLessThan30 * Prevalence18_29_comorbidity[k] * (myPercentageIndividualsTakingAOMs / 100);
                                    ObesityClassA_Total_BL_18_29_comorbidity[k] += ObesityClassD_BL_18_29_comorbidity[k] * 1;
                                    ObesityClassB_Total_BL_18_29_comorbidity[k] += ObesityClassD_BL_18_29_comorbidity[k] * 1;
                                    ObesityClassC_Total_BL_18_29_comorbidity[k] += ObesityClassD_BL_18_29_comorbidity[k] * 1;
                                    ObesityClassD_Total_BL_18_29_comorbidity[k] += ObesityClassD_BL_18_29_comorbidity[k] * 1;

                                    ObesityClassD_BL_30_39_comorbidity[k] = myAgeGroup30To39 * Prevalence30_39_comorbidity[k] * (myPercentageIndividualsTakingAOMs / 100);
                                    ObesityClassA_Total_BL_30_39_comorbidity[k] += ObesityClassD_BL_30_39_comorbidity[k] * 1;
                                    ObesityClassB_Total_BL_30_39_comorbidity[k] += ObesityClassD_BL_30_39_comorbidity[k] * 1;
                                    ObesityClassC_Total_BL_30_39_comorbidity[k] += ObesityClassD_BL_30_39_comorbidity[k] * 1;
                                    ObesityClassD_Total_BL_30_39_comorbidity[k] += ObesityClassD_BL_30_39_comorbidity[k] * 1;

                                    ObesityClassD_BL_40_49_comorbidity[k] = myAgeGroup40To49 * Prevalence40_49_comorbidity[k] * (myPercentageIndividualsTakingAOMs / 100);
                                    ObesityClassA_Total_BL_40_49_comorbidity[k] += ObesityClassD_BL_40_49_comorbidity[k] * 1;
                                    ObesityClassB_Total_BL_40_49_comorbidity[k] += ObesityClassD_BL_40_49_comorbidity[k] * 1;
                                    ObesityClassC_Total_BL_40_49_comorbidity[k] += ObesityClassD_BL_40_49_comorbidity[k] * 1;
                                    ObesityClassD_Total_BL_40_49_comorbidity[k] += ObesityClassD_BL_40_49_comorbidity[k] * 1;

                                    ObesityClassD_BL_50_59_comorbidity[k] = myAgeGroup50To59 * Prevalence50_59_comorbidity[k] * (myPercentageIndividualsTakingAOMs / 100);
                                    ObesityClassA_Total_BL_50_59_comorbidity[k] += ObesityClassD_BL_50_59_comorbidity[k] * 1;
                                    ObesityClassB_Total_BL_50_59_comorbidity[k] += ObesityClassD_BL_50_59_comorbidity[k] * 1;
                                    ObesityClassC_Total_BL_50_59_comorbidity[k] += ObesityClassD_BL_50_59_comorbidity[k] * 1;
                                    ObesityClassD_Total_BL_50_59_comorbidity[k] += ObesityClassD_BL_50_59_comorbidity[k] * 1;

                                    ObesityClassD_BL_60_64_comorbidity[k] = myAgeGroup60To64 * Prevalence60_64_comorbidity[k] * (myPercentageIndividualsTakingAOMs / 100);
                                    ObesityClassA_Total_BL_60_64_comorbidity[k] += ObesityClassD_BL_60_64_comorbidity[k] * 1;
                                    ObesityClassB_Total_BL_60_64_comorbidity[k] += ObesityClassD_BL_60_64_comorbidity[k] * 1;
                                    ObesityClassC_Total_BL_60_64_comorbidity[k] += ObesityClassD_BL_60_64_comorbidity[k] * 1;
                                    ObesityClassD_Total_BL_60_64_comorbidity[k] += ObesityClassD_BL_60_64_comorbidity[k] * 1;
                                    // console.log('ObesityClassA_Total_BL_30_39_comorbidity - 3', i, ' ' ,k, ' ',ObesityClassA_Total_BL_30_39_comorbidity[k])
                                }
                            }
                            // console.log('myAgeGroup30To39',myAgeGroup30To39)
                            // console.log('Prevalence30_39_comorbidity',Prevalence30_39_comorbidity[1])
                            // console.log('myPercentageIndividualsTakingAOMs',myPercentageIndividualsTakingAOMs)
                            // console.log('ObesityClassD_BL_18_29_comorbidity',ObesityClassD_BL_30_39_comorbidity[1])
                            for (k = 1; k <= 14; k++) {
                                ObseityClassA_BL_Count_comorbidity[k] = [];
                                ObseityClassB_BL_Count_comorbidity[k] = [];
                                ObseityClassC_BL_Count_comorbidity[k] = [];
                                ObseityClassD_BL_Count_comorbidity[k] = [];
                                for (j = 18; j <= 29; j++) {
                                    ObseityClassA_BL_Count_comorbidity[k][j] = ObesityClassA_Total_BL_18_29_comorbidity[k] * showAgeBaseline(j);
                                    ObseityClassB_BL_Count_comorbidity[k][j] = ObesityClassB_Total_BL_18_29_comorbidity[k] * showAgeBaseline(j);
                                    ObseityClassC_BL_Count_comorbidity[k][j] = ObesityClassC_Total_BL_18_29_comorbidity[k] * showAgeBaseline(j);
                                    ObseityClassD_BL_Count_comorbidity[k][j] = ObesityClassD_Total_BL_18_29_comorbidity[k] * showAgeBaseline(j);
                                }
                                for (m = 30; m <= 39; m++) {
                                    ObseityClassA_BL_Count_comorbidity[k][m] = ObesityClassA_Total_BL_30_39_comorbidity[k] * showAgeBaseline(m);
                                    ObseityClassB_BL_Count_comorbidity[k][m] = ObesityClassB_Total_BL_30_39_comorbidity[k] * showAgeBaseline(m);
                                    ObseityClassC_BL_Count_comorbidity[k][m] = ObesityClassC_Total_BL_30_39_comorbidity[k] * showAgeBaseline(m);
                                    ObseityClassD_BL_Count_comorbidity[k][m] = ObesityClassD_Total_BL_30_39_comorbidity[k] * showAgeBaseline(m);
                                }
                                for (n = 40; n <= 49; n++) {
                                    ObseityClassA_BL_Count_comorbidity[k][n] = ObesityClassA_Total_BL_40_49_comorbidity[k] * showAgeBaseline(n);
                                    ObseityClassB_BL_Count_comorbidity[k][n] = ObesityClassB_Total_BL_40_49_comorbidity[k] * showAgeBaseline(n);
                                    ObseityClassC_BL_Count_comorbidity[k][n] = ObesityClassC_Total_BL_40_49_comorbidity[k] * showAgeBaseline(n);
                                    ObseityClassD_BL_Count_comorbidity[k][n] = ObesityClassD_Total_BL_40_49_comorbidity[k] * showAgeBaseline(n);
                                }
                                for (p = 50; p <= 59; p++) {
                                    ObseityClassA_BL_Count_comorbidity[k][p] = ObesityClassA_Total_BL_50_59_comorbidity[k] * showAgeBaseline(p);
                                    ObseityClassB_BL_Count_comorbidity[k][p] = ObesityClassB_Total_BL_50_59_comorbidity[k] * showAgeBaseline(p);
                                    ObseityClassC_BL_Count_comorbidity[k][p] = ObesityClassC_Total_BL_50_59_comorbidity[k] * showAgeBaseline(p);
                                    ObseityClassD_BL_Count_comorbidity[k][p] = ObesityClassD_Total_BL_50_59_comorbidity[k] * showAgeBaseline(p);
                                }
                                for (q = 60; q <= 64; q++) {
                                    ObseityClassA_BL_Count_comorbidity[k][q] = ObesityClassA_Total_BL_60_64_comorbidity[k] * showAgeBaseline(q);
                                    ObseityClassB_BL_Count_comorbidity[k][q] = ObesityClassB_Total_BL_60_64_comorbidity[k] * showAgeBaseline(q);
                                    ObseityClassC_BL_Count_comorbidity[k][q] = ObesityClassC_Total_BL_60_64_comorbidity[k] * showAgeBaseline(q);
                                    ObseityClassD_BL_Count_comorbidity[k][q] = ObesityClassD_Total_BL_60_64_comorbidity[k] * showAgeBaseline(q);
                                }
                            }

                            // ObseityClassA_BL_Count_comorbidity[1][18] = ObesityClassA_Total_BL_18_29_comorbidity[1] * showAgeBaseline(18);


                            // console.log('ObesityClassA_Total_BL_30_39_comorbidity',ObesityClassA_Total_BL_18_29_comorbidity[1])
                            // console.log('showAgeBaseline',showAgeBaseline(19))
                            // console.log('ObseityClassA_BL_Count_comorbidity[1][19]',ObseityClassA_BL_Count_comorbidity[1][19])

                            for (k = 1; k <= 14; k++) {
                                ObseityClassA_Count_comorbidity[k] = [];
                                ObseityClassB_Count_comorbidity[k] = [];
                                ObseityClassC_Count_comorbidity[k] = [];
                                ObseityClassD_Count_comorbidity[k] = [];
                                for (m = 18; m < 19; m++) {
                                    ObseityClassA_Count_comorbidity[k][m] = [];
                                    ObseityClassB_Count_comorbidity[k][m] = [];
                                    ObseityClassC_Count_comorbidity[k][m] = [];
                                    ObseityClassD_Count_comorbidity[k][m] = [];
                                    for (yr = 1; yr <= 10; yr++) {
                                        ObseityClassA_Count_comorbidity[k][m][yr] = 0;
                                        // ObseityClassA_total_count18_29_comorbidity[k][yr] += ObseityClassA_Count_comorbidity[k][m][yr]*1;

                                        ObseityClassB_Count_comorbidity[k][m][yr] = 0;
                                        // ObseityClassB_total_count18_29_comorbidity[k][yr] += ObseityClassB_Count_comorbidity[k][m][yr]*1;

                                        ObseityClassC_Count_comorbidity[k][m][yr] = 0;
                                        // ObseityClassC_total_count18_29_comorbidity[k][yr] += ObseityClassC_Count_comorbidity[k][m][yr]*1;

                                        ObseityClassD_Count_comorbidity[k][m][yr] = 0;
                                        // ObseityClassB_total_count18_29_comorbidity[k][yr] += ObseityClassD_Count_comorbidity[k][m][yr]*1;

                                    }

                                }

                                for (j = 19; j <= 64; j++) {
                                    ObseityClassA_Count_comorbidity[k][j] = [];
                                    ObseityClassB_Count_comorbidity[k][j] = [];
                                    ObseityClassC_Count_comorbidity[k][j] = [];
                                    ObseityClassD_Count_comorbidity[k][j] = [];

                                    for (yr = 1; yr <= 10; yr++) {
                                        if (yr == 1) {
                                            ObseityClassA_Count_comorbidity[k][j][yr] = ObseityClassA_BL_Count_comorbidity[k][j - 1];
                                            ObseityClassB_Count_comorbidity[k][j][yr] = ObseityClassB_BL_Count_comorbidity[k][j - 1];
                                            ObseityClassC_Count_comorbidity[k][j][yr] = ObseityClassC_BL_Count_comorbidity[k][j - 1];
                                            ObseityClassD_Count_comorbidity[k][j][yr] = ObseityClassD_BL_Count_comorbidity[k][j - 1];
                                        } else {
                                            ObseityClassA_Count_comorbidity[k][j][yr] = ObseityClassA_Count_comorbidity[k][j - 1][yr - 1];
                                            ObseityClassB_Count_comorbidity[k][j][yr] = ObseityClassB_Count_comorbidity[k][j - 1][yr - 1];
                                            ObseityClassC_Count_comorbidity[k][j][yr] = ObseityClassC_Count_comorbidity[k][j - 1][yr - 1];
                                            ObseityClassD_Count_comorbidity[k][j][yr] = ObseityClassD_Count_comorbidity[k][j - 1][yr - 1];
                                        }
                                    }

                                }
                            }

                            for (k = 1; k <= 14; k++) {
                                for (j = 19; j <= 64; j++) {
                                    for (yr = 1; yr <= 10; yr++) {
                                        ObseityClassA_total_count18_29_comorbidity[k][yr] = 0;
                                        ObseityClassA_total_count30_39_comorbidity[k][yr] = 0;
                                        ObseityClassA_total_count40_49_comorbidity[k][yr] = 0;
                                        ObseityClassA_total_count50_59_comorbidity[k][yr] = 0;
                                        ObseityClassA_total_count60_64_comorbidity[k][yr] = 0;

                                        ObseityClassB_total_count18_29_comorbidity[k][yr] = 0;
                                        ObseityClassB_total_count30_39_comorbidity[k][yr] = 0;
                                        ObseityClassB_total_count40_49_comorbidity[k][yr] = 0;
                                        ObseityClassB_total_count50_59_comorbidity[k][yr] = 0;
                                        ObseityClassB_total_count60_64_comorbidity[k][yr] = 0;

                                        ObseityClassC_total_count18_29_comorbidity[k][yr] = 0;
                                        ObseityClassC_total_count30_39_comorbidity[k][yr] = 0;
                                        ObseityClassC_total_count40_49_comorbidity[k][yr] = 0;
                                        ObseityClassC_total_count50_59_comorbidity[k][yr] = 0;
                                        ObseityClassC_total_count60_64_comorbidity[k][yr] = 0;

                                        ObseityClassD_total_count18_29_comorbidity[k][yr] = 0;
                                        ObseityClassD_total_count30_39_comorbidity[k][yr] = 0;
                                        ObseityClassD_total_count40_49_comorbidity[k][yr] = 0;
                                        ObseityClassD_total_count50_59_comorbidity[k][yr] = 0;
                                        ObseityClassD_total_count60_64_comorbidity[k][yr] = 0;

                                    }
                                }
                            }

                            // console.log('ObseityClassA_Count_comorbidity',ObseityClassA_Count_comorbidity[2][18][1])
                            // console.log('ObseityClassA_Count_comorbidity',ObseityClassA_Count_comorbidity[2][19][1])
                            // console.log('ObseityClassA_Count_comorbidity',ObseityClassA_Count_comorbidity[2][20][1])
                            // console.log('ObseityClassA_Count_comorbidity',ObseityClassA_Count_comorbidity[2][21][1])
                            // console.log('ObseityClassA_Count_comorbidity',ObseityClassA_Count_comorbidity[2][22][1])
                            // console.log('ObseityClassA_Count_comorbidity',ObseityClassA_Count_comorbidity[2][23][1])
                            // console.log('ObseityClassA_Count_comorbidity',ObseityClassA_Count_comorbidity[2][24][1])
                            // console.log('ObseityClassA_Count_comorbidity',ObseityClassA_Count_comorbidity[2][25][1])
                            // console.log('ObseityClassA_Count_comorbidity',ObseityClassA_Count_comorbidity[2][26][1])
                            // console.log('ObseityClassA_Count_comorbidity',ObseityClassA_Count_comorbidity[2][27][1])
                            // console.log('ObseityClassA_Count_comorbidity',ObseityClassA_Count_comorbidity[2][28][1])
                            // console.log('ObseityClassA_Count_comorbidity',ObseityClassA_Count_comorbidity[2][29][1])

                            for (k = 1; k <= 14; k++) {
                                for (j = 18; j <= 29; j++) {
                                    for (yr = 1; yr <= 10; yr++) {
                                        if (((j == 18) && (yr == 1)) || ((j <= 19) && (yr == 2)) || ((j <= 20) && (yr == 3)) || ((j <= 21) && (yr == 4)) || ((j <= 22) && (yr == 5)) || ((j <= 23) && (yr == 6)) || ((j <= 24) && (yr == 7)) || ((j <= 25) && (yr == 8)) || ((j <= 26) && (yr == 9)) || ((j <= 27) && (yr == 10))) {
                                            ObseityClassA_Count_comorbidity[k][j][yr] = 0;
                                            ObseityClassA_total_count18_29_comorbidity[k][yr] += ObseityClassA_Count_comorbidity[k][j][yr];
                                            ObseityClassB_Count_comorbidity[k][j][yr] = 0;
                                            ObseityClassB_total_count18_29_comorbidity[k][yr] += ObseityClassB_Count_comorbidity[k][j][yr];
                                            ObseityClassC_Count_comorbidity[k][j][yr] = 0;
                                            ObseityClassC_total_count18_29_comorbidity[k][yr] += ObseityClassC_Count_comorbidity[k][j][yr];
                                            ObseityClassD_Count_comorbidity[k][j][yr] = 0;
                                            ObseityClassD_total_count18_29_comorbidity[k][yr] += ObseityClassD_Count_comorbidity[k][j][yr];
                                        } else {
                                            ObseityClassA_total_count18_29_comorbidity[k][yr] += ObseityClassA_Count_comorbidity[k][j][yr];
                                            ObseityClassB_total_count18_29_comorbidity[k][yr] += ObseityClassB_Count_comorbidity[k][j][yr];
                                            ObseityClassC_total_count18_29_comorbidity[k][yr] += ObseityClassC_Count_comorbidity[k][j][yr];
                                            ObseityClassD_total_count18_29_comorbidity[k][yr] += ObseityClassD_Count_comorbidity[k][j][yr];
                                        }
                                    }
                                }

                                for (j = 30; j <= 39; j++) {
                                    for (yr = 1; yr <= 10; yr++) {
                                        ObseityClassA_total_count30_39_comorbidity[k][yr] += ObseityClassA_Count_comorbidity[k][j][yr];
                                        ObseityClassB_total_count30_39_comorbidity[k][yr] += ObseityClassB_Count_comorbidity[k][j][yr];
                                        ObseityClassC_total_count30_39_comorbidity[k][yr] += ObseityClassC_Count_comorbidity[k][j][yr];
                                        ObseityClassD_total_count30_39_comorbidity[k][yr] += ObseityClassD_Count_comorbidity[k][j][yr];
                                    }
                                }

                                for (j = 40; j <= 49; j++) {
                                    for (yr = 1; yr <= 10; yr++) {
                                        ObseityClassA_total_count40_49_comorbidity[k][yr] += ObseityClassA_Count_comorbidity[k][j][yr];
                                        ObseityClassB_total_count40_49_comorbidity[k][yr] += ObseityClassB_Count_comorbidity[k][j][yr];
                                        ObseityClassC_total_count40_49_comorbidity[k][yr] += ObseityClassC_Count_comorbidity[k][j][yr];
                                        ObseityClassD_total_count40_49_comorbidity[k][yr] += ObseityClassD_Count_comorbidity[k][j][yr];
                                    }
                                }

                                for (j = 50; j <= 59; j++) {
                                    for (yr = 1; yr <= 10; yr++) {
                                        ObseityClassA_total_count50_59_comorbidity[k][yr] += ObseityClassA_Count_comorbidity[k][j][yr];
                                        ObseityClassB_total_count50_59_comorbidity[k][yr] += ObseityClassB_Count_comorbidity[k][j][yr];
                                        ObseityClassC_total_count50_59_comorbidity[k][yr] += ObseityClassC_Count_comorbidity[k][j][yr];
                                        ObseityClassD_total_count50_59_comorbidity[k][yr] += ObseityClassD_Count_comorbidity[k][j][yr];
                                    }
                                }

                                for (j = 60; j <= 64; j++) {
                                    for (yr = 1; yr <= 10; yr++) {
                                        ObseityClassA_total_count60_64_comorbidity[k][yr] += ObseityClassA_Count_comorbidity[k][j][yr];
                                        ObseityClassB_total_count60_64_comorbidity[k][yr] += ObseityClassB_Count_comorbidity[k][j][yr];
                                        ObseityClassC_total_count60_64_comorbidity[k][yr] += ObseityClassC_Count_comorbidity[k][j][yr];
                                        ObseityClassD_total_count60_64_comorbidity[k][yr] += ObseityClassD_Count_comorbidity[k][j][yr];
                                    }
                                }

                            }


                            for (k = 1; k <= 14; k++) {
                                for (j = 29; j <= 29; j++) {
                                    if (ObesityClassA_Total_BL_18_29_comorbidity[k] == 0) {
                                        ObseityClassA_BL_proportions_29_comorbidity[k] = 0;
                                    } else {
                                        ObseityClassA_BL_proportions_29_comorbidity[k] = ObseityClassA_BL_Count_comorbidity[k][j] / ObesityClassA_Total_BL_18_29_comorbidity[k];
                                    }
                                    if (ObesityClassB_Total_BL_18_29_comorbidity[k] == 0) {
                                        ObseityClassB_BL_proportions_29_comorbidity[k] = 0;
                                    } else {
                                        ObseityClassB_BL_proportions_29_comorbidity[k] = ObseityClassB_BL_Count_comorbidity[k][j] / ObesityClassB_Total_BL_18_29_comorbidity[k];
                                    }
                                    if (ObesityClassC_Total_BL_18_29_comorbidity[k] == 0) {
                                        ObseityClassC_BL_proportions_29_comorbidity[k] = 0;
                                    } else {
                                        ObseityClassC_BL_proportions_29_comorbidity[k] = ObseityClassC_BL_Count_comorbidity[k][j] / ObesityClassC_Total_BL_18_29_comorbidity[k];
                                    }
                                    if (ObesityClassD_Total_BL_18_29_comorbidity[k] == 0) {
                                        ObseityClassD_BL_proportions_29_comorbidity[k] = 0;
                                    } else {
                                        ObseityClassD_BL_proportions_29_comorbidity[k] = ObseityClassD_BL_Count_comorbidity[k][j] / ObesityClassD_Total_BL_18_29_comorbidity[k];
                                    }

                                    for (yr = 1; yr <= 10; yr++) {
                                        if (ObseityClassA_total_count18_29_comorbidity[k][yr] == 0) {
                                            ObseityClassA_Proportions29_comorbidity[k][yr] = 0;
                                        } else {
                                            ObseityClassA_Proportions29_comorbidity[k][yr] = ObseityClassA_Count_comorbidity[k][j][yr] / ObseityClassA_total_count18_29_comorbidity[k][yr];
                                        }
                                        if (ObseityClassB_total_count18_29_comorbidity[k][yr] == 0) {
                                            ObseityClassB_Proportions29_comorbidity[k][yr] = 0;
                                        } else {
                                            ObseityClassB_Proportions29_comorbidity[k][yr] = ObseityClassB_Count_comorbidity[k][j][yr] / ObseityClassB_total_count18_29_comorbidity[k][yr];
                                        }
                                        if (ObseityClassC_total_count18_29_comorbidity[k][yr] == 0) {
                                            ObseityClassC_Proportions29_comorbidity[k][yr] = 0;
                                        } else {
                                            ObseityClassC_Proportions29_comorbidity[k][yr] = ObseityClassC_Count_comorbidity[k][j][yr] / ObseityClassC_total_count18_29_comorbidity[k][yr];
                                        }
                                        if (ObseityClassD_total_count18_29_comorbidity[k][yr] == 0) {
                                            ObseityClassD_Proportions29_comorbidity[k][yr] = 0;
                                        } else {
                                            ObseityClassD_Proportions29_comorbidity[k][yr] = ObseityClassD_Count_comorbidity[k][j][yr] / ObseityClassD_total_count18_29_comorbidity[k][yr];
                                        }
                                    }
                                }
                                for (j = 39; j <= 39; j++) {
                                    if (ObesityClassA_Total_BL_30_39_comorbidity[k] == 0) {
                                        ObseityClassA_BL_proportions_39_comorbidity[k] = 0;
                                    } else {
                                        ObseityClassA_BL_proportions_39_comorbidity[k] = ObseityClassA_BL_Count_comorbidity[k][j] / ObesityClassA_Total_BL_30_39_comorbidity[k];
                                    }
                                    if (ObesityClassB_Total_BL_30_39_comorbidity[k] == 0) {
                                        ObseityClassB_BL_proportions_39_comorbidity[k] = 0;
                                    } else {
                                        ObseityClassB_BL_proportions_39_comorbidity[k] = ObseityClassB_BL_Count_comorbidity[k][j] / ObesityClassB_Total_BL_30_39_comorbidity[k];
                                    }
                                    if (ObesityClassC_Total_BL_30_39_comorbidity[k] == 0) {
                                        ObseityClassC_BL_proportions_39_comorbidity[k] = 0;
                                    } else {
                                        ObseityClassC_BL_proportions_39_comorbidity[k] = ObseityClassC_BL_Count_comorbidity[k][j] / ObesityClassC_Total_BL_30_39_comorbidity[k];
                                    }
                                    if (ObesityClassD_Total_BL_30_39_comorbidity[k] == 0) {
                                        ObseityClassD_BL_proportions_39_comorbidity[k] = 0;
                                    } else {
                                        ObseityClassD_BL_proportions_39_comorbidity[k] = ObseityClassD_BL_Count_comorbidity[k][j] / ObesityClassD_Total_BL_30_39_comorbidity[k];
                                    }

                                    for (yr = 1; yr <= 10; yr++) {
                                        if (ObseityClassA_total_count30_39_comorbidity[k][yr] == 0) {
                                            ObseityClassA_Proportions39_comorbidity[k][yr] = 0;
                                        } else {
                                            ObseityClassA_Proportions39_comorbidity[k][yr] = ObseityClassA_Count_comorbidity[k][j][yr] / ObseityClassA_total_count30_39_comorbidity[k][yr];
                                        }
                                        if (ObseityClassB_total_count30_39_comorbidity[k][yr] == 0) {
                                            ObseityClassB_Proportions39_comorbidity[k][yr] = 0;
                                        } else {
                                            ObseityClassB_Proportions39_comorbidity[k][yr] = ObseityClassB_Count_comorbidity[k][j][yr] / ObseityClassB_total_count30_39_comorbidity[k][yr];
                                        }
                                        if (ObseityClassC_total_count30_39_comorbidity[k][yr] == 0) {
                                            ObseityClassC_Proportions39_comorbidity[k][yr] = 0;
                                        } else {
                                            ObseityClassC_Proportions39_comorbidity[k][yr] = ObseityClassC_Count_comorbidity[k][j][yr] / ObseityClassC_total_count30_39_comorbidity[k][yr];
                                        }
                                        if (ObseityClassD_total_count30_39_comorbidity[k][yr] == 0) {
                                            ObseityClassD_Proportions39_comorbidity[k][yr] = 0;
                                        } else {
                                            ObseityClassD_Proportions39_comorbidity[k][yr] = ObseityClassD_Count_comorbidity[k][j][yr] / ObseityClassD_total_count30_39_comorbidity[k][yr];
                                        }
                                    }
                                }
                                for (j = 49; j <= 49; j++) {
                                    if (ObesityClassA_Total_BL_40_49_comorbidity[k] == 0) {
                                        ObseityClassA_BL_proportions_49_comorbidity[k] = 0;
                                    } else {
                                        ObseityClassA_BL_proportions_49_comorbidity[k] = ObseityClassA_BL_Count_comorbidity[k][j] / ObesityClassA_Total_BL_40_49_comorbidity[k];
                                    }
                                    if (ObesityClassB_Total_BL_40_49_comorbidity[k] == 0) {
                                        ObseityClassB_BL_proportions_49_comorbidity[k] = 0;
                                    } else {
                                        ObseityClassB_BL_proportions_49_comorbidity[k] = ObseityClassB_BL_Count_comorbidity[k][j] / ObesityClassB_Total_BL_40_49_comorbidity[k];
                                    }
                                    if (ObesityClassC_Total_BL_40_49_comorbidity[k] == 0) {
                                        ObseityClassC_BL_proportions_49_comorbidity[k] = 0;
                                    } else {
                                        ObseityClassC_BL_proportions_49_comorbidity[k] = ObseityClassC_BL_Count_comorbidity[k][j] / ObesityClassC_Total_BL_40_49_comorbidity[k];
                                    }
                                    if (ObesityClassD_Total_BL_40_49_comorbidity[k] == 0) {
                                        ObseityClassD_BL_proportions_49_comorbidity[k] = 0;
                                    } else {
                                        ObseityClassD_BL_proportions_49_comorbidity[k] = ObseityClassD_BL_Count_comorbidity[k][j] / ObesityClassD_Total_BL_40_49_comorbidity[k];
                                    }

                                    for (yr = 1; yr <= 10; yr++) {
                                        if (ObseityClassA_total_count40_49_comorbidity[k][yr] == 0) {
                                            ObseityClassA_Proportions49_comorbidity[k][yr] = 0;
                                        } else {
                                            ObseityClassA_Proportions49_comorbidity[k][yr] = ObseityClassA_Count_comorbidity[k][j][yr] / ObseityClassA_total_count40_49_comorbidity[k][yr];
                                        }
                                        if (ObseityClassB_total_count40_49_comorbidity[k][yr] == 0) {
                                            ObseityClassB_Proportions49_comorbidity[k][yr] = 0;
                                        } else {
                                            ObseityClassB_Proportions49_comorbidity[k][yr] = ObseityClassB_Count_comorbidity[k][j][yr] / ObseityClassB_total_count40_49_comorbidity[k][yr];
                                        }
                                        if (ObseityClassC_total_count40_49_comorbidity[k][yr] == 0) {
                                            ObseityClassC_Proportions49_comorbidity[k][yr] = 0;
                                        } else {
                                            ObseityClassC_Proportions49_comorbidity[k][yr] = ObseityClassC_Count_comorbidity[k][j][yr] / ObseityClassC_total_count40_49_comorbidity[k][yr];
                                        }
                                        if (ObseityClassD_total_count40_49_comorbidity[k][yr] == 0) {
                                            ObseityClassD_Proportions49_comorbidity[k][yr] = 0;
                                        } else {
                                            ObseityClassD_Proportions49_comorbidity[k][yr] = ObseityClassD_Count_comorbidity[k][j][yr] / ObseityClassD_total_count40_49_comorbidity[k][yr];
                                        }
                                    }
                                }
                                for (j = 59; j <= 59; j++) {
                                    if (ObesityClassA_Total_BL_50_59_comorbidity[k] == 0) {
                                        ObseityClassA_BL_proportions_59_comorbidity[k] = 0;
                                    } else {
                                        ObseityClassA_BL_proportions_59_comorbidity[k] = ObseityClassA_BL_Count_comorbidity[k][j] / ObesityClassA_Total_BL_50_59_comorbidity[k];
                                    }
                                    if (ObesityClassB_Total_BL_50_59_comorbidity[k] == 0) {
                                        ObseityClassB_BL_proportions_59_comorbidity[k] = 0;
                                    } else {
                                        ObseityClassB_BL_proportions_59_comorbidity[k] = ObseityClassB_BL_Count_comorbidity[k][j] / ObesityClassB_Total_BL_50_59_comorbidity[k];
                                    }
                                    if (ObesityClassC_Total_BL_50_59_comorbidity[k] == 0) {
                                        ObseityClassC_BL_proportions_59_comorbidity[k] = 0;
                                    } else {
                                        ObseityClassC_BL_proportions_59_comorbidity[k] = ObseityClassC_BL_Count_comorbidity[k][j] / ObesityClassC_Total_BL_50_59_comorbidity[k];
                                    }
                                    if (ObesityClassD_Total_BL_50_59_comorbidity[k] == 0) {
                                        ObseityClassD_BL_proportions_59_comorbidity[k] = 0;
                                    } else {
                                        ObseityClassD_BL_proportions_59_comorbidity[k] = ObseityClassD_BL_Count_comorbidity[k][j] / ObesityClassD_Total_BL_50_59_comorbidity[k];
                                    }
                                    for (yr = 1; yr <= 10; yr++) {
                                        if (ObseityClassA_total_count50_59_comorbidity[k][yr] == 0) {
                                            ObseityClassA_Proportions59_comorbidity[k][yr] = 0;
                                        } else {
                                            ObseityClassA_Proportions59_comorbidity[k][yr] = ObseityClassA_Count_comorbidity[k][j][yr] / ObseityClassA_total_count50_59_comorbidity[k][yr];
                                        }
                                        if (ObseityClassB_total_count50_59_comorbidity[k][yr] == 0) {
                                            ObseityClassB_Proportions59_comorbidity[k][yr] = 0;
                                        } else {
                                            ObseityClassB_Proportions59_comorbidity[k][yr] = ObseityClassB_Count_comorbidity[k][j][yr] / ObseityClassB_total_count50_59_comorbidity[k][yr];
                                        }
                                        if (ObseityClassC_total_count50_59_comorbidity[k][yr] == 0) {
                                            ObseityClassC_Proportions59_comorbidity[k][yr] = 0;
                                        } else {
                                            ObseityClassC_Proportions59_comorbidity[k][yr] = ObseityClassC_Count_comorbidity[k][j][yr] / ObseityClassC_total_count50_59_comorbidity[k][yr];
                                        }
                                        if (ObseityClassD_total_count50_59_comorbidity[k][yr] == 0) {
                                            ObseityClassD_Proportions59_comorbidity[k][yr] = 0;
                                        } else {
                                            ObseityClassD_Proportions59_comorbidity[k][yr] = ObseityClassD_Count_comorbidity[k][j][yr] / ObseityClassD_total_count50_59_comorbidity[k][yr];
                                        }
                                    }
                                }
                                for (j = 64; j <= 64; j++) {
                                    if (ObesityClassA_Total_BL_60_64_comorbidity[k] == 0) {
                                        ObseityClassA_BL_proportions_64_comorbidity[k] = 0;
                                    } else {
                                        ObseityClassA_BL_proportions_64_comorbidity[k] = ObseityClassA_BL_Count_comorbidity[k][j] / ObesityClassA_Total_BL_60_64_comorbidity[k];
                                    }
                                    if (ObesityClassB_Total_BL_60_64_comorbidity[k] == 0) {
                                        ObseityClassB_BL_proportions_64_comorbidity[k] = 0;
                                    } else {
                                        ObseityClassB_BL_proportions_64_comorbidity[k] = ObseityClassB_BL_Count_comorbidity[k][j] / ObesityClassB_Total_BL_60_64_comorbidity[k];
                                    }
                                    if (ObesityClassC_Total_BL_60_64_comorbidity[k] == 0) {
                                        ObseityClassC_BL_proportions_64_comorbidity[k] = 0;
                                    } else {
                                        ObseityClassC_BL_proportions_64_comorbidity[k] = ObseityClassC_BL_Count_comorbidity[k][j] / ObesityClassC_Total_BL_60_64_comorbidity[k];
                                    }
                                    if (ObesityClassD_Total_BL_60_64_comorbidity[k] == 0) {
                                        ObseityClassD_BL_proportions_64_comorbidity[k] = 0;
                                    } else {
                                        ObseityClassD_BL_proportions_64_comorbidity[k] = ObseityClassD_BL_Count_comorbidity[k][j] / ObesityClassD_Total_BL_60_64_comorbidity[k];
                                    }
                                    for (yr = 1; yr <= 10; yr++) {
                                        if (ObseityClassA_total_count60_64_comorbidity[k][yr] == 0) {
                                            ObseityClassA_Proportions64_comorbidity[k][yr] = 0;
                                        } else {
                                            ObseityClassA_Proportions64_comorbidity[k][yr] = ObseityClassA_Count_comorbidity[k][j][yr] / ObseityClassA_total_count60_64_comorbidity[k][yr];
                                        }
                                        if (ObseityClassB_total_count60_64_comorbidity[k][yr] == 0) {
                                            ObseityClassB_Proportions64_comorbidity[k][yr] = 0;
                                        } else {
                                            ObseityClassB_Proportions64_comorbidity[k][yr] = ObseityClassB_Count_comorbidity[k][j][yr] / ObseityClassB_total_count60_64_comorbidity[k][yr];
                                        }
                                        if (ObseityClassC_total_count60_64_comorbidity[k][yr] == 0) {
                                            ObseityClassC_Proportions64_comorbidity[k][yr] = 0;
                                        } else {
                                            ObseityClassC_Proportions64_comorbidity[k][yr] = ObseityClassC_Count_comorbidity[k][j][yr] / ObseityClassC_total_count60_64_comorbidity[k][yr];
                                        }
                                        if (ObseityClassD_total_count60_64_comorbidity[k][yr] == 0) {
                                            ObseityClassD_Proportions64_comorbidity[k][yr] = 0;
                                        } else {
                                            ObseityClassD_Proportions64_comorbidity[k][yr] = ObseityClassD_Count_comorbidity[k][j][yr] / ObseityClassD_total_count60_64_comorbidity[k][yr];
                                        }

                                    }
                                }

                            }
                            // console.log('ObseityClassA_BL_proportions_29_comorbidity',ObseityClassA_BL_proportions_29_comorbidity[1])
                            // console.log('ObseityClassA_Proportions29_comorbidity',ObseityClassA_Proportions29_comorbidity[1][1])
                            // console.log('ObseityClassA_Proportions29_comorbidity',ObseityClassA_Proportions29_comorbidity[1][2])
                            // console.log('ObseityClassA_Proportions29_comorbidity',ObseityClassA_Proportions29_comorbidity[1][3])
                            // console.log('ObseityClassA_Proportions29_comorbidity',ObseityClassA_Proportions29_comorbidity[1][4])
                            // console.log('ObseityClassA_Proportions29_comorbidity',ObseityClassA_Proportions29_comorbidity[1][5])
                            // console.log('ObseityClassA_Proportions29_comorbidity',ObseityClassA_Proportions29_comorbidity[1][6])
                            // console.log('ObseityClassA_Proportions29_comorbidity',ObseityClassA_Proportions29_comorbidity[1][7])
                            // console.log('ObseityClassA_Proportions29_comorbidity',ObseityClassA_Proportions29_comorbidity[1][8])
                            // console.log('ObseityClassA_Proportions29_comorbidity',ObseityClassA_Proportions29_comorbidity[1][9])
                            // console.log('ObseityClassA_Proportions29_comorbidity',ObseityClassA_Proportions29_comorbidity[1][10])
                            // console.log('ObseityClassA_Count_comorbidity',ObseityClassA_Count_comorbidity[1][29][1])
                            // console.log('year1')
                            // console.log('ObseityClassA_total_count18_29_comorbidity',ObseityClassA_total_count18_29_comorbidity[1][1])
                            // console.log('ObseityClassA_total_count30_39_comorbidity',ObseityClassA_total_count30_39_comorbidity[1][1])
                            // console.log('ObseityClassA_total_count40_49_comorbidity',ObseityClassA_total_count40_49_comorbidity[1][1])
                            // console.log('ObseityClassA_total_count50_59_comorbidity',ObseityClassA_total_count50_59_comorbidity[1][1])
                            // console.log('ObseityClassA_total_count60_64_comorbidity',ObseityClassA_total_count60_64_comorbidity[1][1])

                            // console.log('year2')
                            // console.log('ObseityClassA_total_count18_29_comorbidity',ObseityClassA_total_count18_29_comorbidity[1][2])
                            // console.log('ObseityClassA_total_count30_39_comorbidity',ObseityClassA_total_count30_39_comorbidity[1][2])
                            // console.log('ObseityClassA_total_count40_49_comorbidity',ObseityClassA_total_count40_49_comorbidity[1][2])
                            // console.log('ObseityClassA_total_count50_59_comorbidity',ObseityClassA_total_count50_59_comorbidity[1][2])
                            // console.log('ObseityClassA_total_count60_64_comorbidity',ObseityClassA_total_count60_64_comorbidity[1][2])

                            // console.log('year3')
                            // console.log('ObseityClassA_total_count18_29_comorbidity',ObseityClassA_total_count18_29_comorbidity[1][3])
                            // console.log('ObseityClassA_total_count30_39_comorbidity',ObseityClassA_total_count30_39_comorbidity[1][3])
                            // console.log('ObseityClassA_total_count40_49_comorbidity',ObseityClassA_total_count40_49_comorbidity[1][3])
                            // console.log('ObseityClassA_total_count50_59_comorbidity',ObseityClassA_total_count50_59_comorbidity[1][3])
                            // console.log('ObseityClassA_total_count60_64_comorbidity',ObseityClassA_total_count60_64_comorbidity[1][3])

                            // console.log('year4')
                            // console.log('ObseityClassA_total_count18_29_comorbidity',ObseityClassA_total_count18_29_comorbidity[1][4])
                            // console.log('ObseityClassA_total_count30_39_comorbidity',ObseityClassA_total_count30_39_comorbidity[1][4])
                            // console.log('ObseityClassA_total_count40_49_comorbidity',ObseityClassA_total_count40_49_comorbidity[1][4])
                            // console.log('ObseityClassA_total_count50_59_comorbidity',ObseityClassA_total_count50_59_comorbidity[1][4])
                            // console.log('ObseityClassA_total_count60_64_comorbidity',ObseityClassA_total_count60_64_comorbidity[1][4])

                            // console.log('year5')
                            // console.log('ObseityClassA_total_count18_29_comorbidity',ObseityClassA_total_count18_29_comorbidity[1][5])
                            // console.log('ObseityClassA_total_count30_39_comorbidity',ObseityClassA_total_count30_39_comorbidity[1][5])
                            // console.log('ObseityClassA_total_count40_49_comorbidity',ObseityClassA_total_count40_49_comorbidity[1][5])
                            // console.log('ObseityClassA_total_count50_59_comorbidity',ObseityClassA_total_count50_59_comorbidity[1][5])
                            // console.log('ObseityClassA_total_count60_64_comorbidity',ObseityClassA_total_count60_64_comorbidity[1][5])

                            // console.log('year6')
                            // console.log('ObseityClassA_total_count18_29_comorbidity',ObseityClassA_total_count18_29_comorbidity[1][6])
                            // console.log('ObseityClassA_total_count30_39_comorbidity',ObseityClassA_total_count30_39_comorbidity[1][6])
                            // console.log('ObseityClassA_total_count40_49_comorbidity',ObseityClassA_total_count40_49_comorbidity[1][6])
                            // console.log('ObseityClassA_total_count50_59_comorbidity',ObseityClassA_total_count50_59_comorbidity[1][6])
                            // console.log('ObseityClassA_total_count60_64_comorbidity',ObseityClassA_total_count60_64_comorbidity[1][6])

                            // console.log('year7')
                            // console.log('ObseityClassA_total_count18_29_comorbidity',ObseityClassA_total_count18_29_comorbidity[1][7])
                            // console.log('ObseityClassA_total_count30_39_comorbidity',ObseityClassA_total_count30_39_comorbidity[1][7])
                            // console.log('ObseityClassA_total_count40_49_comorbidity',ObseityClassA_total_count40_49_comorbidity[1][7])
                            // console.log('ObseityClassA_total_count50_59_comorbidity',ObseityClassA_total_count50_59_comorbidity[1][7])
                            // console.log('ObseityClassA_total_count60_64_comorbidity',ObseityClassA_total_count60_64_comorbidity[1][7])

                            // console.log('year8')
                            // console.log('ObseityClassA_total_count18_29_comorbidity',ObseityClassA_total_count18_29_comorbidity[1][8])
                            // console.log('ObseityClassA_total_count30_39_comorbidity',ObseityClassA_total_count30_39_comorbidity[1][8])
                            // console.log('ObseityClassA_total_count40_49_comorbidity',ObseityClassA_total_count40_49_comorbidity[1][8])
                            // console.log('ObseityClassA_total_count50_59_comorbidity',ObseityClassA_total_count50_59_comorbidity[1][8])
                            // console.log('ObseityClassA_total_count60_64_comorbidity',ObseityClassA_total_count60_64_comorbidity[1][8])

                            // console.log('year9')
                            // console.log('ObseityClassA_total_count18_29_comorbidity',ObseityClassA_total_count18_29_comorbidity[1][9])
                            // console.log('ObseityClassA_total_count30_39_comorbidity',ObseityClassA_total_count30_39_comorbidity[1][9])
                            // console.log('ObseityClassA_total_count40_49_comorbidity',ObseityClassA_total_count40_49_comorbidity[1][9])
                            // console.log('ObseityClassA_total_count50_59_comorbidity',ObseityClassA_total_count50_59_comorbidity[1][9])
                            // console.log('ObseityClassA_total_count60_64_comorbidity',ObseityClassA_total_count60_64_comorbidity[1][9])

                            // console.log('year10')
                            // console.log('ObseityClassA_total_count18_29_comorbidity',ObseityClassA_total_count18_29_comorbidity[1][10])
                            // console.log('ObseityClassA_total_count30_39_comorbidity',ObseityClassA_total_count30_39_comorbidity[1][10])
                            // console.log('ObseityClassA_total_count40_49_comorbidity',ObseityClassA_total_count40_49_comorbidity[1][10])
                            // console.log('ObseityClassA_total_count50_59_comorbidity',ObseityClassA_total_count50_59_comorbidity[1][10])
                            // console.log('ObseityClassA_total_count60_64_comorbidity',ObseityClassA_total_count60_64_comorbidity[1][10])

                        }


                    } else {
                        var Baseline18_29 = 0;
                        var Baseline30_39 = 0;
                        var Baseline40_49 = 0;
                        var Baseline50_59 = 0;
                        var Baseline60_64 = 0;
                    }


                    // return [,year1Proportions29,year1Proportions39,year1Proportions49,year1Proportions59,year1Proportions64,year2Proportions29,year2Proportions39,year2Proportions49,year2Proportions59,year2Proportions64,year3Proportions29,year3Proportions39,year3Proportions49,year3Proportions59,year3Proportions64,year4Proportions29,year4Proportions39,year4Proportions49,year4Proportions59,year4Proportions64,year5Proportions29,year5Proportions39,year5Proportions49,year5Proportions59,year5Proportions64,year6Proportions29,year6Proportions39,year6Proportions49,year6Proportions59,year6Proportions64,year7Proportions29,year7Proportions39,year7Proportions49,year7Proportions59,year7Proportions64,year8Proportions29,year8Proportions39,year8Proportions49,year8Proportions59,year8Proportions64,year9Proportions29,year9Proportions39,year9Proportions49,year9Proportions59,year9Proportions64,year10Proportions29,year10Proportions39,year10Proportions49,year10Proportions59,year10Proportions64];

                    // console.log(ObseityClassA_Proportions29_comorbidity)
                    // console.log(ObseityClassA_Proportions39_comorbidity)
                    // console.log(ObseityClassA_Proportions49_comorbidity)
                    // console.log(ObseityClassA_Proportions59_comorbidity)
                    // console.log(ObseityClassA_Proportions64_comorbidity)

                    return [ObseityClassA_BL_proportions_29_comorbidity, ObseityClassA_BL_proportions_39_comorbidity, ObseityClassA_BL_proportions_49_comorbidity, ObseityClassA_BL_proportions_59_comorbidity, ObseityClassA_BL_proportions_64_comorbidity, ObseityClassB_BL_proportions_29_comorbidity, ObseityClassB_BL_proportions_39_comorbidity, ObseityClassB_BL_proportions_49_comorbidity, ObseityClassB_BL_proportions_59_comorbidity, ObseityClassB_BL_proportions_64_comorbidity, ObseityClassC_BL_proportions_29_comorbidity, ObseityClassC_BL_proportions_39_comorbidity, ObseityClassC_BL_proportions_49_comorbidity, ObseityClassC_BL_proportions_59_comorbidity, ObseityClassC_BL_proportions_64_comorbidity, ObseityClassD_BL_proportions_29_comorbidity, ObseityClassD_BL_proportions_39_comorbidity, ObseityClassD_BL_proportions_49_comorbidity, ObseityClassD_BL_proportions_59_comorbidity, ObseityClassD_BL_proportions_64_comorbidity, ObseityClassA_Proportions29_comorbidity, ObseityClassA_Proportions39_comorbidity, ObseityClassA_Proportions49_comorbidity, ObseityClassA_Proportions59_comorbidity, ObseityClassA_Proportions64_comorbidity, ObseityClassB_Proportions29_comorbidity, ObseityClassB_Proportions39_comorbidity, ObseityClassB_Proportions49_comorbidity, ObseityClassB_Proportions59_comorbidity, ObseityClassB_Proportions64_comorbidity, ObseityClassC_Proportions29_comorbidity, ObseityClassC_Proportions39_comorbidity, ObseityClassC_Proportions49_comorbidity, ObseityClassC_Proportions59_comorbidity, ObseityClassC_Proportions64_comorbidity, ObseityClassD_Proportions29_comorbidity, ObseityClassD_Proportions39_comorbidity, ObseityClassD_Proportions49_comorbidity, ObseityClassD_Proportions59_comorbidity, ObseityClassD_Proportions64_comorbidity]

                }


                exportProportions(myParams);












    // When user clicks Calculate button, run loop for results data, then display Results page
    function calculateResults(myParams, totalCostsTable) {
       userInputData = getUserInputs();
       formattedUserInputData = inputFormatter();
        showLoadingModal();

        setTimeout( () => {
            [ currentROITables, currentDistributionTables ] = runResultsLoop(myParams, totalCostsTable);
            currentEventsTables = buildEventsTables(currentDistributionTables);
        
            console.log('currentROITables', currentROITables);
            console.log('currentDistributionTables', currentDistributionTables);
            console.log('currentEventsTables', currentEventsTables);
    
            myResults(myParams);
            hideLoadingModal();
        }, 500)

    }

    







    function detailedResults(myParams) {
                     // Geoff's loop starts

        // const myParamsCopy = {...myParams};
        // const totalCostsCopy = {...totalCostsTable};


        // const obesityClasses = [
        //     "Overweight and obesity (I, II, and III)",
        //     // "Obesity classes I, II and III",
        //     // "Obesity classes II and III", 
        //     "Obesity class III"
        // ];

        // const POIValues = [
        //     "People with overweight/ obesity", 
        //     "People with obesity",
        //     "Cardiovascular diseases",
        //     // "Cerebrovascular diseases", 
        //     // "Dyslipidemia", 
        //     // "Hypertension", 
        //     // "Osteoarthritis", 
        //     // "Diabetes",
        //     // "Cardiovascular diseases (with cerebrovascular diseases)",
        //     // "Any cardiometabolic disease*",
        //     // "Cardiovascular diseases (with dyslipidemia)",
        //     // "Cardiovascular diseases (with hypertension)",
        //     // "Cardiovascular diseases (with diabetes)",
        //     // "Osteoarthritis (with cardiovascular diseases)",
        //     "Osteoarthritis (with diabetes)"
        // ];

        // const ROITables = {};
        // const distributionTables = {};
        
        // console.time('roi time')
        // const starting = new Date();
        // console.log('starting', starting.toUTCString());

        // obesityClasses.forEach(obesityClass => {
        //     ROITables[obesityClass] = {};
        //     distributionTables[obesityClass] = {};
        //     POIValues.forEach(POIValue => {
        //         console.log(`running: ${obesityClass} - ${POIValue}`);
      
        //         const [ currentDistributionTable, detailed, totals ] = detailedResultsLoop(myParamsCopy, totalCostsCopy, POIValue, obesityClass);

        //         ROITables[obesityClass][POIValue] = {detailed, totals};
        //         distributionTables[obesityClass][POIValue] = currentDistributionTable;
        //     });
        // });

        // console.timeEnd('roi time');
        // const ending = new Date();
        // console.log('ending', ending.toUTCString());

        // // Assign to global variables for later access
        // currentROITables = ROITables;
        // currentDistributionTables = distributionTables;
        // currentEventsTables = buildEventsTables(currentDistributionTables);
        
        // console.log('currentROITables', currentROITables);
        // console.log('currentDistributionTables', currentDistributionTables);
        // console.log('currentEventsTables', currentEventsTables);
        
  


     
        // Geoff's loop ends

                    // var temptemp = exportProportions(myPOIValue,myParams)[1][1];

                    // console.log(temptemp)
                    // console.log("===============================================")

                    $(".container").removeClass().addClass("container detailedResults");

                    
                    var selectedPOI1;



                    if (inputDashboard.Obesity_Class) {
                        var myObesityClass = inputDashboard.Obesity_Class.value;
                    } else {
                        var myObesityClass = "Overweight and obesity (I, II, and III)";
                    }

                    if (inputDashboard.POI1) {
                        var myPOIValue = inputDashboard.POI1.value;
                        if ((myPOIValue === "People with overweight/ obesity") || (myPOIValue === "People with obesity")) {
                            if (myObesityClass === "Overweight and obesity (I, II, and III)") {
                                var myPOIValue = "People with overweight/ obesity";
                            } else {
                                var myPOIValue = "People with obesity";
                            }
                        } else {
                            var myPOIValue = inputDashboard.POI1.value;
                        }
                    } else {
                        if (myObesityClass === "Overweight and obesity (I, II, and III)") {
                            var myPOIValue = "People with overweight/ obesity";
                        } else {
                            var myPOIValue = "People with obesity";
                        }
                    }
                   



                    if (inputDashboard.Obesity_Class) {
                        selectedObesityClass = inputDashboard.Obesity_Class.value;
                    } else {
                        // selectedObesityClass = "Overweight and obesity (I, II, and III)";
                        selectedObesityClass = "Overweight and obesity (I, II, and III)";


                    }


                    




                    // console.log('txt18_29-7',myAges18To29);
                    //     console.log('txt30_39-7',myAges30To39);
                    //     console.log('txt40_49-7',myAges40To49);
                    //     console.log('txt50_59-7',myAges50To59);
                    //     console.log('txt60_64-7',myAges60To64);



                    var resultNavBar = '';
                    resultNavBar += '<div class="resultsPage_header"><div><img src="./res/img/icon-results.svg"/><h2>Detailed Results</h2></div>' +
                        '<div class="resultsPage_pageNav"><a href="#" onClick="toShowSummaryResult(myParams,currentROITables,currentDistributionTables,currentEventsTables);">Summary Results</a>' +
                        '<a href="#" onClick="eventBasedAnalysis();">Event-Based Analysis</a>' +
                        '<a href="#" class="resultsPage_active" onClick="detailedResults(myParams);">Detailed Results</a><a href="#" onClick="actions();">Actions</a>' +
                        '</div></div>';
                    resultNavBar += '<table>';
                    resultNavBar += '<tr>';
                    // resultNavBar +=  '<td colspan="5">AOM vs.: <select name="AOM_VS" onChange="detailedResults(myParams);">';
                    // GEOFF'S CHANGES BEGIN
                    resultNavBar += '<td colspan="5" class="results results-detailed">' +
                        '<div class="custom-select__container results AOM-vs">' +
                        'AOM vs.: ' +
                        '<div class="custom-select">' +
                        '<select name="AOM_VS" onChange="populateDetailedResults(currentROITables, myTimeHorizonValue);">';
                    // GEOFF'S CHANGES END


                    if (inputDashboard.AOM_VS) {
                        if (inputDashboard.AOM_VS.value == "No intervention") {
                            resultNavBar += '<option value="No intervention" selected>No intervention</option><optgroup class="divider"></optgroup>';
                        } else {
                            resultNavBar += '<option value="No intervention">No intervention</option><optgroup class="divider"></optgroup>';
                        }

                        if (inputDashboard.AOM_VS.value == "ILT") {
                            resultNavBar += '<option value="ILT" selected>ILT</option><optgroup class="divider"></optgroup>';
                        } else {
                            resultNavBar += '<option value="ILT">ILT</option><optgroup class="divider"></optgroup>';
                        }
                    } else {
                        resultNavBar += '<option value="No intervention">No intervention</option><optgroup class="divider"></optgroup>';
                        resultNavBar += '<option value="ILT">ILT</option><optgroup class="divider"></optgroup>';
                    }

                    // resultNavBar +=  '</select>&nbsp;&nbsp;Obesity class: <select name="Obesity_Class" onChange="detailedResults(myParams);"><optgroup class="divider"></optgroup>';

                    // GEOFF'S CHANGES BEGIN
                    resultNavBar += '</select></div><div class="custom-select__buffer"></div></div>' +
                        '<div class="custom-select__container results obesity">' +
                        // '&nbsp;&nbsp;View By: ' + 
                        'Obesity class: ' +
                        '<div class="custom-select">' +
                        '<select name="Obesity_Class" onChange="populateDetailedResults(currentROITables, myTimeHorizonValue);">';
                    // GEOFF'S CHANGES END

                    var i = 0;
                    for (let valObesity of Obesity_Class.data) {

                        if (inputDashboard.Obesity_Class) {
                            if (inputDashboard.Obesity_Class.value == valObesity.Name) {
                                //                        console.log()
                                resultNavBar += '<option value="' + valObesity.Name + '" selected>' + valObesity.ShortForm + '</option><optgroup class="divider"></optgroup>';
                            } else {
                                resultNavBar += '<option value="' + valObesity.Name + '">' + valObesity.ShortForm + '</option><optgroup class="divider"></optgroup>';
                            }
                        } else {

                            resultNavBar += '<option value="' + valObesity.Name + '">' + valObesity.ShortForm + '</option><optgroup class="divider"></optgroup>';

                        }

                    }

                    // resultNavBar +=  '</select>&nbsp;&nbsp;View By: <select name="View_By" onChange="detailedResults(myParams);">';
                    // GEOFF'S CHANGES BEGIN
                    resultNavBar += '</select></div><div class="custom-select__buffer"></div></div>' +
                        '<div class="custom-select__container results view-by">' +
                        // '&nbsp;&nbsp;View By: ' + 
                        'View By: ' +
                        '<div class="custom-select">' +
                        '<select name="View_By" onChange="populateDetailedResults(currentROITables, myTimeHorizonValue);">';
                    // GEOFF'S CHANGES END

                    if (inputDashboard.View_By) {
                        if (inputDashboard.View_By.value == "ROI") {
                            resultNavBar += '<option value="ROI" selected>ROI</option><optgroup class="divider"></optgroup>';
                        } else {
                            resultNavBar += '<option value="ROI">ROI</option><optgroup class="divider"></optgroup>';
                        }

                        if (inputDashboard.View_By.value == "ROI as % of investment") {
                            resultNavBar += '<option value="ROI as % of investment" selected>ROI as % of investment</option><optgroup class="divider"></optgroup>';
                        } else {
                            resultNavBar += '<option value="ROI as % of investment">ROI as % of investment</option><optgroup class="divider"></optgroup>';
                        }

                        //      if (inputDashboard.View_By.value=="Cost offset (population)") {
                        //            resultNavBar +=  '<option value="Cost offset (population)" selected>Cost offset (population)</option><optgroup class="divider"></optgroup>';
                        //        } else {
                        //            resultNavBar +=  '<option value="Cost offset (population)">Cost offset (population)</option><optgroup class="divider"></optgroup>';
                        //        }

                        //        if (inputDashboard.View_By.value=="Cost offset (per member)") {
                        //            resultNavBar +=  '<option value="Cost offset (per member)" selected>Cost offset (per member)</option><optgroup class="divider"></optgroup>';
                        //        } else {
                        //            resultNavBar +=  '<option value="Cost offset (per member)">Cost offset (per member)</option><optgroup class="divider"></optgroup>';
                        //        }

                        //        if (inputDashboard.View_By.value=="Cost offset (PMPM)") {
                        //            resultNavBar +=  '<option value="Cost offset (PMPM)" selected>Cost offset (PMPM)</option><optgroup class="divider"></optgroup>';
                        //        } else {
                        //            resultNavBar +=  '<option value="Cost offset (PMPM)">Cost offset (PMPM)</option><optgroup class="divider"></optgroup>';
                        //        }

                        //        if (inputDashboard.View_By.value=="Cost offset per treated patient per month (AOM vs. no intervention)") {
                        //            resultNavBar +=  '<option value="Cost offset per treated patient per month (AOM vs. no intervention)" selected>Cost offset per treated patient per month (AOM vs. no intervention)</option><optgroup class="divider"></optgroup>';
                        //        } else {
                        //            resultNavBar +=  '<option value="Cost offset per treated patient per month (AOM vs. no intervention)">Cost offset per treated patient per month (AOM vs. no intervention)</option><optgroup class="divider"></optgroup>';
                        //        }

                        //        if (inputDashboard.View_By.value=="Cost offset (PPPM)") {
                        //            resultNavBar +=  '<option value="Cost offset (PPPM)" selected>Cost offset (PPPM)</option><optgroup class="divider"></optgroup>';
                        //        } else {
                        //            resultNavBar +=  '<option value="Cost offset (PPPM)">Cost offset (PPPM)</option><optgroup class="divider"></optgroup>';
                        //        }
                    } else {
                        resultNavBar += '<option value="ROI">ROI</option><optgroup class="divider"></optgroup>';
                        resultNavBar += '<option value="ROI as % of investment">ROI as % of investment</option><optgroup class="divider"></optgroup>';
                        //        resultNavBar +=  '<option value="Cost offset (population)">Cost offset (population)</option><optgroup class="divider"></optgroup>';
                        //        resultNavBar +=  '<option value="Cost offset (per member)">Cost offset (per member)</option><optgroup class="divider"></optgroup>';
                        //        resultNavBar +=  '<option value="Cost offset (PMPM)">Cost offset (PMPM)</option><optgroup class="divider"></optgroup>';
                        //        resultNavBar +=  '<option value="Cost offset per treated patient per month (AOM vs. no intervention)">Cost offset per treated patient per month (AOM vs. no intervention)</option><optgroup class="divider"></optgroup>';
                        //        resultNavBar +=  '<option value="Cost offset (PPPM)">Cost offset (PPPM)</option><optgroup class="divider"></optgroup>';
                    }



                    // resultNavBar +=  '</select></td></tr>';
                    // resultNavBar +=  '<tr><td><div class="detailedResults_switchToggle" onClick="toggleTableSwitch()">' +
                    //     '<div class="toggleGraph"><svg viewBox="0 0 18 17" xmlns="http://www.w3.org/2000/svg"><path d="M12.8 16.2a.7.7 0 01-.7-.7V.9c0-.4.3-.7.7-.7h3.8c.4 0 .7.3.7.7v14.6c0 .4-.4.7-.7.7zm-5.6 0c-.4 0-.7-.3-.7-.6v-11c0-.2.3-.4.7-.4H11c.4 0 .7.2.7.5v11c0 .3-.4.5-.7.5zm-5.6 0c-.4 0-.7-.2-.7-.4V8.5c0-.2.3-.3.7-.3h3.8c.4 0 .7.1.7.3v7.3c0 .2-.4.4-.7.4z" fill-rule="nonzero"/></svg></div>' +
                    //     '<div class="toggleTable toggleActive"><svg viewBox="0 0 17 17" xmlns="http://www.w3.org/2000/svg"><path d="M.9 11.7c0-.4.3-.7.7-.7h14.6c.4 0 .7.3.7.7v3.6c0 .4-.3.7-.7.7H1.5a.7.7 0 01-.6-.6zm0-5.5c0-.4.3-.7.7-.7h14.6c.4 0 .7.3.7.7v3.7c0 .4-.3.7-.7.7H1.5a.7.7 0 01-.6-.7zM.9.7c0-.4.3-.7.7-.7h14.6c.4 0 .7.3.7.7v3.7c0 .4-.3.7-.7.7H1.5a.7.7 0 01-.6-.7z" /></svg></div>' +
                    //     '</div></td>';
                    // GEOFF'S CHANGES BEGIN
                    resultNavBar += '</select></div><div class="custom-select__buffer"></div></div></td>';
                    resultNavBar += '<td class="switchToggle__container"><div class="detailedResults_switchToggle" onClick="toggleTableSwitch()">' +
                        '<div class="toggleGraph toggleActive"><svg viewBox="0 0 18 17" xmlns="http://www.w3.org/2000/svg"><path d="M12.8 16.2a.7.7 0 01-.7-.7V.9c0-.4.3-.7.7-.7h3.8c.4 0 .7.3.7.7v14.6c0 .4-.4.7-.7.7zm-5.6 0c-.4 0-.7-.3-.7-.6v-11c0-.2.3-.4.7-.4H11c.4 0 .7.2.7.5v11c0 .3-.4.5-.7.5zm-5.6 0c-.4 0-.7-.2-.7-.4V8.5c0-.2.3-.3.7-.3h3.8c.4 0 .7.1.7.3v7.3c0 .2-.4.4-.7.4z" fill-rule="nonzero"/></svg></div>' +
                        '<div class="toggleTable"><svg viewBox="0 0 17 17" xmlns="http://www.w3.org/2000/svg"><path d="M.9 11.7c0-.4.3-.7.7-.7h14.6c.4 0 .7.3.7.7v3.6c0 .4-.3.7-.7.7H1.5a.7.7 0 01-.6-.6zm0-5.5c0-.4.3-.7.7-.7h14.6c.4 0 .7.3.7.7v3.7c0 .4-.3.7-.7.7H1.5a.7.7 0 01-.6-.7zM.9.7c0-.4.3-.7.7-.7h14.6c.4 0 .7.3.7.7v3.7c0 .4-.3.7-.7.7H1.5a.7.7 0 01-.6-.7z" /></svg></div>' +
                        '</div></td>';

                    // GEOFF'S CHANGES END


                    resultNavBar += '</tr>';

                    resultNavBar += '<tr class="detailedResults_tableNote_row"><td><div class="detailedResults_tableNote">*All refers to overweight and obesity classes I, II, and III</div></td></tr>';
                    
                    resultNavBar += '</table>';
                    document.getElementById("MyNavbar").innerHTML = resultNavBar;




                    let txtArr = [];

                    txtArr.push('<table border="0">');
                    txtArr.push('<tr>');
                    txtArr.push('<td valign="top" class="detailedResults_td_padding">');
                    txtArr.push('<div>');
                    txtArr.push('<div class="detailedResults_subTitle"><b>Population of Interest</b></div>');
                    txtArr.push('<div><div class="custom-select population resizable detailedResults_select"><select name="POI1" onChange="populateDetailedResults(currentROITables, myTimeHorizonValue);">');



                    //        console.log(inputDashboard.AOM_VS.value);
                    //        console.log(inputDashboard.Obesity_Class.value);
                    //        console.log(inputDashboard.View_By.value);


                    for (let val of ROI1.data) {
                        if ((val.Obesity_Class === inputDashboard.Obesity_Class.value) && (val.Industry == myDisplayIndustry)) {
                            if (inputDashboard.POI1) {
                                if (val.Population_of_Interest === inputDashboard.POI1.value) {
                                    txtArr.push('<option value="' + val.Population_of_Interest + '" selected>' + val.Population_of_Interest + '</option>');
                                } else {
                                    txtArr.push('<option value="' + val.Population_of_Interest + '">' + val.Population_of_Interest + '</option>');
                                }
                            } else {
                                txtArr.push('<option value="' + val.Population_of_Interest + '">' + val.Population_of_Interest + '</option>');
                            }

                        }
                    }
                    console.log('POI: ' + myPOIValue);

                    if ((myObesityClass) && (myPOIValue)) {
                        for (let val of ROI1.data) {
                            if ((val.Population_of_Interest == myPOIValue) && (val.Obesity_Class == myObesityClass) && (val.Industry == myDisplayIndustry)) {
                                var tempPop_number = val.Pop_number;
                                //                    console.log('case 0');
                                //                    console.log('class: '+myObesityClass);
                            }
                        }
                    }

                    // var myPOI1 = ((populationValue / 10000) * tempPop_number);
                    // myPOI1 = myPOI1.toFixed(0);
                    // var myPOI1commas = myPOI1.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");

                    txtArr.push('</select></div><br /><br />');
                    txtArr.push('<p class="detailedResults_population" id="rcorners2"><img src="./res/img/poi.jpg"><span class="detailedResults_population_A"></span></p>');
                    // txtArr.push('<p class="detailedResults_population" id="rcorners2"><img src="./res/img/poi.jpg"><span class="detailedResults_population_A">' + myPOI1commas + '</span></p>');




                    let txt = txtArr;


    txtArr.push('</div>');
        txtArr.push('</div>');
        txtArr.push('</td>');
        txtArr.push('<td valign="top" class="detailedResults_td_padding">');
            txtArr.push('<div class="table-container">');
                txtArr.push('<div class="table-content">');
                    txtArr.push('<div class="table-holder detailedResults_tableHolder tableHolder resultHidden">');

            txtArr.push('<table border="0" class="detailedResultsTable">');
            txtArr.push('<tr>');
            txtArr.push('<th></th>');
            txtArr.push('<th>AOM </th>');

            txtArr.push('<th id="interventionHeading_A"></th>');
            txtArr.push('<th>Investment</th>');
            txtArr.push('<th>Savings</th>');
            txtArr.push('<th>Cost offsets</th>');
            txtArr.push('</tr>');
            txtArr.push('<tr>');
            txtArr.push('<td class="detailedResultsTable_mainRow">Intervention costs</td>');

            txtArr.push('<td id="investmentCostsAOM_A">');



             
        document.getElementById("myInput2").innerHTML = "";
        console.log("myInput2 cleared : line 24255");
        document.getElementById("myInput").innerHTML = txt.join("");

        txtArr.push('</td>');

        txtArr.push('<td id="investmentCostsIntervention_A"></td>')
        txtArr.push('<td id="myInvestment_A"></td>');
        txtArr.push('<td>&nbsp;</td>');
        txtArr.push('<td>&nbsp;</td>');
        txtArr.push('</tr>');
        txtArr.push('<tr>');
        txtArr.push('<td><b>Total direct and indirect costs</b></td>');
        txtArr.push('<td><div id="totalDirectAndIndirectCosts_AOM_A"></div></td>');
        txtArr.push('<td><div id="totalDirectAndIndirectCostsIntervention_A"></div></td>');
        txtArr.push('<td><div id="totalDirectAndIndirectCosts_Investment_A">&nbsp;</div></td>');
        txtArr.push('<td><div id="totalDirectAndIndirectCosts_Savings_A"></div></td>');
        txtArr.push('<td><div id="totalDirectAndIndirectCosts_CostOffsets_A"></div></td>');
        txtArr.push('</tr>');
        txtArr.push('<tr>');
        txtArr.push('<td><dd>Medical service costs</dd></td>');

        txtArr.push('<td><div id="medicalServiceCosts_AOM_A"></div></td>');

        
        txtArr.push('<td><div id="medicalServiceCostsIntervention_A"></div></td>');

        txtArr.push('<td><div id="medicalServiceCosts_Investment_A">&nbsp;</div></td>');
        txtArr.push('<td><div id="medicalServiceCosts_Savings_A"></div></td>');
        txtArr.push('<td><div id="medicalServiceCosts_CostOffsets_A">&nbsp;</div></td>');
        txtArr.push('</tr>');
        txtArr.push('<tr>');
        txtArr.push('<td><dd>Pharmacy costs (excluding AOM)</dd></td>');
        txtArr.push('<td><div id="pharmacyCosts_AOM_A"></div></td>');

        txtArr.push('<td><div id="pharmacyCostsIntervention_A"></div></td>');

        txtArr.push('<td><div id="pharmacyCosts_Investment_A">&nbsp;</div></td>');
        txtArr.push('<td><div id="pharmacyCosts_Savings_A"></div></td>');
        txtArr.push('<td><div id="pharmacyCosts_CostOffsets_A">&nbsp;</div></td>');
        txtArr.push('</tr>');
        txtArr.push('<tr>');
        txtArr.push('<td><dd>Absenteeism</dd></td>');
        txtArr.push('<td><div id="absenteeism_AOM_A"></div></td>');

        txtArr.push('<td><div id="absenteeismIntervention_A"></div></td>');

        txtArr.push('<td><div id="absenteeism_Investment_A">&nbsp;</div></td>');
        txtArr.push('<td><div id="absenteeism_Savings_A"></div></td>');
        txtArr.push('<td><div id="absenteeism_CostOffsets_A">&nbsp;</div></td>');
        txtArr.push('</tr>');
        txtArr.push('<tr>');
        txtArr.push('<td><dd>Presenteeism</dd></td>');
        txtArr.push('<td><div id="presenteeism_AOM_A"></div></td>');

        txtArr.push('<td><div id="presenteeismIntervention_A"></div></td>');

        txtArr.push('<td><div id="presenteeism_Investment_A">&nbsp;</div></td>');
        txtArr.push('<td><div id="presenteeism_Savings_A"></div></td>');
        txtArr.push('<td><div id="presenteeism_CostOffsets_A">&nbsp;</div></td>');
        txtArr.push('</tr>');
        txtArr.push('<tr>');
        txtArr.push('<td><dd>Workers\' compensation</dd></td>');
        txtArr.push('<td><div id="workersCompensation_AOM_A"></div></td>');

        txtArr.push('<td><div id="workersCompensationIntervention_A"></div></td>');

        txtArr.push('<td><div id="workersCompensation_Investment_A">&nbsp;</div></td>');
        txtArr.push('<td><div id="workersCompensation_Savings_A"></div></td>');
        txtArr.push('<td><div id="workersCompensation_CostOffsets_A">&nbsp;</div></td>');
        txtArr.push('</tr>');
        txtArr.push('<tr>');
        txtArr.push('<td><dd>Short-term and long-term disability</dd></td>');
        txtArr.push('<td><div id="STAndLTDisability_AOM_A"></div></td>');

        txtArr.push('<td><div id="STAndLTDisabilityIntervention_A"></div></td>');

        txtArr.push('<td><div id="STAndLTDisability_Investment_A">&nbsp;</div></td>');
        txtArr.push('<td><div id="STAndLTDisability_Savings_A"></div></td>');
        txtArr.push('<td><div id="STAndLTDisability_CostOffsets">&nbsp;</div></td>');
        txtArr.push('</tr>');
        txtArr.push('</table>');

        txtArr.push('<div class="detailedResultsTable_roi">' 
                        + '<div class="ROI-display_text"></div>'
                        + '<div class="ROI-display_value ROI-display_value_A"></div>'
                    + '</div>')
        txtArr.push('</div>');
        txtArr.push('</div>');
        txtArr.push('</div>');


        txtArr.push('</td>');


        txtArr.push()

        txtArr.push('</tr>');
        txtArr.push('</table><p></p>');
            
        document.getElementById("myInput").innerHTML = txt.join("");
        // myInput2 will be identical except for element ID's ending in "_B" rather than "_A"
        document.getElementById("myInput2").innerHTML = txt.join("").replace(/_A"/g, '_B"');
        document.getElementById("myInput2").classList.add('myInput-border');
        //console.log("myInput2 populated : line 24452 : "+ document.getElementById("myInput2").innerHTML);
        

        const graphA ="<div class='detailedResults_graphHolder graphHolder'>" 
                        
                        + "<div>" 
                            + "<div id='NI_ChartHolder_A' class='Gplaceholder'></div>" 
                            + "<div class='ROI-display'>" 
                                + "<div class='ROI-display_text'></div>"
                                + "<div class='ROI-display_value ROI-display_value_A' data-intervention='NI'></div>"
                            + "</div>"
                        + "</div>" 

                        + "<div>" 
                            + "<div id='ILT_ChartHolder_A' class='Gplaceholder'></div>"
                            + "<div class='ROI-display'>" 
                                + "<div class='ROI-display_text'></div>"
                                + "<div class='ROI-display_value ROI-display_value_A' data-intervention='ILT'></div>"
                            + "</div>"
                        + "</div>"
                        
                        + "<div class='chart-legend'>"
                            + "<h4>Legend</h4>"
                            + "<ul>"
                                + "<li class='chart-purple'>Investment</li>"
                                + "<li class='chart-grey'>Savings</li>"
                                + "<li class='chart-green'>ROI = Savings/Investment</li>"
                            + "</ul>"
                        + "</div>"

                    + "</div>"

        const graphB ="<div class='detailedResults_graphHolder graphHolder'>" 
                        
                        + "<div>" 
                            + "<div id='NI_ChartHolder_B' class='Gplaceholder'></div>" 
                            + "<div class='ROI-display'>" 
                                + "<div class='ROI-display_text'></div>"
                                + "<div class='ROI-display_value ROI-display_value_B' data-intervention='NI'></div>"
                            + "</div>"
                        + "</div>" 

                        + "<div>" 
                            + "<div id='ILT_ChartHolder_B' class='Gplaceholder'></div>"
                            + "<div class='ROI-display'>" 
                                + "<div class='ROI-display_text'></div>"
                                + "<div class='ROI-display_value ROI-display_value_B' data-intervention='ILT'></div>"
                            + "</div>"
                        + "</div>"

                        + "<div class='chart-legend'>"
                            + "<h4>Legend</h4>"
                            + "<ul>"
                                + "<li class='chart-purple'>Investment</li>"
                                + "<li class='chart-grey'>Savings</li>"
                                + "<li class='chart-green'>ROI = Savings/Investment</li>"
                            + "</ul>"
                        + "</div>"

                    + "</div>"

        const graphs = [graphA, graphB];

        $(".table-content").each(function(index) {
            $(this).append(graphs[index]);
        })

        // $(".table-content").append(A);


        buildCustomSelect(); 
        populateDetailedResults(currentROITables, myTimeHorizonValue); // Important that this function is called AFTER buildCustomSelect
                    // GEOFF: adding dummy tables for chart data
                    // const table1 = buildTable1();
                    // const table3 = buildTable3(table1);

                    // getSummaryData(table3, 'noInterventionChartHolder', myTimeHorizonValue)
                }
                // Copy here













                function updatePOI2() {


                    if (inputDashboard.Obesity_Class) {
                        var myObesityClass = inputDashboard.Obesity_Class.value;
                    } else {
                        var myObesityClass = "Overweight and obesity (I, II, and III)";
                    }

                    if (inputDashboard.POI2) {
                        var myPOI2Value = inputDashboard.POI2.value;
                        if ((myPOI2Value === "People with overweight/ obesity") || (myPOI2Value === "People with obesity")) {
                            if (myObesityClass === "Overweight and obesity (I, II, and III)") {
                                var myPOI2Value = "People with overweight/ obesity";
                            } else {
                                var myPOI2Value = "People with obesity";
                            }
                        } else {
                            var myPOI2Value = inputDashboard.POI2.value;
                        }
                    } else {
                        if (myObesityClass === "Overweight and obesity (I, II, and III)") {
                            var myPOI2Value = "People with overweight/ obesity";
                        } else {
                            var myPOI2Value = "People with obesity";
                        }
                    }

                    var myPopCount1;
                    var POI2PopCount2;
                    var POI2PopCount3;
                    var POI2PopCount4;
                    var POI2PopCount5;
                    for (let val of Prevalence.data) {
                        if (val.Comorbidity == myPOI2Value) {
                            POI2PopCount1 = val.Age18_29;
                            POI2PopCount2 = val.Age30_39;
                            POI2PopCount3 = val.Age40_49;
                            POI2PopCount4 = val.Age50_59;
                            POI2PopCount5 = val.Age60_64;
                            POI2Prevalence1 = myAges18To29 * 100 * POI2PopCount1;
                            POI2Prevalence2 = myAges30To39 * 100 * POI2PopCount2;
                            POI2Prevalence3 = myAges40To49 * 100 * POI2PopCount3;
                            POI2Prevalence4 = myAges50To59 * 100 * POI2PopCount4;
                            POI2Prevalence5 = myAges60To64 * 100 * POI2PopCount5;



                        }
                    }

                    console.log('myObesityClass', myObesityClass);
                    console.log('POI2Prevalence1', POI2Prevalence1);
                    console.log('POI2Prevalence2', POI2Prevalence2);
                    console.log('POI2Prevalence3', POI2Prevalence3);
                    console.log('POI2Prevalence4', POI2Prevalence4);
                    console.log('POI2Prevalence5', POI2Prevalence5);


                }











                function fillActionsTableNI(myYearHorizon, myClass, myPopulationOfInterest,currentROITables) {
                    var mySymbol = "rien";
                    myYearHorizon = parseInt(myYearHorizon);

                    console.log('currentROITables', currentROITables);

                    if (Object.keys(currentROITables).length != 0) {
                        for (var myTempClass in currentROITables) {
                            for (var myTempPOI in currentROITables[myTempClass]) {
                                for (var myTempYear in currentROITables[myTempClass][myTempPOI].totals.savings.NI) {
                                    switch (myYearHorizon) {
                                        case 1:
                                            if ((myTempClass == myClass) && (myTempPOI == myPopulationOfInterest) && ((currentROITables[myTempClass][myTempPOI].totals.costOffsets_perMember.NI.Year1) >= 0)) {
                                                mySymbol = "checked";
                                            }
                                            break;

                                        
                                        case 2:
                                            if ((myTempClass == myClass) && (myTempPOI == myPopulationOfInterest) && ((currentROITables[myTempClass][myTempPOI].totals.costOffsets_perMember.NI.Year2) >= 0)) {
                                                mySymbol = "checked";
                                            }
                                            break;

                                        case 3:
                                            if ((myTempClass == myClass) && (myTempPOI == myPopulationOfInterest) && ((currentROITables[myTempClass][myTempPOI].totals.costOffsets_perMember.NI.Year3) >= 0)) {
                                                mySymbol = "checked";
                                            }
                                            break;

                                        case 4:
                                            if ((myTempClass == myClass) && (myTempPOI == myPopulationOfInterest) && ((currentROITables[myTempClass][myTempPOI].totals.costOffsets_perMember.NI.Year4) >= 0)) {
                                                mySymbol = "checked";
                                            }
                                            break;

                                        case 5:
                                            if ((myTempClass == myClass) && (myTempPOI == myPopulationOfInterest) && ((currentROITables[myTempClass][myTempPOI].totals.costOffsets_perMember.NI.Year5) >= 0)) {
                                                mySymbol = "checked";
                                            }
                                            break;

                                        case 6:
                                            if ((myTempClass == myClass) && (myTempPOI == myPopulationOfInterest) && ((currentROITables[myTempClass][myTempPOI].totals.costOffsets_perMember.NI.Year6) >= 0)) {
                                                mySymbol = "checked";
                                            }
                                            break;

                                        case 7:
                                            if ((myTempClass == myClass) && (myTempPOI == myPopulationOfInterest) && ((currentROITables[myTempClass][myTempPOI].totals.costOffsets_perMember.NI.Year7) >= 0)) {
                                                mySymbol = "checked";
                                            }
                                            break;

                                        case 8:
                                            if ((myTempClass == myClass) && (myTempPOI == myPopulationOfInterest) && ((currentROITables[myTempClass][myTempPOI].totals.costOffsets_perMember.NI.Year8) >= 0)) {
                                                mySymbol = "checked";
                                            }
                                            break;

                                        case 9:
                                            if ((myTempClass == myClass) && (myTempPOI == myPopulationOfInterest) && ((currentROITables[myTempClass][myTempPOI].totals.costOffsets_perMember.NI.Year9) >= 0)) {
                                                mySymbol = "checked";
                                            }
                                            break;

                                        case 10:
                                            if ((myTempClass == myClass) && (myTempPOI == myPopulationOfInterest) && ((currentROITables[myTempClass][myTempPOI].totals.costOffsets_perMember.NI.Year10) >= 0)) {
                                                mySymbol = "checked";
                                            }
                                            break;


                                        default:
                                    }
                                }
                            }
                        }
                    }
            



                    return mySymbol;
                }



                function fillActionsTableILT(myYearHorizon, myClass, myPopulationOfInterest,currentROITables) {
                    var mySymbol = "rien";
                    myYearHorizon = parseInt(myYearHorizon);



                    if (Object.keys(currentROITables).length != 0) {
                        for (var myTempClass in currentROITables) {
                            for (var myTempPOI in currentROITables[myTempClass]) {
                                for (var myTempYear in currentROITables[myTempClass][myTempPOI].totals.savings.ILT) {
                                    switch (myYearHorizon) {
                                        case 1:
                                            if ((myTempClass == myClass) && (myTempPOI == myPopulationOfInterest) && ((currentROITables[myTempClass][myTempPOI].totals.costOffsets_perMember.ILT.Year1) >= 0)) {
                                                mySymbol = "checked";
                                            }
                                            break;

                                        case 2:
                                            if ((myTempClass == myClass) && (myTempPOI == myPopulationOfInterest) && ((currentROITables[myTempClass][myTempPOI].totals.costOffsets_perMember.ILT.Year2) >= 0)) {
                                                mySymbol = "checked";
                                            }
                                            break;

                                        case 3:
                                            if ((myTempClass == myClass) && (myTempPOI == myPopulationOfInterest) && ((currentROITables[myTempClass][myTempPOI].totals.costOffsets_perMember.ILT.Year3) >= 0)) {
                                                mySymbol = "checked";
                                            }
                                            break;

                                        case 4:
                                            if ((myTempClass == myClass) && (myTempPOI == myPopulationOfInterest) && ((currentROITables[myTempClass][myTempPOI].totals.costOffsets_perMember.ILT.Year4) >= 0)) {
                                                mySymbol = "checked";
                                            }
                                            break;

                                        case 5:
                                            if ((myTempClass == myClass) && (myTempPOI == myPopulationOfInterest) && ((currentROITables[myTempClass][myTempPOI].totals.costOffsets_perMember.ILT.Year5) >= 0)) {
                                                mySymbol = "checked";
                                            }
                                            break;

                                        case 6:
                                            if ((myTempClass == myClass) && (myTempPOI == myPopulationOfInterest) && ((currentROITables[myTempClass][myTempPOI].totals.costOffsets_perMember.ILT.Year6) >= 0)) {
                                                mySymbol = "checked";
                                            }
                                            break;

                                        case 7:
                                            if ((myTempClass == myClass) && (myTempPOI == myPopulationOfInterest) && ((currentROITables[myTempClass][myTempPOI].totals.costOffsets_perMember.ILT.Year7) >= 0)) {
                                                mySymbol = "checked";
                                            }
                                            break;

                                        case 8:
                                            if ((myTempClass == myClass) && (myTempPOI == myPopulationOfInterest) && ((currentROITables[myTempClass][myTempPOI].totals.costOffsets_perMember.ILT.Year8) >= 0)) {
                                                mySymbol = "checked";
                                            }
                                            break;

                                        case 9:
                                            if ((myTempClass == myClass) && (myTempPOI == myPopulationOfInterest) && ((currentROITables[myTempClass][myTempPOI].totals.costOffsets_perMember.ILT.Year9) >= 0)) {
                                                mySymbol = "checked";
                                            }
                                            break;

                                        case 10:
                                            if ((myTempClass == myClass) && (myTempPOI == myPopulationOfInterest) && ((currentROITables[myTempClass][myTempPOI].totals.costOffsets_perMember.ILT.Year10) >= 0)) {
                                                mySymbol = "checked";
                                            }
                                            break;


                                        default:
                                    }
                                }
                            }
                        }
                    }
 


                    return mySymbol;
                }





                function actions() {

                    // console.log('txt18_29-8',myAges18To29);
                    //     console.log('txt30_39-8',myAges30To39);
                    //     console.log('txt40_49-8',myAges40To49);
                    //     console.log('txt50_59-8',myAges50To59);
                    //     console.log('txt60_64-8',myAges60To64);

                    var resultNavBar = '';
                    resultNavBar += '<div class="resultsPage_header"><div><img src="./res/img/icon-results.svg"/><h2>Actions</h2></div>' +
                        '<div class="resultsPage_pageNav"><a href="#" onClick="toShowSummaryResult(myParams,currentROITables,currentDistributionTables,currentEventsTables);">Summary Results</a>' +
                        '<a href="#" onClick="eventBasedAnalysis();">Event-Based Analysis</a>' +
                        '<a href="#" onClick="detailedResults(myParams);">Detailed Results</a><a href="#" class="resultsPage_active" onClick="actions();">Actions</a>' +
                        '</div></div>';


                    document.getElementById("MyNavbar").innerHTML = resultNavBar;


                    //console.log(myTimeHorizonValue);



                    let txtArr = [];
                    let txt = txtArr;

                    txtArr.push('<table border="0">');
                    txtArr.push('<tr>');
                    txtArr.push('<td valign="top">');
                    txtArr.push('<div>');
                    txtArr.push('<div class="detailedResults_subTitle"><b>Population of Interest</b></div>');
                    txtArr.push('</div>');
                    txtArr.push('</td>');
                    txtArr.push('</tr>');
                    txtArr.push('<tr>');
                    txtArr.push('<td valign="top">');
                    txtArr.push('The following shows a full list of subpopulations that would show you a return on investment over ' + myTimeHorizonValue + ' year based if treated with ' + Wegovy_AOM + '.<p></p>');

                    txtArr.push('    <table class="table table-striped actions-table">');
                    txtArr.push('        <tr>');
                    txtArr.push('            <th></th>');
                    txtArr.push('            <th colspan="4" align="center">vs No intervention</th>');
                    txtArr.push('            <th colspan="4" align="center">vs Intensive lifestyle therapies</th>');
                    txtArr.push('        </tr>');
                    txtArr.push('        <tr>');
                    txtArr.push('            <th></th>');
                    txtArr.push('            <th colspan="4" align="center">Obesity classes</th>');
                    txtArr.push('            <th colspan="4" align="center">Obesity classes</th>');
                    txtArr.push('        </tr>');
                    txtArr.push('        <tr>');
                    txtArr.push('            <td></td>');
                    txtArr.push('            <td>OW, I, II and III</td>');
                    txtArr.push('            <td>I, II and III</td>');
                    txtArr.push('            <td>II and III</td>');
                    txtArr.push('            <td>III</td>');
                    txtArr.push('            <td>OW, I, II and III</td>');
                    txtArr.push('            <td>I, II and III</td>');
                    txtArr.push('            <td>II and III</td>');
                    txtArr.push('            <td>III</td>');
                    txtArr.push('        </tr>');

                    txtArr.push('       <tr>');
                    txtArr.push('        <td class="main-condition">People with obesity</td>'); // 1
                    txtArr.push('        <td class=' + fillActionsTableNI(myTimeHorizonValue, "Overweight and obesity (I, II, and III)", "People with overweight/ obesity",currentROITables) + '></td>');
                    txtArr.push('        <td class=' + fillActionsTableNI(myTimeHorizonValue, "Obesity classes I, II and III", "People with obesity",currentROITables) + '></td>');
                    txtArr.push('        <td class=' + fillActionsTableNI(myTimeHorizonValue, "Obesity classes II and III", "People with obesity",currentROITables) + '></td>');
                    txtArr.push('        <td class=' + fillActionsTableNI(myTimeHorizonValue, "Obesity class III", "People with obesity",currentROITables) + '></td>');
                    txtArr.push('        <td class=' + fillActionsTableILT(myTimeHorizonValue, "Overweight and obesity (I, II, and III)", "People with overweight/ obesity",currentROITables) + '></td>');
                    txtArr.push('        <td class=' + fillActionsTableILT(myTimeHorizonValue, "Obesity classes I, II and III", "People with obesity",currentROITables) + '></td>');
                    txtArr.push('        <td class=' + fillActionsTableILT(myTimeHorizonValue, "Obesity classes II and III", "People with obesity",currentROITables) + '></td>');
                    txtArr.push('        <td class=' + fillActionsTableILT(myTimeHorizonValue, "Obesity class III", "People with obesity",currentROITables) + '></td>');
                    txtArr.push('    </tr>');
                    txtArr.push('       <tr>');
                    txtArr.push('        <td class="main-condition">Any cardiometabolic disease</td>'); // 2
                    txtArr.push('        <td class=' + fillActionsTableNI(myTimeHorizonValue, "Overweight and obesity (I, II, and III)", "Any cardiometabolic disease*",currentROITables) + '></td>');
                    txtArr.push('        <td class=' + fillActionsTableNI(myTimeHorizonValue, "Obesity classes I, II and III", "Any cardiometabolic disease*",currentROITables) + '></td>');
                    txtArr.push('        <td class=' + fillActionsTableNI(myTimeHorizonValue, "Obesity classes II and III", "Any cardiometabolic disease*",currentROITables) + '></td>');
                    txtArr.push('        <td class=' + fillActionsTableNI(myTimeHorizonValue, "Obesity class III", "Any cardiometabolic disease*",currentROITables) + '></td>');
                    txtArr.push('        <td class=' + fillActionsTableILT(myTimeHorizonValue, "Overweight and obesity (I, II, and III)", "Any cardiometabolic disease*",currentROITables) + '></td>');
                    txtArr.push('        <td class=' + fillActionsTableILT(myTimeHorizonValue, "Obesity classes I, II and III", "Any cardiometabolic disease*",currentROITables) + '></td>');
                    txtArr.push('        <td class=' + fillActionsTableILT(myTimeHorizonValue, "Obesity classes II and III", "Any cardiometabolic disease*",currentROITables) + '></td>');
                    txtArr.push('        <td class=' + fillActionsTableILT(myTimeHorizonValue, "Obesity class III", "Any cardiometabolic disease*",currentROITables) + '></td>');
                    txtArr.push('    </tr>');
                    txtArr.push('    </tr>');
                    txtArr.push('       <tr>');
                    txtArr.push('        <td class="sub-condition">Cardiovascular diseases</td>'); // 3
                    txtArr.push('        <td class=' + fillActionsTableNI(myTimeHorizonValue, "Overweight and obesity (I, II, and III)", "Cardiovascular diseases",currentROITables) + '></td>');
                    txtArr.push('        <td class=' + fillActionsTableNI(myTimeHorizonValue, "Obesity classes I, II and III", "Cardiovascular diseases",currentROITables) + '></td>');
                    txtArr.push('        <td class=' + fillActionsTableNI(myTimeHorizonValue, "Obesity classes II and III", "Cardiovascular diseases",currentROITables) + '></td>');
                    txtArr.push('        <td class=' + fillActionsTableNI(myTimeHorizonValue, "Obesity class III", "Cardiovascular diseases",currentROITables) + '></td>');
                    txtArr.push('        <td class=' + fillActionsTableILT(myTimeHorizonValue, "Overweight and obesity (I, II, and III)", "Cardiovascular diseases",currentROITables) + '></td>');
                    txtArr.push('        <td class=' + fillActionsTableILT(myTimeHorizonValue, "Obesity classes I, II and III", "Cardiovascular diseases",currentROITables) + '></td>');
                    txtArr.push('        <td class=' + fillActionsTableILT(myTimeHorizonValue, "Obesity classes II and III", "Cardiovascular diseases",currentROITables) + '></td>');
                    txtArr.push('        <td class=' + fillActionsTableILT(myTimeHorizonValue, "Obesity class III", "Cardiovascular diseases",currentROITables) + '></td>');
                    txtArr.push('    </tr>');
                    txtArr.push('    </tr>');
                    txtArr.push('       <tr>');
                    txtArr.push('        <td class="comorbidity">with cerebrovascular diseases</td>'); // 4
                    txtArr.push('        <td class=' + fillActionsTableNI(myTimeHorizonValue, "Overweight and obesity (I, II, and III)", "Cardiovascular diseases (with cerebrovascular diseases)",currentROITables) + '></td>');
                    txtArr.push('        <td class=' + fillActionsTableNI(myTimeHorizonValue, "Obesity classes I, II and III", "Cardiovascular diseases (with cerebrovascular diseases)",currentROITables) + '></td>');
                    txtArr.push('        <td class=' + fillActionsTableNI(myTimeHorizonValue, "Obesity classes II and III", "Cardiovascular diseases (with cerebrovascular diseases)",currentROITables) + '></td>');
                    txtArr.push('        <td class=' + fillActionsTableNI(myTimeHorizonValue, "Obesity class III", "Cardiovascular diseases (with cerebrovascular diseases)",currentROITables) + '></td>');
                    txtArr.push('        <td class=' + fillActionsTableILT(myTimeHorizonValue, "Overweight and obesity (I, II, and III)", "Cardiovascular diseases (with cerebrovascular diseases)",currentROITables) + '></td>');
                    txtArr.push('        <td class=' + fillActionsTableILT(myTimeHorizonValue, "Obesity classes I, II and III", "Cardiovascular diseases (with cerebrovascular diseases)",currentROITables) + '></td>');
                    txtArr.push('        <td class=' + fillActionsTableILT(myTimeHorizonValue, "Obesity classes II and III", "Cardiovascular diseases (with cerebrovascular diseases)",currentROITables) + '></td>');
                    txtArr.push('        <td class=' + fillActionsTableILT(myTimeHorizonValue, "Obesity class III", "Cardiovascular diseases (with cerebrovascular diseases)",currentROITables) + '></td>');
                    txtArr.push('    </tr>');
                    txtArr.push('    </tr>');
                    txtArr.push('       <tr>');
                    txtArr.push('        <td class="comorbidity">with diabetes</td>'); // 5
                    txtArr.push('        <td class=' + fillActionsTableNI(myTimeHorizonValue, "Overweight and obesity (I, II, and III)", "Cardiovascular diseases (with diabetes)",currentROITables) + '></td>');
                    txtArr.push('        <td class=' + fillActionsTableNI(myTimeHorizonValue, "Obesity classes I, II and III", "Cardiovascular diseases (with diabetes)",currentROITables) + '></td>');
                    txtArr.push('        <td class=' + fillActionsTableNI(myTimeHorizonValue, "Obesity classes II and III", "Cardiovascular diseases (with diabetes)",currentROITables) + '></td>');
                    txtArr.push('        <td class=' + fillActionsTableNI(myTimeHorizonValue, "Obesity class III", "Cardiovascular diseases (with diabetes)",currentROITables) + '></td>');
                    txtArr.push('        <td class=' + fillActionsTableILT(myTimeHorizonValue, "Overweight and obesity (I, II, and III)", "Cardiovascular diseases (with diabetes)",currentROITables) + '></td>');
                    txtArr.push('        <td class=' + fillActionsTableILT(myTimeHorizonValue, "Obesity classes I, II and III", "Cardiovascular diseases (with diabetes)",currentROITables) + '></td>');
                    txtArr.push('        <td class=' + fillActionsTableILT(myTimeHorizonValue, "Obesity classes II and III", "Cardiovascular diseases (with diabetes)",currentROITables) + '></td>');
                    txtArr.push('        <td class=' + fillActionsTableILT(myTimeHorizonValue, "Obesity class III", "Cardiovascular diseases (with diabetes)",currentROITables) + '></td>');
                    txtArr.push('    </tr>');
                    txtArr.push('    </tr>');
                    txtArr.push('       <tr>');
                    txtArr.push('        <td class="comorbidity">with dyslipidemia</td>'); // 6
                    txtArr.push('        <td class=' + fillActionsTableNI(myTimeHorizonValue, "Overweight and obesity (I, II, and III)", "Cardiovascular diseases (with dyslipidemia)",currentROITables) + '></td>');
                    txtArr.push('        <td class=' + fillActionsTableNI(myTimeHorizonValue, "Obesity classes I, II and III", "Cardiovascular diseases (with dyslipidemia)",currentROITables) + '></td>');
                    txtArr.push('        <td class=' + fillActionsTableNI(myTimeHorizonValue, "Obesity classes II and III", "Cardiovascular diseases (with dyslipidemia)",currentROITables) + '></td>');
                    txtArr.push('        <td class=' + fillActionsTableNI(myTimeHorizonValue, "Obesity class III", "Cardiovascular diseases (with dyslipidemia)",currentROITables) + '></td>');
                    txtArr.push('        <td class=' + fillActionsTableILT(myTimeHorizonValue, "Overweight and obesity (I, II, and III)", "Cardiovascular diseases (with dyslipidemia)",currentROITables) + '></td>');
                    txtArr.push('        <td class=' + fillActionsTableILT(myTimeHorizonValue, "Obesity classes I, II and III", "Cardiovascular diseases (with dyslipidemia)",currentROITables) + '></td>');
                    txtArr.push('        <td class=' + fillActionsTableILT(myTimeHorizonValue, "Obesity classes II and III", "Cardiovascular diseases (with dyslipidemia)",currentROITables) + '></td>');
                    txtArr.push('        <td class=' + fillActionsTableILT(myTimeHorizonValue, "Obesity class III", "Cardiovascular diseases (with dyslipidemia)",currentROITables) + '></td>');
                    txtArr.push('    </tr>');
                    txtArr.push('    </tr>');
                    txtArr.push('       <tr>');
                    txtArr.push('        <td class="comorbidity">with hypertension</td>'); // 7
                    txtArr.push('        <td class=' + fillActionsTableNI(myTimeHorizonValue, "Overweight and obesity (I, II, and III)", "Cardiovascular diseases (with hypertension)",currentROITables) + '></td>');
                    txtArr.push('        <td class=' + fillActionsTableNI(myTimeHorizonValue, "Obesity classes I, II and III", "Cardiovascular diseases (with hypertension)",currentROITables) + '></td>');
                    txtArr.push('        <td class=' + fillActionsTableNI(myTimeHorizonValue, "Obesity classes II and III", "Cardiovascular diseases (with hypertension)",currentROITables) + '></td>');
                    txtArr.push('        <td class=' + fillActionsTableNI(myTimeHorizonValue, "Obesity class III", "Cardiovascular diseases (with hypertension)",currentROITables) + '></td>');
                    txtArr.push('        <td class=' + fillActionsTableILT(myTimeHorizonValue, "Overweight and obesity (I, II, and III)", "Cardiovascular diseases (with hypertension)",currentROITables) + '></td>');
                    txtArr.push('        <td class=' + fillActionsTableILT(myTimeHorizonValue, "Obesity classes I, II and III", "Cardiovascular diseases (with hypertension)",currentROITables) + '></td>');
                    txtArr.push('        <td class=' + fillActionsTableILT(myTimeHorizonValue, "Obesity classes II and III", "Cardiovascular diseases (with hypertension)",currentROITables) + '></td>');
                    txtArr.push('        <td class=' + fillActionsTableILT(myTimeHorizonValue, "Obesity class III", "Cardiovascular diseases (with hypertension)",currentROITables) + '></td>');
                    txtArr.push('    </tr>');
                    txtArr.push('    </tr>');
                    txtArr.push('       <tr>');
                    txtArr.push('        <td class="sub-condition">Cerebrovascular diseases</td>'); // 8
                    txtArr.push('        <td class=' + fillActionsTableNI(myTimeHorizonValue, "Overweight and obesity (I, II, and III)", "Cerebrovascular diseases",currentROITables) + '></td>');
                    txtArr.push('        <td class=' + fillActionsTableNI(myTimeHorizonValue, "Obesity classes I, II and III", "Cerebrovascular diseases",currentROITables) + '></td>');
                    txtArr.push('        <td class=' + fillActionsTableNI(myTimeHorizonValue, "Obesity classes II and III", "Cerebrovascular diseases",currentROITables) + '></td>');
                    txtArr.push('        <td class=' + fillActionsTableNI(myTimeHorizonValue, "Obesity class III", "Cerebrovascular diseases",currentROITables) + '></td>');
                    txtArr.push('        <td class=' + fillActionsTableILT(myTimeHorizonValue, "Overweight and obesity (I, II, and III)", "Cerebrovascular diseases",currentROITables) + '></td>');
                    txtArr.push('        <td class=' + fillActionsTableILT(myTimeHorizonValue, "Obesity classes I, II and III", "Cerebrovascular diseases",currentROITables) + '></td>');
                    txtArr.push('        <td class=' + fillActionsTableILT(myTimeHorizonValue, "Obesity classes II and III", "Cerebrovascular diseases",currentROITables) + '></td>');
                    txtArr.push('        <td class=' + fillActionsTableILT(myTimeHorizonValue, "Obesity class III", "Cerebrovascular diseases",currentROITables) + '></td>');
                    txtArr.push('    </tr>');
                    txtArr.push('    </tr>');
                    txtArr.push('       <tr>');
                    txtArr.push('        <td class="sub-condition">Diabetes</td>'); // 9
                    txtArr.push('        <td class=' + fillActionsTableNI(myTimeHorizonValue, "Overweight and obesity (I, II, and III)", "Diabetes",currentROITables) + '></td>');
                    txtArr.push('        <td class=' + fillActionsTableNI(myTimeHorizonValue, "Obesity classes I, II and III", "Diabetes",currentROITables) + '></td>');
                    txtArr.push('        <td class=' + fillActionsTableNI(myTimeHorizonValue, "Obesity classes II and III", "Diabetes",currentROITables) + '></td>');
                    txtArr.push('        <td class=' + fillActionsTableNI(myTimeHorizonValue, "Obesity class III", "Diabetes",currentROITables) + '></td>');
                    txtArr.push('        <td class=' + fillActionsTableILT(myTimeHorizonValue, "Overweight and obesity (I, II, and III)", "Diabetes",currentROITables) + '></td>');
                    txtArr.push('        <td class=' + fillActionsTableILT(myTimeHorizonValue, "Obesity classes I, II and III", "Diabetes",currentROITables) + '></td>');
                    txtArr.push('        <td class=' + fillActionsTableILT(myTimeHorizonValue, "Obesity classes II and III", "Diabetes",currentROITables) + '></td>');
                    txtArr.push('        <td class=' + fillActionsTableILT(myTimeHorizonValue, "Obesity class III", "Diabetes",currentROITables) + '></td>');
                    txtArr.push('    </tr>');
                    txtArr.push('    </tr>');
                    txtArr.push('       <tr>');
                    txtArr.push('        <td class="sub-condition">Dyslipidemia</td>'); // 10
                    txtArr.push('        <td class=' + fillActionsTableNI(myTimeHorizonValue, "Overweight and obesity (I, II, and III)", "Dyslipidemia",currentROITables) + '></td>');
                    txtArr.push('        <td class=' + fillActionsTableNI(myTimeHorizonValue, "Obesity classes I, II and III", "Dyslipidemia",currentROITables) + '></td>');
                    txtArr.push('        <td class=' + fillActionsTableNI(myTimeHorizonValue, "Obesity classes II and III", "Dyslipidemia",currentROITables) + '></td>');
                    txtArr.push('        <td class=' + fillActionsTableNI(myTimeHorizonValue, "Obesity class III", "Dyslipidemia",currentROITables) + '></td>');
                    txtArr.push('        <td class=' + fillActionsTableILT(myTimeHorizonValue, "Overweight and obesity (I, II, and III)", "Dyslipidemia",currentROITables) + '></td>');
                    txtArr.push('        <td class=' + fillActionsTableILT(myTimeHorizonValue, "Obesity classes I, II and III", "Dyslipidemia",currentROITables) + '></td>');
                    txtArr.push('        <td class=' + fillActionsTableILT(myTimeHorizonValue, "Obesity classes II and III", "Dyslipidemia",currentROITables) + '></td>');
                    txtArr.push('        <td class=' + fillActionsTableILT(myTimeHorizonValue, "Obesity class III", "Dyslipidemia",currentROITables) + '></td>');
                    txtArr.push('    </tr>');
                    txtArr.push('    </tr>');
                    txtArr.push('       <tr>');
                    txtArr.push('        <td class="sub-condition">Hypertension</td>'); // 11
                    txtArr.push('        <td class=' + fillActionsTableNI(myTimeHorizonValue, "Overweight and obesity (I, II, and III)", "Hypertension",currentROITables) + '></td>');
                    txtArr.push('        <td class=' + fillActionsTableNI(myTimeHorizonValue, "Obesity classes I, II and III", "Hypertension",currentROITables) + '></td>');
                    txtArr.push('        <td class=' + fillActionsTableNI(myTimeHorizonValue, "Obesity classes II and III", "Hypertension",currentROITables) + '></td>');
                    txtArr.push('        <td class=' + fillActionsTableNI(myTimeHorizonValue, "Obesity class III", "Hypertension",currentROITables) + '></td>');
                    txtArr.push('        <td class=' + fillActionsTableILT(myTimeHorizonValue, "Overweight and obesity (I, II, and III)", "Hypertension",currentROITables) + '></td>');
                    txtArr.push('        <td class=' + fillActionsTableILT(myTimeHorizonValue, "Obesity classes I, II and III", "Hypertension",currentROITables) + '></td>');
                    txtArr.push('        <td class=' + fillActionsTableILT(myTimeHorizonValue, "Obesity classes II and III", "Hypertension",currentROITables) + '></td>');
                    txtArr.push('        <td class=' + fillActionsTableILT(myTimeHorizonValue, "Obesity class III", "Hypertension",currentROITables) + '></td>');
                    txtArr.push('    </tr>');
                    txtArr.push('    </tr>');
                    txtArr.push('       <tr>');
                    txtArr.push('        <td class="main-condition">Osteoarthritis</td>'); // 12
                    txtArr.push('        <td class=' + fillActionsTableNI(myTimeHorizonValue, "Overweight and obesity (I, II, and III)", "Osteoarthritis",currentROITables) + '></td>');
                    txtArr.push('        <td class=' + fillActionsTableNI(myTimeHorizonValue, "Obesity classes I, II and III", "Osteoarthritis",currentROITables) + '></td>');
                    txtArr.push('        <td class=' + fillActionsTableNI(myTimeHorizonValue, "Obesity classes II and III", "Osteoarthritis",currentROITables) + '></td>');
                    txtArr.push('        <td class=' + fillActionsTableNI(myTimeHorizonValue, "Obesity class III", "Osteoarthritis",currentROITables) + '></td>');
                    txtArr.push('        <td class=' + fillActionsTableILT(myTimeHorizonValue, "Overweight and obesity (I, II, and III)", "Osteoarthritis",currentROITables) + '></td>');
                    txtArr.push('        <td class=' + fillActionsTableILT(myTimeHorizonValue, "Obesity classes I, II and III", "Osteoarthritis",currentROITables) + '></td>');
                    txtArr.push('        <td class=' + fillActionsTableILT(myTimeHorizonValue, "Obesity classes II and III", "Osteoarthritis",currentROITables) + '></td>');
                    txtArr.push('        <td class=' + fillActionsTableILT(myTimeHorizonValue, "Obesity class III", "Osteoarthritis",currentROITables) + '></td>');
                    txtArr.push('    </tr>');
                    txtArr.push('    </tr>');
                    txtArr.push('       <tr>');
                    txtArr.push('        <td class="comorbidity">with cardiovascular diseases</td>'); // 13
                    txtArr.push('        <td class=' + fillActionsTableNI(myTimeHorizonValue, "Overweight and obesity (I, II, and III)", "Osteoarthritis (with cardiovascular diseases)",currentROITables) + '></td>');
                    txtArr.push('        <td class=' + fillActionsTableNI(myTimeHorizonValue, "Obesity classes I, II and III", "Osteoarthritis (with cardiovascular diseases)",currentROITables) + '></td>');
                    txtArr.push('        <td class=' + fillActionsTableNI(myTimeHorizonValue, "Obesity classes II and III", "Osteoarthritis (with cardiovascular diseases)",currentROITables) + '></td>');
                    txtArr.push('        <td class=' + fillActionsTableNI(myTimeHorizonValue, "Obesity class III", "Osteoarthritis (with cardiovascular diseases)",currentROITables) + '></td>');
                    txtArr.push('        <td class=' + fillActionsTableILT(myTimeHorizonValue, "Overweight and obesity (I, II, and III)", "Osteoarthritis (with cardiovascular diseases)",currentROITables) + '></td>');
                    txtArr.push('        <td class=' + fillActionsTableILT(myTimeHorizonValue, "Obesity classes I, II and III", "Osteoarthritis (with cardiovascular diseases)",currentROITables) + '></td>');
                    txtArr.push('        <td class=' + fillActionsTableILT(myTimeHorizonValue, "Obesity classes II and III", "Osteoarthritis (with cardiovascular diseases)",currentROITables) + '></td>');
                    txtArr.push('        <td class=' + fillActionsTableILT(myTimeHorizonValue, "Obesity class III", "Osteoarthritis (with cardiovascular diseases)",currentROITables) + '></td>');
                    txtArr.push('    </tr>');
                    txtArr.push('    </tr>');
                    txtArr.push('       <tr>');
                    txtArr.push('        <td class="comorbidity">with diabetes</td>'); // 14
                    txtArr.push('        <td class=' + fillActionsTableNI(myTimeHorizonValue, "Overweight and obesity (I, II, and III)", "Osteoarthritis (with diabetes)",currentROITables) + '></td>');
                    txtArr.push('        <td class=' + fillActionsTableNI(myTimeHorizonValue, "Obesity classes I, II and III", "Osteoarthritis (with diabetes)",currentROITables) + '></td>');
                    txtArr.push('        <td class=' + fillActionsTableNI(myTimeHorizonValue, "Obesity classes II and III", "Osteoarthritis (with diabetes)",currentROITables) + '></td>');
                    txtArr.push('        <td class=' + fillActionsTableNI(myTimeHorizonValue, "Obesity class III", "Osteoarthritis (with diabetes)",currentROITables) + '></td>');
                    txtArr.push('        <td class=' + fillActionsTableILT(myTimeHorizonValue, "Overweight and obesity (I, II, and III)", "Osteoarthritis (with diabetes)",currentROITables) + '></td>');
                    txtArr.push('        <td class=' + fillActionsTableILT(myTimeHorizonValue, "Obesity classes I, II and III", "Osteoarthritis (with diabetes)",currentROITables) + '></td>');
                    txtArr.push('        <td class=' + fillActionsTableILT(myTimeHorizonValue, "Obesity classes II and III", "Osteoarthritis (with diabetes)",currentROITables) + '></td>');
                    txtArr.push('        <td class=' + fillActionsTableILT(myTimeHorizonValue, "Obesity class III", "Osteoarthritis (with diabetes)",currentROITables) + '></td>');
                    txtArr.push('    </tr>');


                    txtArr.push('</table>');


                    document.getElementById("myInput2").innerHTML = "";
                    console.log("myInput2 cleared : line 24920");
                    document.getElementById("myInput").innerHTML = txt.join("");

                    const graph = "<div class='detailedResults_graphHolder resultHidden'>" +
                        "<div><div class='detailedResults_graphTitle'>AOMS vs no intervention</div><div class='Gplaceholder'></div></div>" +
                        "<div><div class='detailedResults_graphTitle'>AOMS vs ILT</div><div class='Gplaceholder'></div></div>" +
                        "</div>"
                    $(".table-content").append(graph)

                }






                let fullResultsPage = true;
                function myResults(myParams) {
                  $('.inputsTray').addClass("fullSize");


                    console.log(DefaultWorkingHoursInADay, 'hours in a day');

                    // switch background image for results screens
                    $(".img--content").attr("style", "background-image: url(res/img/content-results.png)");

                    $(".container").removeClass().addClass("container simpleResultPage");



                    if (!myParams.myWorkingHoursInADayValue) {
                        myParams.myWorkingHoursInADayValue = DefaultWorkingHoursInADay * 1;
                    }

                    if (!myParams.myEmployeeHourlyCompensationValue) {
                        myParams.myEmployeeHourlyCompensationValue = DefaultHourlyCompensation * 1;
                    }

                    if (!myParams.myWeightWatchersValue) {
                        myParams.myWeightWatchersValue = DefaultWeightWatchers * 1;
                    } else {
                        if (isNaN(myParams.myWeightWatchersValue)) {
                            myParams.myWeightWatchersValue = myParams.myWeightWatchersValue.replace("%", "");
                            myParams.myWeightWatchersValue = Number(myParams.myWeightWatchersValue) / 100;
                        }
                    }

                    if (!myParams.myIDEValue) {
                        myParams.myIDEValue = DefaultIDE * 1;
                    } else {
                        if (isNaN(myParams.myIDEValue)) {
                            myParams.myIDEValue = myParams.myIDEValue.replace("%", "");
                            myParams.myIDEValue = Number(myParams.myIDEValue) / 100;
                        }
                    }

                    if (!myParams.myJennyCraigValue) {
                        myParams.myJennyCraigValue = DefaultJennyCraig * 1;
                    } else {
                        if (isNaN(myParams.myJennyCraigValue)) {
                            myParams.myJennyCraigValue = myParams.myJennyCraigValue.replace("%", "");
                            myParams.myJennyCraigValue = Number(myParams.myJennyCraigValue) / 100;
                        }
                    }
                    if (!myParams.myIDEMembershipValue) {
                        myParams.myIDEMembershipValue = DefaultIDEMembership * 1;
                    } else {
                        if (isNaN(myParams.myIDEMembershipValue)) {
                            myParams.myIDEMembershipValue = myParams.myIDEMembershipValue.replace("%", "");
                            myParams.myIDEMembershipValue = Number(myParams.myIDEMembershipValue) / 100;
                        }
                    }



                    if (inputDashboard.Obesity_Class) {
                        var myObesityClass = inputDashboard.Obesity_Class.value;
                    } else {
                        var myObesityClass = "Overweight and obesity (I, II, and III)";
                    }

                    if (inputDashboard.POI1) {
                        var myPOIValue = inputDashboard.POI1.value;
                        if ((myPOIValue === "People with overweight/ obesity") || (myPOIValue === "People with obesity")) {
                            if (myObesityClass === "Overweight and obesity (I, II, and III)") {
                                var myPOIValue = "People with overweight/ obesity";
                            } else {
                                var myPOIValue = "People with obesity";
                            }
                        } else {
                            var myPOIValue = inputDashboard.POI1.value;
                        }
                    } else {
                        if (myObesityClass === "Overweight and obesity (I, II, and III)") {
                            var myPOIValue = "People with overweight/ obesity";
                        } else {
                            var myPOIValue = "People with obesity";
                        }
                    }



                    // if (!inputDashboard.AOM_VS) {
                    //     setComorbiditiesData(ROI1.data);
                    // } else {
                    //     handleComorbiditiesDataChange(myTimeHorizonValue)
                    // }

                    // console.log(comorbiditiesArr, 'arr');
                    // console.log(comorbiditiesData, 'data');
                    var resultNavBar1 = '';


                    resultNavBar1 += '<div class="main-cat-info">';
                    resultNavBar1 += '  <div class="container">';
                    resultNavBar1 += '    <div class="table-responsive simpleResult"> ';
                    resultNavBar1 += '      <div class="simpleResult_leftSection">';
                    resultNavBar1 += '        <button type="button" class="collapsible comorbiditiesSectionBtn expanded">COMORBIDITIES</button>';
                    resultNavBar1 += '        <div class="comorbiditiesSection expanded">';
                    resultNavBar1 += '       <table border="0" class="table table-sm table-borderless">';
                    // resultNavBar1 += '         <tr>';
                    // resultNavBar1 += '           <td valign="top">Any cardiometabolic disease</td>';
                    // resultNavBar1 += '           <td valign="top">' + comorbiditiesArr[0] + '</td>';

                    // // resultNavBar1 +=  '           '+comorbiditiesResultsArr[5].replace("<td>(.*?)</td>")+'';
                    // resultNavBar1 += '         </tr>';
                    // resultNavBar1 += '         <tr>';
                    // resultNavBar1 += '           <td valign="top">Cardiovascular diseases</td>';
                    // resultNavBar1 += '           <td valign="top">' + comorbiditiesArr[1] + '</td>';

                    // // resultNavBar1 +=  '           '+comorbiditiesResultsArr[5].replace("<td>(.*?)</td>")+'';
                    // resultNavBar1 += '         </tr>';
                    // resultNavBar1 += '         <tr>';
                    // resultNavBar1 += '           <td valign="top">Cardiovascular diseases (with cerebrovascular diseases)</td>';
                    // // resultNavBar1 +=  '           '+comorbiditiesResultsArr[5].replace("<td>(.*?)</td>")+'';
                    // resultNavBar1 += '           <td valign="top">' + comorbiditiesArr[2] + '</td>';

                    // resultNavBar1 += '         </tr>';
                    // resultNavBar1 += '         <tr>';
                    // resultNavBar1 += '           <td valign="top">Cardiovascular diseases (with diabetes)</td>';
                    // // resultNavBar1 +=  '           '+comorbiditiesResultsArr[5].replace("<td>(.*?)</td>")+'';
                    // resultNavBar1 += '           <td valign="top">' + comorbiditiesArr[3] + '</td>';

                    // resultNavBar1 += '         </tr>';
                    // resultNavBar1 += '         <tr>';
                    // resultNavBar1 += '           <td valign="top">Cardiovascular diseases (with dyslipidemia)</td>';
                    // // resultNavBar1 +=  '           '+comorbiditiesResultsArr[5].replace("<td>(.*?)</td>")+'';
                    // resultNavBar1 += '           <td valign="top">' + comorbiditiesArr[4] + '</td>';

                    // resultNavBar1 += '         </tr>';
                    // resultNavBar1 += '         <tr>';
                    // resultNavBar1 += '           <td valign="top">Cardiovascular diseases (with hypertension)</td>';
                    // // resultNavBar1 +=  '           '+comorbiditiesResultsArr[5].replace("<td>(.*?)</td>")+'';
                    // resultNavBar1 += '           <td valign="top">' + comorbiditiesArr[5] + '</td>';

                    // resultNavBar1 += '         </tr>';
                    // resultNavBar1 += '         <tr>';
                    // resultNavBar1 += '           <td valign="top">Cerebrovascular disease</td>';
                    // // resultNavBar1 +=  '           '+comorbiditiesResultsArr[5].replace("<td>(.*?)</td>")+'';
                    // resultNavBar1 += '           <td valign="top">' + comorbiditiesArr[6] + '</td>';

                    // resultNavBar1 += '         </tr>';
                    // resultNavBar1 += '         <tr>';
                    // resultNavBar1 += '           <td valign="top">Diabetes</td>';
                    // // resultNavBar1 +=  '           '+comorbiditiesResultsArr[5].replace("<td>(.*?)</td>")+'';
                    // resultNavBar1 += '           <td valign="top">' + comorbiditiesArr[7] + '</td>';

                    // resultNavBar1 += '         </tr>';
                    // resultNavBar1 += '         <tr>';
                    // resultNavBar1 += '           <td valign="top">Dyslipidemia</td>';
                    // // resultNavBar1 +=  '           '+comorbiditiesResultsArr[5].replace("<td>(.*?)</td>")+'';
                    // resultNavBar1 += '           <td valign="top">' + comorbiditiesArr[8] + '</td>';

                    // resultNavBar1 += '         </tr>';
                    // resultNavBar1 += '         <tr>';
                    // resultNavBar1 += '           <td valign="top">Hypertension</td>';
                    // // resultNavBar1 +=  '           '+comorbiditiesResultsArr[5].replace("<td>(.*?)</td>")+'';
                    // resultNavBar1 += '           <td valign="top">' + comorbiditiesArr[9] + '</td>';

                    // resultNavBar1 += '         </tr>';
                    // resultNavBar1 += '         <tr>';
                    // resultNavBar1 += '           <td valign="top">Osteoarthritis</td>';
                    // // resultNavBar1 +=  '           '+comorbiditiesResultsArr[5].replace("<td>(.*?)</td>")+'';
                    // resultNavBar1 += '           <td valign="top">' + comorbiditiesArr[10] + '</td>';

                    // resultNavBar1 += '         </tr>';
                    // resultNavBar1 += '         <tr>';
                    // resultNavBar1 += '           <td valign="top">Osteoarthritis (with cardiovascular diseases)</td>';
                    // // resultNavBar1 +=  '           '+comorbiditiesResultsArr[5].replace("<td>(.*?)</td>")+'';
                    // resultNavBar1 += '           <td valign="top">' + comorbiditiesArr[11] + '</td>';

                    // resultNavBar1 += '         </tr>';
                    // resultNavBar1 += '         <tr>';
                    // resultNavBar1 += '           <td valign="top">Osteoarthritis (with diabetes)</td>';
                    // // resultNavBar1 +=  '           '+comorbiditiesResultsArr[5].replace("<td>(.*?)</td>")+'';
                    // resultNavBar1 += '           <td valign="top">' + comorbiditiesArr[12] + '</td>';

                    // resultNavBar1 += '         </tr>';
                    // resultNavBar1 += '         <tr>';
                    // resultNavBar1 += '           <td valign="top" class="fontBlack">People overweight/with obesity</td>';
                    // // resultNavBar1 +=  '           '+comorbiditiesResultsArr[5].replace("<td>(.*?)</td>")+'';
                    // resultNavBar1 += '           <td valign="top">' + comorbiditiesArr[13] + '</td>';

                    // resultNavBar1 +=  '         </tr>';
                    resultNavBar1 += '       </table>';
                    resultNavBar1 += '       </div>';
                    resultNavBar1 += '       <hr/>';
                    resultNavBar1 += '        <button type="button" class="collapsible topResultsSectionBtn">TOP 5 RESULTS</button>';
                    resultNavBar1 += '        <div class="topResultsSection">';
                    resultNavBar1 += '       <table border="0" class="table table-sm table-borderless">';
                    // resultNavBar1 += '         <tr>';
                    // resultNavBar1 += '           <td valign="top">Obesity class III, ILT,Cerebrovascular diseases</td>';
                    // resultNavBar1 += '           <td valign="top">ROI: $11.03</td>';
                    // resultNavBar1 += '         </tr>';
                    // resultNavBar1 += '         <tr>';
                    // resultNavBar1 += '           <td valign="top">Obesity class III, ILT, Cardiovascular diseases (with hypertension)</td>';
                    // resultNavBar1 += '           <td valign="top">ROI: $11.03</td>';
                    // resultNavBar1 += '         </tr>';
                    // resultNavBar1 += '         <tr>';
                    // resultNavBar1 += '           <td valign="top">Obesity class III, ILT, Osteoarthritis (with cardiovascular diseases)</td>';
                    // resultNavBar1 += '           <td valign="top">ROI: $11.03</td>';
                    // resultNavBar1 += '         </tr>';
                    // resultNavBar1 += '         <tr>';
                    // resultNavBar1 += '           <td valign="top">Obesity class III, ILT, Cardiovascular diseases (with dyslipidemia)</td>';
                    // resultNavBar1 += '           <td valign="top">ROI: $11.03</td>';
                    // resultNavBar1 += '         </tr>';
                    // resultNavBar1 += '         <tr>';
                    // resultNavBar1 += '           <td valign="top">Obesity class III, ILT, Cardiovascular diseases (with diabetes)</td>';
                    // resultNavBar1 += '           <td valign="top">ROI: $11.03</td>';
                    // resultNavBar1 += '         </tr>';
                    resultNavBar1 += '       </table>';
                    resultNavBar1 += '       </div>';
                    resultNavBar1 += '       <hr/>';
                    resultNavBar1 += '        <button type="button" class="collapsible inputSectionBtn">ALL INPUTS</button>';
                    resultNavBar1 += '        <div class="inputSection">';
                    resultNavBar1 += '       <table border="0" class="table table-sm table-borderless">';
                    resultNavBar1 += '         <tr><td colspan="2" class="allInputs_Title">Age Distribution</td></tr>';
                    resultNavBar1 += '         <tr><td class="allInputs_InputCell"><div id="ages_18_to_29_display"><input type="text" name="ages18To29Display " value="' + txt18_29 + '"/></div></td><td class="allInputs_InputPadding">Ages 18-29</td></tr>';
                    resultNavBar1 += '         <tr><td class="allInputs_InputCell"><div id="ages_30_to_39_display"><input type="text" name="ages30To39Display " value="' + txt30_39 + '"/></div></td><td class="allInputs_InputPadding">Ages 30-39</td></tr>';
                    resultNavBar1 += '         <tr><td class="allInputs_InputCell"><div id="ages_40_to_49_display"><input type="text" name="ages40To49Display " value="' + txt40_49 + '"/></div></td><td class="allInputs_InputPadding">Ages 40-49</td></tr>';
                    resultNavBar1 += '         <tr><td class="allInputs_InputCell"><div id="ages_50_to_59_display"><input type="text" name="ages50To59Display " value="' + txt50_59 + '"/></div></td><td class="allInputs_InputPadding">Ages 50-59</td></tr>';
                    resultNavBar1 += '         <tr><td class="allInputs_InputCell"><div id="ages_60_to_64_display"><input type="text" name="ages60To69Display " value="' + txt60_64 + '"/></div></td><td class="allInputs_InputPadding">Ages 60-69</td></tr>';
                    resultNavBar1 += '       </table>';
                    resultNavBar1 += '       <table border="0" class="table table-sm table-borderless">';
                    resultNavBar1 += '         <tr><td colspan="2" class="allInputs_Title tableRowPadding">Sex Distribution</td></tr>';
                    resultNavBar1 += '         <tr><td class="allInputs_InputCell"><div id="Women_display"><input type="text" name="womenDisplay" value="' + txtWomen + '"/></div></td><td class="allInputs_InputPadding">Female</td></tr>';
                    resultNavBar1 += '         <tr><td class="allInputs_InputCell"><div id="Men_display"><input type="text" name="menDisplay" value="' + txtMen + '"/></div></td><td class="allInputs_InputPadding">Male</td></tr>';
                    resultNavBar1 += '       </table>';
                    resultNavBar1 += '       <table border="0" class="table table-sm table-borderless">';
                    resultNavBar1 += '         <tr><td colspan="2" class="allInputs_Title tableRowPadding">Direct Costs</td></tr>';
                    resultNavBar1 += '         <tr><td class="allInputs_CheckboxCell"><div id="medicalCostsCheckbox"><input type="checkbox" name="medicalCostsChkbx" id="medicaCostID" checked onClick="showMedicalCostsCheckbox();"/><label for="medicaCostID">&#10003;</label></div></td><td class="allInputs_CheckboxPadding">Medical costs</td></tr>';
                    resultNavBar1 += '         <tr><td class="allInputs_CheckboxCell"><div id="pharmacyCostsCheckbox"><input type="checkbox" name="pharmacyCostsChkbx" id="pharmacyCostsID" checked onClick="showPharmacyCostsCheckbox();"/><label for="pharmacyCostsID">&#10003;</label></div></td><td class="allInputs_CheckboxPadding">Pharmacy costs</td></tr>';
                    resultNavBar1 += '       </table>';
                    resultNavBar1 += '       <table border="0" class="table table-sm table-borderless">';
                    resultNavBar1 += '         <tr><td colspan="2" class="allInputs_Title tableRowPadding">Indirect Costs</td></tr>';
                    resultNavBar1 += '         <tr><td class="allInputs_CheckboxCell"><div id="absenteeismCheckbox"><input type="checkbox" name="absenteeismChkbx" id="absenteeismID" checked onClick="showAbsenteeismCheckbox();"/><label for="absenteeismID">&#10003;</label></div></td><td class="allInputs_CheckboxPadding">Absenteeism</td></tr>';
                    resultNavBar1 += '         <tr><td class="allInputs_CheckboxCell"><div id="presenteeismCheckbox"><input type="checkbox" name="presenteeismChkbx" id="presenteeismID" checked onClick="showPresenteeismCheckbox();"/><label for="presenteeismID">&#10003;</label></div></td><td class="allInputs_CheckboxPadding">Presenteeism</td></tr>';
                    resultNavBar1 += '         <tr><td class="allInputs_CheckboxCell"><div id="workersCompensationCheckbox"><input type="checkbox" name="workersCompensationChkbx" id="workersCompensationID" checked onClick="showWorkersCompensationCheckbox();"/><label for="workersCompensationID">&#10003;</label></div></td><td class="allInputs_CheckboxPadding">Workers&#39; compensation</td></tr>';
                    resultNavBar1 += '         <tr><td class="allInputs_CheckboxCell"><div id="shortTermAndLongTermDisabilityCheckbox"><input type="checkbox" name="shortTermAndLongTermDisabilityChkbx" id="shortTermAndLongTermDisabilityID" checked onClick="showShortTermAndLongTermDisabilityCheckbox();"/><label for="shortTermAndLongTermDisabilityID">&#10003;</label></div></td><td class="allInputs_CheckboxPadding">Short-term and long-term disability</td></tr>';
                    resultNavBar1 += '       </table>';

                    resultNavBar1 += '       <table border="0" class="table table-sm table-borderless">';
                    resultNavBar1 += '<tr><td colspan="2" class="allInputs_Title tableRowPadding">Treatments</td></tr>';
                    resultNavBar1 += '<tr><td colspan="2" class="allInputs_SubTitle">COMPONENTS OF MAIN TREATMENT ARM</td></tr>';
                    resultNavBar1 += '<tr><td class="allInputs_InputCell"><div id="contraveValue"><input type="text" name="myContraveValue" size="6" value="' + my_contrave_Display + '"/></div></td><td class="allInputs_InputPadding">Contrave (naltrexone hydrochloride and bupropion hydrochloride)</td></tr>';
                    resultNavBar1 += '<tr><td class="allInputs_InputCell"><div id="qysmiaValue"><input type="text" name="myQysmiaValue" size="6" value="' + my_qsymia_Display + '"/></div></td><td class="allInputs_InputPadding">Qsymia (phentermine and topiramate extended-release)</td></tr>';
                    resultNavBar1 += '<tr><td class="allInputs_InputCell"><div id="saxendaValue"><input type="text" name="mySaxendaValue" size="6" value="' + my_saxenda_Display + '"/></div></td><td class="allInputs_InputPadding">Saxenda (liraglutide)</td></tr>';
                    resultNavBar1 += '<tr><td class="allInputs_InputCell"><div id="xenicalValue"><input type="text" name="myXenicalValue" size="6" value="' + my_semaglutide_Display + '"/></div></td><td class="allInputs_InputPadding">Wegovy (semaglutide)</td></tr>';
                    resultNavBar1 += '<tr><td colspan="2" class="allInputs_SubTitle tableRowPadding">ELIGIBILITY FOR TREATMENT</td></tr>';
                    resultNavBar1 += '<tr><td class="allInputs_InputCell"><input type="text" name="myPercentageEmployeesTakingAOMsAmongThoseEligibleValue" size="6" value="100.0%" onChange="myEligibilityForTreatment();"/></td><td class="allInputs_InputPadding">% individuals taking AOMs among those eligible</td></tr>';
                    resultNavBar1 += '<tr><td colspan="2" class="allInputs_SubTitle tableRowPadding">IDE HEALTH CLUB MEMBERSHIP</td></tr>';
                    resultNavBar1 += '<tr><td class="allInputs_InputCell"><input type="text" name="myChangeInWeightedAOMWholesaleAcquisitionCostValue" size="6" value="100.0%"/></td><td class="allInputs_InputPadding">% Individuals whose employers pay for health club membership</td></tr>';
                    resultNavBar1 += '<tr><td colspan="2" class="allInputs_SubTitle tableRowPadding">COMPONENT OF ILT</td></tr>';
                    resultNavBar1 += '<tr><td class="allInputs_InputCell"><input type="text" name="myIntensiveDietAndExerciseVal" size="6" value="83.0%" onBlur="showMyIntensiveDietAndExercise();" /></td><td class="allInputs_InputPadding">IDE</td></tr>';
                    resultNavBar1 += '<tr><td class="allInputs_InputCell"><input type="text" name="myParams.myWeightWatchersValue" size="6" value="13.5%" onBlur="showMyWeightWatchers();" /></td><td class="allInputs_InputPadding">Weight Watchers</td></tr>';
                    resultNavBar1 += '<tr><td class="allInputs_InputCell"><input type="text" name="myParams.myJennyCraigValue" size="6" value="3.5%" onBlur="showMyJennyCraig();" /></td><td class="allInputs_InputPadding">Jenny Craig</td></tr>';
                    resultNavBar1 += '<tr><td colspan="2" class="allInputs_Title tableRowPadding">Absenteeism</td></tr>';
                    resultNavBar1 += '<tr><td colspan="2" class="allInputs_SubTitle tableRowPadding">COST OF MISSED WORK DAYS (ABSENTEEISM)</td></tr>';
                    resultNavBar1 += '<tr><td class="allInputs_InputCell"><input type="text" name="myEmployeeHourlyCompensationVal" id="myEmployeeHourlyCompensationID" size="6" value="$38.60"/></td><td class="allInputs_InputPadding">Hourly compensation</td></tr><tr><td class="allInputs_InputCell"><input type="text" name="myWorkingHoursInADayVal" id="myWorkingHoursInADay" size="6" value="8.0"/></td><td class="allInputs_InputPadding">Working hours in a day</td></tr>';
                    resultNavBar1 += '       </table>';
                    resultNavBar1 += '       <table border="0" class="table table-sm table-borderless">';
                    resultNavBar1 += '<tr><td colspan="2" class="allInputs_Title tableRowPadding">Treatment Discontinuation</td></tr>';
                    resultNavBar1 += '<tr><td colspan="2" class="allInputs_SubTitle">DISCONTINUATION DATA SOURCE</td></tr>';
                    resultNavBar1 += '<tr><td class="custom-select__container"><div class="custom-select in-content"><select name="discontinuationDataSource" onChange="discontinuationDataSourceType($(this).val());"><option value="baseCaseFromClinicalTrialData" selected>Base-case: From clinical trial data</option><option value="sensitivityFromRealWorldEvidence">Sensitivity: From real world evidence</option></select></div></td></tr>';
                    resultNavBar1 += '       </table>';
                    resultNavBar1 += '       <table border="0" class="table table-sm table-borderless">';
                    resultNavBar1 += '<tr><td colspan="2" class="allInputs_Note"><div id="showSiscontinuationStatement">In the base case, discontinuation for contrave and qsymia based on hazard ratio from a real world study and saxenda trial data</div></td></tr>';
                    resultNavBar1 += '       </table>';
                    resultNavBar1 += '       <table border="0" class="table table-sm table-borderless">';
                    resultNavBar1 += '<tr><td colspan="2" class="tableRowPadding">DISCONTINUATION ASSUMPTION</td></tr>';
                    resultNavBar1 += '<tr><td class="allInputs_Title allInputs_leftText tableRowPadding">Annual weight rebound for Wegovy</td><td><div class="allInputs_InputCell noMargin" id="annualweightReboundForWegovyValue"><input type="text" size="6" name="annualweightReboundForWegovy" class="custom-user-input" maxLength="5" value="33.33%"/></div></td></tr>';
                    resultNavBar1 += '<tr><td class="allInputs_Note allInputs_SubTitle">Set default assumption</td></tr>';
                    resultNavBar1 += '       </table>';
                    resultNavBar1 += '       <table border="0" class="table table-sm table-borderless">';
                    resultNavBar1 += '<tr><td class="custom-select__container"><div class="custom-select in-content"><select name="setDefaultAssumption" onChange="myDiscontinuationAssumptions();"><option value="Base-case" selected>Base-case: 100% discontinue to diet and exercise</option><option value="Sensitivity">Sensitivity: 100% discontinue to no intervention</option></select></div></td></tr>';
                    resultNavBar1 += '<tr><td><table><tr><td class="allInputs_Title allInputs_leftText tableRowPadding">Annual weight rebound<br/>for other AOMs</td><td class="allInputs_InputCell noMargin"><div id="annualWeightReboundForOtherAOMSValue"><input type="text" size="6" name="annualWeightReboundForOtherAOMs" class="custom-user-input" maxLength="5" value="50.00%"/></div></td></tr></table></td></tr>';
                    resultNavBar1 += '<tr><td class="allInputs_Note allInputs_SubTitle">Set assumptions for Wegovy and other AOMs</td></tr>';
                    resultNavBar1 += '<tr><td class="custom-select__container"><div class="custom-select in-content flow-up"><select name="setAssumptionForWegovy" onChange="myDiscontinuationAssumptions();"><option value="Base-case" selected>Base-case: Higher rates for other AOMs</option><option value="Sensitivity">Sensitivity: Same weight catch-up rates</option></select></div></td></tr>';
                    resultNavBar1 += '       </table>';
                    resultNavBar1 += '       </div>';
                    resultNavBar1 += '       <hr/>';
                    resultNavBar1 += '     </div>';
                    resultNavBar1 += '     <div class="simpleResult_rightSection">';

                    resultNavBar1 += '<table border="0">';
                    resultNavBar1 += '<tr>';
                    // resultNavBar +=  '<td colspan="5">AOM vs.: <select name="AOM_VS" onChange="myResults();">';
                    // GEOFF'S CHANGES BEGIN
                    resultNavBar1 += '<td colspan="5" class="results results-detailed">' +
                        '<div class="custom-select__container results AOM-vs">' +
                        'AOM vs.: ' +
                        '<div class="custom-select">' +
                        '<select name="AOM_VS" onChange="populateSimpleResults(currentROITables, myTimeHorizonValue);">';
                        // '<select name="AOM_VS" onChange="myResults(myParams);">';
                    // GEOFF'S CHANGES END


                    if (inputDashboard.AOM_VS) {
                        if (inputDashboard.AOM_VS.value == "No intervention") {
                            resultNavBar1 += '<option value="No intervention" selected>No intervention</option><optgroup class="divider"></optgroup>';
                        } else {
                            resultNavBar1 += '<option value="No intervention">No intervention</option><optgroup class="divider"></optgroup>';
                        }

                        if (inputDashboard.AOM_VS.value == "ILT") {
                            resultNavBar1 += '<option value="ILT" selected>ILT</option><optgroup class="divider"></optgroup>';
                        } else {
                            resultNavBar1 += '<option value="ILT">ILT</option><optgroup class="divider"></optgroup>';
                        }
                    } else {
                        resultNavBar1 += '<option value="No intervention">No intervention</option><optgroup class="divider"></optgroup>';
                        resultNavBar1 += '<option value="ILT">ILT</option><optgroup class="divider"></optgroup>';
                    }

                    // resultNavBar1 +=  '</select>&nbsp;&nbsp;Obesity class: <select name="Obesity_Class" onChange="myResults();"><optgroup class="divider"></optgroup>';

                    // GEOFF'S CHANGES BEGIN
                    resultNavBar1 += '</select></div><div class="custom-select__buffer"></div></div>' +
                        '<div class="custom-select__container results obesity">' +
                        // '&nbsp;&nbsp;View By: ' + 
                        'Obesity class: ' +
                        '<div class="custom-select constrain-width">' +
                        '<select name="Obesity_Class" onChange="populateSimpleResults(currentROITables, myTimeHorizonValue);">';
                    // GEOFF'S CHANGES END

                    var i = 0;
                    for (let valObesity of Obesity_Class.data) {

                        if (inputDashboard.Obesity_Class) {
                            if (inputDashboard.Obesity_Class.value == valObesity.Name) {
                                //                        console.log()


                                // resultNavBar1 += '<option value="Obesity classes I, II and III" selected>Obesity classes I, II and III</option><optgroup class="divider"></optgroup>';
                                resultNavBar1 += '<option value="' + valObesity.Name + '" selected>' + valObesity.ShortForm + '</option><optgroup class="divider"></optgroup>';
                            } else {
                                resultNavBar1 += '<option value="' + valObesity.Name + '">' + valObesity.ShortForm + '</option><optgroup class="divider"></optgroup>';
                                // resultNavBar1 += '<option value="Obesity classes I, II and III" selected>Obesity classes I, II and III</option><optgroup class="divider"></optgroup>';
                            }
                        } else {

                            // resultNavBar1 += '<option value="Obesity classes I, II and III" selected>Obesity classes I, II and III</option><optgroup class="divider"></optgroup>';
                            resultNavBar1 += '<option value="' + valObesity.Name + '">' + valObesity.ShortForm + '</option><optgroup class="divider"></optgroup>';

                        }

                    }

                    // resultNavBar1 +=  '</select>&nbsp;&nbsp;View By: <select name="View_By" onChange="myResults();">';
                    // GEOFF'S CHANGES BEGIN
                    resultNavBar1 += '</select></div><div class="custom-select__buffer"></div></div>' +
                        '<div class="custom-select__container results view-by">' +
                        // '&nbsp;&nbsp;View By: ' + 
                        'View By: ' +
                        '<div class="custom-select constrain-width">' +
                        '<select name="View_By" onChange="populateSimpleResults(currentROITables, myTimeHorizonValue);">';
                    // GEOFF'S CHANGES END

                    if (inputDashboard.View_By) {
                        if (inputDashboard.View_By.value == "ROI") {
                            resultNavBar1 += '<option value="ROI" selected>ROI</option><optgroup class="divider"></optgroup>';
                        } else {
                            resultNavBar1 += '<option value="ROI">ROI</option><optgroup class="divider"></optgroup>';
                        }

                        if (inputDashboard.View_By.value == "ROI as % of investment") {
                            resultNavBar1 += '<option value="ROI as % of investment" selected>ROI as % of investment</option><optgroup class="divider"></optgroup>';
                        } else {
                            resultNavBar1 += '<option value="ROI as % of investment">ROI as % of investment</option><optgroup class="divider"></optgroup>';
                        }

                        // GEOFF'S CHANGES BEGIN
                        if (inputDashboard.View_By.value == "Cost offset (population)") {
                            resultNavBar1 += '<option value="Cost offset (population)" selected>Cost offset (population)</option><optgroup class="divider"></optgroup>';
                        } else {
                            resultNavBar1 += '<option value="Cost offset (population)">Cost offset (population)</option><optgroup class="divider"></optgroup>';
                        }

                        if (inputDashboard.View_By.value == "Cost offset (per member)") {
                            resultNavBar1 += '<option value="Cost offset (per member)" selected>Cost offset (per member)</option><optgroup class="divider"></optgroup>';
                        } else {
                            resultNavBar1 += '<option value="Cost offset (per member)">Cost offset (per member)</option><optgroup class="divider"></optgroup>';
                        }

                        if (inputDashboard.View_By.value == "Cost offset (PMPM)") {
                            resultNavBar1 += '<option value="Cost offset (PMPM)" selected>Cost offset (PMPM)</option><optgroup class="divider"></optgroup>';
                        } else {
                            resultNavBar1 += '<option value="Cost offset (PMPM)">Cost offset (PMPM)</option><optgroup class="divider"></optgroup>';
                        }

                        if (inputDashboard.View_By.value == "Cost offset per treated patient per month (AOM vs. no intervention)") {
                            resultNavBar1 += '<option value="Cost offset per treated patient per month (AOM vs. no intervention)" selected>Cost offset per treated patient per month (AOM vs. no intervention)</option>';
                        } else {
                            resultNavBar1 += '<option value="Cost offset per treated patient per month (AOM vs. no intervention)">Cost offset per treated patient per month (AOM vs. no intervention)</option><optgroup class="divider"></optgroup>';
                        }

                        if (inputDashboard.View_By.value == "Cost offset (PPPM)") {
                            resultNavBar1 += '<option value="Cost offset (PPPM)" selected>Cost offset (PPPM)</option><optgroup class="divider"></optgroup>';
                        } else {
                            resultNavBar1 += '<option value="Cost offset (PPPM)">Cost offset (PPPM)</option><optgroup class="divider"></optgroup>';
                        }
                        // GEOFF'S CHANGES END

                    } else {
                        resultNavBar1 += '<option value="ROI">ROI</option><optgroup class="divider"></optgroup>';
                        resultNavBar1 += '<option value="ROI as % of investment">ROI as % of investment</option><optgroup class="divider"></optgroup>';
                        // GEOFF'S CHANGES BEGIN
                        resultNavBar1 += '<option value="Cost offset (population)">Cost offset (population)</option><optgroup class="divider"></optgroup>';
                        resultNavBar1 += '<option value="Cost offset (per member)">Cost offset (per member)</option><optgroup class="divider"></optgroup>';
                        resultNavBar1 += '<option value="Cost offset (PMPM)">Cost offset (PMPM)</option><optgroup class="divider"></optgroup>';
                        resultNavBar1 += '<option value="Cost offset per treated patient per month (AOM vs. no intervention)">Cost offset per treated patient per month (AOM vs. no intervention)</option><optgroup class="divider"></optgroup>';
                        resultNavBar1 += '<option value="Cost offset (PPPM)">Cost offset (PPPM)</option><optgroup class="divider"></optgroup>';
                        // GEOFF'S CHANGES END
                    }



                    // GEOFF'S CHANGES BEGIN
                    resultNavBar1 += '</select></div><div class="custom-select__buffer"></div></div></td>';
                    //    resultNavBar1 +=  '<td class="switchToggle__container"><div class="detailedResults_switchToggle" onClick="toggleTableSwitch()">' +
                    //    '<div class="toggleGraph"><svg viewBox="0 0 18 17" xmlns="http://www.w3.org/2000/svg"><path d="M12.8 16.2a.7.7 0 01-.7-.7V.9c0-.4.3-.7.7-.7h3.8c.4 0 .7.3.7.7v14.6c0 .4-.4.7-.7.7zm-5.6 0c-.4 0-.7-.3-.7-.6v-11c0-.2.3-.4.7-.4H11c.4 0 .7.2.7.5v11c0 .3-.4.5-.7.5zm-5.6 0c-.4 0-.7-.2-.7-.4V8.5c0-.2.3-.3.7-.3h3.8c.4 0 .7.1.7.3v7.3c0 .2-.4.4-.7.4z" fill-rule="nonzero"/></svg></div>' +
                    //    '<div class="toggleTable toggleActive"><svg viewBox="0 0 17 17" xmlns="http://www.w3.org/2000/svg"><path d="M.9 11.7c0-.4.3-.7.7-.7h14.6c.4 0 .7.3.7.7v3.6c0 .4-.3.7-.7.7H1.5a.7.7 0 01-.6-.6zm0-5.5c0-.4.3-.7.7-.7h14.6c.4 0 .7.3.7.7v3.7c0 .4-.3.7-.7.7H1.5a.7.7 0 01-.6-.7zM.9.7c0-.4.3-.7.7-.7h14.6c.4 0 .7.3.7.7v3.7c0 .4-.3.7-.7.7H1.5a.7.7 0 01-.6-.7z" /></svg></div>' +
                    //    '</div></td>';

                    // GEOFF'S CHANGES END


                    resultNavBar1 += '</tr>';
                    resultNavBar1 += '<tr>';
                    resultNavBar1 += '<td>';
                    resultNavBar1 += '<div class="simpleResult_rightTable">';
                    resultNavBar1 += '<div class="simpleResult_rightTableTop"><div class="simpleResult_tableTitle"><h3>People overweight/with obesity</h3>ROI of AOM vs No intervention in patients with People overweight/with obesity in 10 years</div>';
                    resultNavBar1 += '<div class="simpleResult_tableValue">$0.49</div></div>';
                    resultNavBar1 += '<div class="simpleResult_population"><img src="./res/img/icon-population.png"/><span class="populationContainer" id="poi-button">4,635</span></div>';
                    resultNavBar1 += '<hr/>';
                    resultNavBar1 += '<div class="simpleResult_rightTableChart graphHolder" id="bmiChartHolder"></div>';
                    resultNavBar1 += '<div class="simpleResult_rightTableTable tableHolder resultHidden">';
                    // resultNavBar1 += '<table class="simpleResult_roiTable">'
                    // resultNavBar1 += '<tr><th>Year</th><th>ROI</th></tr>'
                    // resultNavBar1 += '<tr><td>Year 1</td><td>$0.26</td></tr>'
                    // resultNavBar1 += '<tr><td>Year 2</td><td>$0.26</td></tr>'
                    // resultNavBar1 += '<tr><td>Year 3</td><td>$0.26</td></tr>'
                    // resultNavBar1 += '<tr><td>Year 4</td><td>$0.26</td></tr>'
                    // resultNavBar1 += '<tr><td>Year 5</td><td>$0.26</td></tr>'
                    // resultNavBar1 += '<tr><td>Year 6</td><td>$0.26</td></tr>'
                    // resultNavBar1 += '<tr><td>Year 7</td><td>$0.26</td></tr>'
                    // resultNavBar1 += '<tr><td>Year 8</td><td>$0.26</td></tr>'
                    // resultNavBar1 += '<tr><td>Year 9</td><td>$0.26</td></tr>'
                    // resultNavBar1 += '<tr><td>Year 10</td><td>$0.26</td></tr>'
                    // resultNavBar1 += '</table>'
                    resultNavBar1 += '</div>';
                    resultNavBar1 += '</div>';
                    resultNavBar1 += '<div class="simpleResult_tableNote">*All refers to overweight and obesity classes I, II, and III</div>';
                    resultNavBar1 += '<div class="simpleResult_buttonRow">';
                    resultNavBar1 += '<div class="simpleResult_switchToggle" onClick="toggleTableSwitch()">' +
                        '<div class="toggleGraph toggleActive"><svg viewBox="0 0 18 17" xmlns="http://www.w3.org/2000/svg"><path d="M12.8 16.2a.7.7 0 01-.7-.7V.9c0-.4.3-.7.7-.7h3.8c.4 0 .7.3.7.7v14.6c0 .4-.4.7-.7.7zm-5.6 0c-.4 0-.7-.3-.7-.6v-11c0-.2.3-.4.7-.4H11c.4 0 .7.2.7.5v11c0 .3-.4.5-.7.5zm-5.6 0c-.4 0-.7-.2-.7-.4V8.5c0-.2.3-.3.7-.3h3.8c.4 0 .7.1.7.3v7.3c0 .2-.4.4-.7.4z" fill-rule="nonzero"/></svg></div>' +
                        '<div class="toggleTable"><svg viewBox="0 0 17 17" xmlns="http://www.w3.org/2000/svg"><path d="M.9 11.7c0-.4.3-.7.7-.7h14.6c.4 0 .7.3.7.7v3.6c0 .4-.3.7-.7.7H1.5a.7.7 0 01-.6-.6zm0-5.5c0-.4.3-.7.7-.7h14.6c.4 0 .7.3.7.7v3.7c0 .4-.3.7-.7.7H1.5a.7.7 0 01-.6-.7zM.9.7c0-.4.3-.7.7-.7h14.6c.4 0 .7.3.7.7v3.7c0 .4-.3.7-.7.7H1.5a.7.7 0 01-.6-.7z" /></svg></div>' +
                        '</div>';
                        // console.log('txt18_29-9',myAges18To29);
                        // console.log('txt30_39-9',myAges30To39);
                        // console.log('txt40_49-9',myAges40To49);
                        // console.log('txt50_59-9',myAges50To59);
                        // console.log('txt60_64-9',myAges60To64);


                        resultNavBar1 += '<div><button class="exportBtn">Export report</button><button class="fullResultBtn" onclick="toShowSummaryResult(myParams,currentROITables,currentDistributionTables,currentEventsTables)">Full results</button><img class="arrowIcon" src="./res/img/icon-arrow.svg"/></div></div>'
                    resultNavBar1 += '</td>';
                    resultNavBar1 += '</tr>';







                    resultNavBar1 += '</table>';
                    resultNavBar1 += '</div>';
                    resultNavBar1 += '</div>';
                    resultNavBar1 += '</div>';



                    resultNavBar1 += '</div>';
                    resultNavBar1 += '</div>';
                    resultNavBar1 += '</div>';
                    document.getElementById("myInput2").innerHTML = "";
                    console.log("myInput2 cleared : line 25411");
                    document.getElementById("myInput").innerHTML = resultNavBar1;

					// attach modal functionality for POI modal
					poi_modal_results.init();
                    console.log(myTimeHorizonValue)

                    // const chartData = handleComorbiditiesDataChange(myTimeHorizonValue);
                    // if (inputDashboard.View_By.value == "ROI as % of investment") {
                    //     getBmiData(chartData, myTimeHorizonValue, true);
                    // } else {
                    //     getBmiData(chartData, myTimeHorizonValue);
                    // }
                    // toShowSummaryResult(myParams.myWorkingHoursInADayValue, myParams.myEmployeeHourlyCompensationValue, myParams.myWeightWatchersValue, myParams.myIDEValue, myParams.myJennyCraigValue, myParams.myIDEMembershipValue, params.fullResultsPage);

                    // const obClass = [
                    //     "Overweight and obesity (I, II, and III)", 
                    //     "Obesity classes I, II and III", 
                    //     "Obesity classes II and III", "Obesity class III"
                    // ];

                    // const POI = [
                    //     "People with overweight/ obesity",
                    //     "Cardiovascular diseases",
                    //     "Cerebrovascular diseases",
                    //     "Dyslipidemia",
                    //     "Hypertension",
                    //     "Osteoarthritis",
                    //     "Diabetes",
                    //     "Cardiovascular diseases (with cerebrovascular diseases)",
                    //     "Any cardiometabolic disease*",
                    //     "Cardiovascular diseases (with dyslipidemia)",
                    //     "Cardiovascular diseases (with hypertension)",
                    //     "Cardiovascular diseases (with diabetes)",
                    //     "Osteoarthritis (with cardiovascular diseases)",
                    //     "Osteoarthritis (with diabetes)"
                    // ];

                    // const topFiveIndustry = inputDashboard.selectIndustry.value;

                    // const topFiveViewBy = inputDashboard.View_By.value;

                    // console.log(topFiveViewBy); 

                    // const topFiveYear = myTimeHorizonValue;

                    // const topFive = populateArr();


                    // function populateArr() {
                    //     let totalArr = [];

                    //     for (i=0; i<56; i++) {
                    //         if (i < 14) {
                    //             // run calculation - pass industry, POI, ob class as argument
                    //             totalArr.push({vs:"NI", obesityClass:obClass[0], POI:POI[i]})
                    //         } else if (i > 13 && i < 28) {
                    //             // run calculation - pass industry, POI, ob class as argument
                    //             totalArr.push({vs:"NI", obesityClass:obClass[1], POI:POI[i - 14]})
                    //         } else if (i > 27 && i < 42) {
                    //             // run calculation - pass industry, POI, ob class as argument
                    //             totalArr.push({vs:"NI", obesityClass:obClass[2], POI:POI[i - 28]})
                    //         } else {
                    //             // run calculation - pass industry, POI, ob class as argument
                    //             totalArr.push({vs:"NI", obesityClass:obClass[3], POI:POI[i - 42]})
                    //         }
                    //     }
                    //     return totalArr;
                    // }

                    // console.log(table3.ROI_Savings_Investment, 'table3');
                    // console.log(topFive, "top5");

                    // console.log(inputDashboard.AOM_VS.value   , 'AOM chart');

                    $(".topResultsSectionBtn").on("click", function () {
                        if ($(this).hasClass("expanded")) {
                            $(this).removeClass("expanded")
                            $(".topResultsSection").removeClass("expanded")
                        } else {
                            $(this).addClass("expanded")
                            $(".topResultsSection").addClass("expanded")
                            $(".comorbiditiesSection").removeClass("expanded")
                            $(".inputSection").removeClass("expanded")
                            $(".comorbiditiesSectionBtn").removeClass("expanded")
                            $(".inputSectionBtn").removeClass("expanded")
                            // const finalTopFive = buildTopFive();
                            // console.log(finalTopFive, "FINAL")

                        }
                    })
                    $(".comorbiditiesSectionBtn").on("click", function () {
                        if ($(this).hasClass("expanded")) {
                            $(this).removeClass("expanded")
                            $(".comorbiditiesSection").removeClass("expanded")
                        } else {
                            $(this).addClass("expanded")
                            $(".topResultsSection").removeClass("expanded")
                            $(".comorbiditiesSection").addClass("expanded")
                            $(".inputSection").removeClass("expanded")
                            $(".topResultsSectionBtn").removeClass("expanded")
                            $(".inputSectionBtn").removeClass("expanded")
                        }
                    })
                    $(".inputSectionBtn").on("click", function () {
                        if ($(this).hasClass("expanded")) {
                            $(this).removeClass("expanded")
                            $(".inputSection").removeClass("expanded")
                        } else {
                            $(this).addClass("expanded")
                            $(".topResultsSection").removeClass("expanded")
                            $(".comorbiditiesSection").removeClass("expanded")
                            $(".inputSection").addClass("expanded")
                            $(".topResultsSectionBtn").removeClass("expanded")
                            $(".comorbiditiesSectionBtn").removeClass("expanded")
                        }
                    })


                    const graph = "<div class='detailedResults_graphHolder resultHidden'>" +
                        "<div><div class='detailedResults_graphTitle'>AOMS vs no intervention</div><div class='Gplaceholder'></div></div>" +
                        "<div><div class='detailedResults_graphTitle'>AOMS vs ILT</div><div class='Gplaceholder'></div></div>" +
                        "</div>"
                    $(".table-content").append(graph)


                    buildCustomSelect();
                    populateSimpleResults(currentROITables, myTimeHorizonValue)
                }























            </script>







            <div class="container all-inputs">
                <div class="table-responsive">


                    <!--table border="0" class="table table-sm table-borderless">
                <thead>
                    <tr>
                        <th colspan="7">Wegovy<sup>TM</sup> (semaglutide) Obesity Impact Tool</div></th>
                    </tr>
                </thead>
                <tbody>
                    <tr>
                        <td colspan="7"-->
                    <div class="sprite layer inputsTray">
                        <div id="MyNavbar">
                            <table border="0" class="table table-sm table-borderless">
                                <tr>


                                    <td colspan="2" class="col-sm-4 col-md-4 col-lg-4"><b>Industry Category</b></td>
                                    <td colspan="2" class="col-sm-4 col-md-4 col-lg-4"><b>Number of Individuals</b></td>
                                    <td colspan="2" class="col-sm-4 col-md-4 col-lg-4"><b>Time Horizon (years)</b></td>
                                    <!-- <td rowspan="2" valign="center" align="center"><input type="button" class="trayCalculateButton" name="Calculate" value="Calculate" onClick="toShowSummaryResult(myParams,currentROITables,currentDistributionTables,currentEventsTables);"></input></td> -->

                                    <!-- <td rowspan="2" valign="center" align="center"><input type="button" class="trayCalculateButton calculate-button background-green" name="Calculate" value="Calculate" onClick="toShowSummaryResult(myParams,currentROITables,currentDistributionTables,currentEventsTables);"></input></td> -->
                                </tr>
                                <tr>
                                    <td colspan="2">


                                        <div id="showIndustry" class="custom-select flow-up"></div>

                                        <script>

                                            function showMyIndustry() {
                                                "use strict";

                                                // use for-of (ES2015+) to iterate over the first dimesion of 
                                                // our native JS object (data.applicants).
                                                for (let val of industry_classified.myIndustry) {
                                                    //      console.log('hello ' + val.Industry + ', it looks like you\'re ' + val.Industry_name);
                                                }

                                                // create an intermediate array to hold the text strings
                                                let txtArr = [];

                                                txtArr.push('<select name="selectIndustry" onChange="showIndustryAgeDistribution();" style="width:100px;">');

                                                for (let val of industry_classified.myIndustry) {
                                                    // push the text into the array
                                                    txtArr.push('<option value="' + val.Industry + '">' + val.Industry_name + '</option><optgroup class="divider"></optgroup>');
                                                    //      console.log('txtArr ==> ', txtArr);
                                                }

                                                txtArr.push('</select>');


                                                // join the array with <br /> tags as separators
                                                let txt = txtArr;
                                                //  let txt = txtArr.join('<br>');
                                                //  console.log('txt ==> ', txt);
                                                //alert(txt);
                                                document.getElementById("showIndustry").innerHTML = txt;

                                                // write to DOM target
                                                // document.getElementById('demo').innerHTML(txt);

                                                return txt;

                                            }
                                            showMyIndustry();



                                            var discontinuationDataSourceValue;

                                            function discontinuationDataSourceType(myInput) {
                                                if (myInput == "baseCaseFromClinicalTrialData") {
                                                    document.getElementById("showSiscontinuationStatement").innerHTML = "In the base case, discontinuation for contrave and qsymia based on hazard ratio from a real world study and saxenda trial data.";
                                                    discontinuationDataSourceValue = "baseCaseFromClinicalTrialData";
                                                } else {
                                                    document.getElementById("showSiscontinuationStatement").innerHTML = "";
                                                    discontinuationDataSourceValue = "sensitivityFromRealWorldEvidence";
                                                }

                                                return discontinuationDataSourceValue;
                                            }

//        console.log(discontinuationDataSourceValue);


                                        </script>

                                    </td>
                                    <td colspan="2">
                                        <div class="number-input number-input__container input-hide flow-up" id="number-input">
                                            <div id="myPopulation"><input type="text" value="10,000"
                                                    name="numberOfIndividuals" id="numberOfIndividualsID"
                                                    onchange="formatPopulation($(this).val());" size="6"
                                                    inputmode="numeric" /></div>
                                            <div class="number-input number-input__display" id="number-input__display">
                                            </div>

                                            <div class="number-input number-input__numberpad">
                                                <button class="number-input number-input__button zero"
                                                    value="0">0</button>
                                                <button class="number-input number-input__button one"
                                                    value="1">1</button>
                                                <button class="number-input number-input__button two"
                                                    value="2">2</button>
                                                <button class="number-input number-input__button three"
                                                    value="3">3</button>
                                                <button class="number-input number-input__button four"
                                                    value="4">4</button>
                                                <button class="number-input number-input__button five"
                                                    value="5">5</button>
                                                <button class="number-input number-input__button six"
                                                    value="6">6</button>
                                                <button class="number-input number-input__button seven"
                                                    value="7">7</button>
                                                <button class="number-input number-input__button eight"
                                                    value="8">8</button>
                                                <button class="number-input number-input__button nine"
                                                    value="9">9</button>
                                                <div class="number-input number-input__delete-container">
                                                    <button class="number-input number-input__delete"></button>
                                                </div>
                                            </div>

                                        </div>

                                    </td>
                                    <td colspan="2">
                                        <!--
                                        <div class="value">10</div>
                                        <input name="timeHorizon" type="range" min="0" max="10" step="1" value="10" onChange="toDisplay();"/>
--->


                                        <div class="range-slider range-slider__container">
                                            <input type="range" min="1" max="10" step="1" value="1"
                                                class="range-slider range-slider__range" id="range-slider__range"
                                                onChange="showMe();" )>
                                            <div class="range-slider__thumb" id="range-slider__thumb"></div>
                                        </div>
                                        <script>
//    var myTimeHorizonValue = 10;
                                        </script>

                                        <!-- corsair: these are called above
    <script src="js/range-slider.js"></script>
    <script src="js/jquery.js"></script>
	-->
                                        <script>
                                            var tempValue = formatPopulation();
                                            //console.log(tempValue);
                                            var elem = document.querySelector('input[type="range"]');

                                            var rangeValue = function () {
                                                var newValue = elem.value;
                                                var target = document.querySelector('.value');
                                                //                                target.innerHTML = newValue;
                                            }

                                            elem.addEventListener("input", rangeValue);

//                                console.log(myTimeHorizon);




                                        </script>



                                    </td>
                                    <td rowspan="2" valign="center" align="center">
                                        <div class="calculate-button-container">
                                            <div class="arrows-svg-container">
                                                <svg width="22px" height="18px" viewBox="0 0 22 18" version="1.1"
                                                    xmlns="http://www.w3.org/2000/svg"
                                                    xmlns:xlink="http://www.w3.org/1999/xlink">
                                                    <path class="arrow-down"
                                                        d="M50.5903123,22.1609593 C50.5883222,19.6103737 49.8028934,17.2418293 48.4652099,15.2842164 C48.4463039,15.2517568 48.4330365,15.2176241 48.410482,15.1854992 C48.2446398,14.9469046 48.0638717,14.7237033 47.882772,14.4991634 C47.8622076,14.4727273 47.8433016,14.4439487 47.820747,14.4175125 C46.5978264,12.9200223 45.0604689,11.7625209 43.3197888,11.0055772 C43.2710312,10.9848299 43.2236003,10.9620747 43.1765011,10.9409927 C42.8978861,10.8252091 42.6136325,10.7224763 42.3270572,10.6271054 C42.2232399,10.5919688 42.1217445,10.5548243 42.0179272,10.5226994 C41.7671738,10.4467373 41.5147619,10.3858338 41.2583698,10.3252649 C41.1170722,10.29314 40.9777647,10.2566648 40.834477,10.2282209 C40.765155,10.2151701 40.6971597,10.1937535 40.6278376,10.1807027 C40.4374507,10.1472393 40.2470638,10.13285 40.0546869,10.1084216 C39.9230081,10.0913553 39.7926561,10.0702733 39.6609774,10.0568879 C39.3402385,10.0264361 39.0218214,10.0133854 38.7034043,10.0083659 C38.6453595,10.0076966 38.5896366,10 38.5322551,10 C38.5209779,10 38.511359,10.0026771 38.5010768,10.0040156 C36.0529137,10.0056888 33.6657806,10.7509202 31.6169656,12.1995538 C30.9622205,12.6613497 30.8033436,13.5722253 31.262395,14.2324596 C31.7197878,14.8926938 32.6223013,15.0533185 33.2770464,14.5905187 C34.859513,13.4728388 36.7069955,12.905633 38.6002505,12.9237033 C38.8715684,12.9253765 39.1395694,12.9387619 39.4045853,12.9645287 C39.4855163,12.9728946 39.5664473,12.9852761 39.64771,12.9959844 C39.8662901,13.0224205 40.08288,13.0528723 40.2938314,13.0947016 C40.3876981,13.1137758 40.480238,13.1385388 40.5724463,13.1592861 C40.7817392,13.2071389 40.9907004,13.258338 41.1943547,13.3209147 C41.2580381,13.3399888 41.3223849,13.3644172 41.3860683,13.3854992 C41.6199059,13.4624651 41.8497632,13.5454545 42.0739819,13.6404908 C42.0965364,13.6498606 42.119091,13.6615728 42.1416455,13.6706079 C43.4906063,14.2562186 44.6740565,15.1570552 45.5968027,16.2844395 C45.602773,16.2911322 45.6080799,16.299498 45.6140502,16.3058561 C46.9119316,17.9017289 47.6940435,19.9409927 47.695702,22.1609593 L45.2823658,22.1609593 L49.1428413,28 L53,22.1609593 L50.5903123,22.1609593 Z"
                                                        id="Path"></path>
                                                </svg>


                                                <svg width="22px" height="18px" viewBox="0 0 22 18" version="1.1"
                                                    xmlns="http://www.w3.org/2000/svg"
                                                    xmlns:xlink="http://www.w3.org/1999/xlink">
                                                    <path class="arrow-up"
                                                        d="M43.7229892,29.4042624 C42.1278791,30.5307048 40.264817,31.0972705 38.357649,31.0698452 C38.1062782,31.0661662 37.8555707,31.0547948 37.6078478,31.0320519 C37.5070342,31.0226872 37.4052257,31.00563 37.3037488,30.9922518 C37.109749,30.9678366 36.9157491,30.9410803 36.7244022,30.9029525 C36.6076706,30.8802096 36.4939237,30.8514465 36.3788503,30.8233523 C36.1924777,30.7795388 36.0077633,30.7357253 35.8263652,30.6805403 C35.7384849,30.6541184 35.6535892,30.6216764 35.567367,30.5932477 C35.3571176,30.5230123 35.1491895,30.4487634 34.9465674,30.3631431 C34.9001401,30.3440792 34.8560341,30.3233431 34.8099384,30.3022724 C34.5724959,30.1975882 34.3390328,30.0858805 34.1122021,29.9617979 C34.1019218,29.9564466 34.0923047,29.9504264 34.0820244,29.9447407 C33.3143155,29.5213215 32.6125997,28.9912113 31.9977693,28.3718018 C31.987489,28.3607648 31.9778719,28.3493933 31.9675915,28.3393597 C31.7775711,28.1457106 31.5948465,27.9420279 31.4214073,27.7316561 C31.3842654,27.6878426 31.3501082,27.6386778 31.3132979,27.5928575 C30.0597603,26.0125606 29.3043214,24.012189 29.3043214,21.834891 L31.7155575,21.834891 L27.8574471,16 L24,21.8355599 L26.4112361,21.8355599 C26.4112361,24.3944704 27.2021587,26.7654174 28.5455663,28.725989 C28.5624792,28.754752 28.5737544,28.7828462 28.5926569,28.8096026 C28.7322705,29.0109441 28.8864755,29.1952285 29.035043,29.3851985 C29.091419,29.4574407 29.142489,29.5316896 29.2008548,29.6015905 C29.4213846,29.8698229 29.6548477,30.1243427 29.89428,30.37117 C29.9164988,30.3939129 29.9387176,30.4186626 29.9622629,30.4414055 C30.7684402,31.2568052 31.678084,31.9421022 32.6699706,32.4892696 C32.6971637,32.5046545 32.7226987,32.5217117 32.7498919,32.5350898 C33.0364148,32.6906111 33.3285753,32.8317509 33.6280315,32.9625225 C33.701652,32.9949646 33.7739459,33.0307512 33.8482297,33.0631933 C34.1045748,33.1695498 34.3648994,33.2628626 34.6282086,33.3498207 C34.7525675,33.3939687 34.8769264,33.4374477 35.0029435,33.4752411 C35.2324271,33.5454765 35.4682115,33.6023337 35.7056541,33.6595254 C35.8628438,33.6956465 36.0190385,33.735781 36.1792128,33.7678887 C36.2452059,33.7812668 36.3082144,33.8003307 36.3745392,33.8113677 C36.5983852,33.8515023 36.8225628,33.8742452 37.0457456,33.9010015 C37.1269934,33.9107007 37.2055882,33.9257511 37.2878309,33.9334436 C37.688764,33.9732437 38.0903603,34 38.4902985,34 C40.9419927,34 43.3323365,33.2434642 45.3834292,31.7942734 C46.0370595,31.3323919 46.1972338,30.422676 45.7372717,29.7634664 C45.2789677,29.1019157 44.3749614,28.9423809 43.7229892,29.4042624 Z"
                                                        id="Path"></path>
                                                </svg>
                                            </div>
                                            <input type="button"
                                                class="trayCalculateButton calculate-button background-green"
                                                name="Calculate" value="Calculate"
                                                onClick="calculateResults(myParams, totalCostsTable);"></input>
                                            <!-- <input type="button"
                                                class="trayCalculateButton calculate-button background-green"
                                                name="Calculate" value="Calculate"
                                                onClick="toShowSummaryResult(myParams,currentROITables,currentDistributionTables,currentEventsTables);"></input> -->

                                            </div>
                                        
                                    </td>

                                </tr>
                            </table>
                        </div>
                        <div class="inputsTrayTrigger">ALL INPUTS</div>
                        <!--/td>
                    </tr>
                    <tr>
                        <td colspan="7" valign="top"-->
                        <div id="myInput">
                            <table class="allInputs_Table">
                                <tr>
                                    <td colspan="2" valign="top" class="allInputs_firstColumn">
                                        <table>
                                            <tr>
                                                <td colspan="2" class="allInputs_Title">Age Distribution</td>
                                            </tr>
                                            <tr>
                                                <td class="allInputs_InputCell">
                                                    <div id="ages_18_to_29_display"><input type="text"
                                                            name="ages18To29Display"  value="" /></div>
                                                </td>
                                                <td class="allInputs_InputPadding">Ages 18-29</td>
                                            </tr>
                                            <tr>
                                                <td class="allInputs_InputCell">
                                                    <div id="ages_30_to_39_display"><input type="text"
                                                            name="ages30To39Display"  value="" /></div>
                                                </td>
                                                <td class="allInputs_InputPadding">Ages 30-39</td>
                                            </tr>
                                            <tr>
                                                <td class="allInputs_InputCell">
                                                    <div id="ages_40_to_49_display"><input type="text"
                                                            name="ages40To49Display"  value="" /></div>
                                                </td>
                                                <td class="allInputs_InputPadding">Ages 40-49</td>
                                            </tr>
                                            <tr>
                                                <td class="allInputs_InputCell">
                                                    <div id="ages_50_to_59_display"><input type="text"
                                                            name="ages50To59Display"  value="" /></div>
                                                </td>
                                                <td class="allInputs_InputPadding">Ages 50-59</td>
                                            </tr>
                                            <tr>
                                                <td class="allInputs_InputCell">
                                                    <div id="ages_60_to_64_display"><input type="text"
                                                            name="ages60To64Display"  value="" /></div>
                                                </td>
                                                <td class="allInputs_InputPadding">Ages 60-64</td>
                                            </tr>
                                            <tr>
                                                <td colspan="2" class="allInputs_Title tableRowPadding">Sex Distribution
                                                </td>
                                            </tr>
                                            <tr>
                                                <td class="allInputs_InputCell">
                                                    <div id="Women_display"><input type="text" name="womenDisplay" 
                                                            value="" size="6" /></div>
                                                </td>
                                                <td class="allInputs_InputPadding">Female</td>
                                            </tr>
                                            <tr>
                                                <td class="allInputs_InputCell">
                                                    <div id="Men_display"><input type="text" name="menDisplay"  value=""
                                                            size="6" /></div>
                                                </td>
                                                <td class="allInputs_InputPadding">Male</td>
                                            </tr>
                                            <tr>
                                                <td colspan="2" class="allInputs_Title tableRowPadding">Direct Costs
                                                </td>
                                            </tr>
                                            <tr>
                                                <td class="allInputs_CheckboxCell">
                                                    <div id="medicalCostsCheckbox"><input type="checkbox" name="medicalCostsChkbx" id="medicaCostID" checked onClick="showMedicalCostsCheckbox();"/><label for="medicaCostID">&#10003;</label></div>
                                                </td>
                                                <td class="allInputs_CheckboxPadding">Medical costs</td>
                                            </tr>
                                            <tr>
                                                <td class="allInputs_CheckboxCell">
                                                    <div id="pharmacyCostsCheckbox"><input type="checkbox" name="pharmacyCostsChkbx" id="pharmacyCostsID" checked onClick="showPharmacyCostsCheckbox();"/><label for="pharmacyCostsID">&#10003;</label></div>
                                                </td>
                                                <td class="allInputs_CheckboxPadding">Pharmacy costs</td>
                                            </tr>

                                            <tr>
                                                <td colspan="2" class="allInputs_Title tableRowPadding">Indirect Costs
                                                </td>
                                            </tr>
                                            <tr>
                                                <td class="allInputs_CheckboxCell">
                                                    <div id="absenteeismCheckbox"><input type="checkbox" name="absenteeismChkbx" id="absenteeismID" checked onClick="showAbsenteeismCheckbox();"/><label for="absenteeismID">&#10003;</label></div>
                                                </td>
                                                <td class="allInputs_CheckboxPadding">Absenteeism</td>
                                            </tr>
                                            <tr>
                                                <td class="allInputs_CheckboxCell">
                                                    <div id="presenteeismCheckbox"><input type="checkbox" name="presenteeismChkbx" id="presenteeismID" checked onClick="showPresenteeismCheckbox();"/><label for="presenteeismID">&#10003;</label></div>
                                                </td>
                                                <td class="allInputs_CheckboxPadding">Presenteeism</td>
                                            </tr>
                                            <tr>
                                                <td class="allInputs_CheckboxCell">
                                                    <div id="workersCompensationCheckbox"><input type="checkbox" name="workersCompensationChkbx" id="workersCompensationID" checked onClick="showWorkersCompensationCheckbox();"/><label for="workersCompensationID">&#10003;</label></div>
                                                </td>
                                                <td class="allInputs_CheckboxPadding">Workers' compensation</td>
                                            </tr>
                                            <tr>
                                                <td class="allInputs_CheckboxCell">
                                                    <div id="shortTermAndLongTermDisabilityCheckbox"><input type="checkbox" name="shortTermAndLongTermDisabilityChkbx" id="shortTermAndLongTermDisabilityID" checked onClick="showShortTermAndLongTermDisabilityCheckbox();"/><label for="shortTermAndLongTermDisabilityID">&#10003;</label></div>
                                                </td>
                                                <td class="allInputs_CheckboxPadding">Short-term and long-term
                                                    disability</td>
                                            </tr>
                                        </table>
                                    </td>
                                    <td colspan="2" valign="top" class="allInputs_secondColumn">
                                        <table>
                                            <tr>
                                                <td colspan="2" class="allInputs_Title">Treatments</td>
                                            </tr>
                                            <tr>
                                                <td colspan="2" class="allInputs_SubTitle">COMPONENTS OF MAIN TREATMENT
                                                    ARM</td>
                                            </tr>
                                            <tr>
                                                <td class="allInputs_InputCell">
                                                    <div id="contraveValue"><input type="text" name="myContraveValue" 
                                                            size="6" value=""/></div>
                                                </td>
                                                <td class="allInputs_InputPadding">Contrave (naltrexone hydrochloride
                                                    and bupropion hydrochloride)</td>
                                            </tr>
                                            <tr>
                                                <td class="allInputs_InputCell">
                                                    <div id="qysmiaValue"><input type="text" name="myQysmiaValue" 
                                                            size="6" value="" /></div>
                                                </td>
                                                <td class="allInputs_InputPadding">Qsymia (phentermine and topiramate
                                                    extended-release)</td>
                                            </tr>
                                            <tr>
                                                <td class="allInputs_InputCell">
                                                    <div id="saxendaValue"><input type="text" name="mySaxendaValue" 
                                                            size="6" value="" /></div>
                                                </td>
                                                <td class="allInputs_InputPadding">Saxenda (liraglutide)</td>
                                            </tr>
                                            <tr>
                                                <td class="allInputs_InputCell">
                                                    <div id="xenicalValue"><input type="text" name="myXenicalValue" 
                                                            size="6" value="" /></div>
                                                </td>
                                                <td class="allInputs_InputPadding">Wegovy (semaglutide)</td>
                                            </tr>
                                            <tr>
                                                <td colspan="2" class="allInputs_SubTitle tableRowPadding">ELIGIBILITY
                                                    FOR TREATMENT</td>
                                            </tr>
                                            <tr>
                                                <td class="allInputs_InputCell"><input type="text"
                                                        
                                                        name="myPercentageEmployeesTakingAOMsAmongThoseEligibleValue"
                                                        size="6" value="100.0%"
                                                        onChange="myEligibilityForTreatment();" /></td>
                                                <td class="allInputs_InputPadding">% individuals taking AOMs among those
                                                    eligible</td>
                                            </tr>
                                            <tr>
                                                <td colspan="2" class="allInputs_SubTitle tableRowPadding">IDE HEALTH
                                                    CLUB MEMBERSHIP</td>
                                            </tr>
                                            <tr>
                                                <td class="allInputs_InputCell"><input type="text"
                                                        name="IDEMembershipVal" id="IDEMembership"  size="6"
                                                        value="100.0%" /></td>
                                                <td class="allInputs_InputPadding">% Individuals whose employers pay for
                                                    health club membership</td>
                                            </tr>
                                            <tr>
                                                <td colspan="2" class="allInputs_SubTitle tableRowPadding">COMPONENT OF ILT</td>
                                            </tr>
                                            <tr>
                                                <td class="allInputs_InputCell"><input type="text"
                                                        name="myIntensiveDietAndExerciseVal"
                                                        id="myIntensiveDietAndExercise"  size="6" value="83.0%" onBlur="showMyIntensiveDietAndExercise();" /></td>
                                                <td class="allInputs_InputPadding">IDE</td>
                                            </tr>
                                            <tr>
                                                <td class="allInputs_InputCell"><input type="text"
                                                        name="myWeightWatchersVal" id="myWeightWatchers"  size="6" value="13.5%" onBlur="showMyWeightWatchers();" /></td>
                                                <td class="allInputs_InputPadding">Weight Watchers</td>
                                            </tr>
                                            <tr>
                                                <td class="allInputs_InputCell"><input type="text" name="myJennyCraigVal" id="myJennyCraig"  size="6" value="3.5%" onBlur="showMyJennyCraig();" /></td>
                                                <td class="allInputs_InputPadding">Jenny Craig</td>
                                            </tr>
                                        </table>
                                    </td>
                                    <td colspan="2" valign="top" class="allInputs_thirdColumn">
                                        <table>
                                            <tr>
                                                <td class="allInputs_Title">Absenteeism</td>
                                            </tr>
                                            <tr>
                                                <td class="allInputs_SubTitle">COST OF MISSED WORK DAYS (ABSENTEEISM)
                                                </td>
                                            </tr>
                                            <tr>
                                                <td>
                                                    <table>

                                                        <tr>
                                                            <td class="allInputs_InputCell"><input type="text"
                                                                    name="myEmployeeHourlyCompensationVal"
                                                                    id="myEmployeeHourlyCompensationID"   size="6"
                                                                    value="$38.60" /></td>
                                                            <td class="allInputs_InputPadding">Hourly compensation</td>
                                                        </tr>
                                                        <tr>
                                                            <td class="allInputs_InputCell"><input type="text"
                                                                    name="myWorkingHoursInADayVal"
                                                                    id="myWorkingHoursInADay"  size="6" value="8.0" />
                                                            </td>
                                                            <td class="allInputs_InputPadding">Working hours in a day
                                                            </td>
                                                        </tr>
                                                    </table>
                                                </td>
                                            </tr>
                                            <tr>
                                                <td class="allInputs_Title tableRowPadding">Treatment Discontinuation
                                                </td>
                                            </tr>
                                            <tr>
                                                <td class="allInputs_SubTitle">DISCONTINUATION DATA SOURCE</td>
                                            </tr>
                                            <tr>
                                                <td class="custom-select__container">
                                                    <div class="custom-select in-content">
                                                        <select name="discontinuationDataSource"
                                                            onChange="discontinuationDataSourceType($(this).val());">
                                                            <option value="baseCaseFromClinicalTrialData" selected>
                                                                Base-case: From clinical trial data</option>
                                                            <option value="sensitivityFromRealWorldEvidence">
                                                                Sensitivity: From real world evidence</option>
                                                        </select>
                                                    </div>
                                                </td>
                                            </tr>
                                            <tr>
                                                <td class="allInputs_Note">
                                                    <div id="showSiscontinuationStatement">In the base case,
                                                        discontinuation for contrave and qsymia based on hazard ratio
                                                        from a real world study and saxenda trial data</div>
                                                </td>
                                            </tr>
                                            <tr>
                                                <td class="tableRowPadding">DISCONTINUATION ASSUMPTION</td>
                                            </tr>
                                            <tr>
                                                <td>
                                                    <table>
                                                        <tr>
                                                            <td class="allInputs_InputPadding allInputs_leftText">Annual
                                                                weight rebound for Wegovy</td>
                                                            <td>
                                                                <div class="allInputs_InputCell noMargin"
                                                                    id="annualweightReboundForWegovyValue"><input
                                                                        type="text" size="6"
                                                                        name="annualweightReboundForWegovy" class="custom-user-input" maxLength="5"
                                                                        value="33.33%" /></div>
                                                            </td>
                                                        </tr>
                                                    </table>
                                                </td>
                                            </tr>
                                            <tr>
                                                <td class="allInputs_Note">Set default assumption</td>
                                            </tr>
                                            <tr>
                                                <td class="custom-select__container">
                                                    <div class="custom-select in-content">
                                                        <select name="setDefaultAssumption"
                                                            onChange="myDiscontinuationAssumptions();">
                                                            <option value="Base-case" selected>Base-case: 100%
                                                               discontinue to diet and exercise</option>
                                                           <option value="Sensitivity">Sensitivity: 100% discontinue to
                                                               no intervention</option>
                                                        </select>
                                                    </div>
                                                </td>
                                            </tr>
                                            <tr>
                                                <td>
                                                    <table>
                                                        <tr>
                                                            <td class="allInputs_InputPadding allInputs_leftText">Annual
                                                                weight rebound<br />for other AOMs</td>
                                                            <td class="allInputs_InputCell noMargin">
                                                                <div id="annualWeightReboundForOtherAOMSValue"><input
                                                                        type="text" size="6"
                                                                        name="annualWeightReboundForOtherAOMs" class="custom-user-input" maxLength="5"
                                                                        value="50.00%" /></div>
                                                            </td>
                                                        </tr>
                                                    </table>
                                                </td>
                                            </tr>
                                            <tr>
                                                <td class="allInputs_Note">Set assumptions for Wegovy and other AOMs
                                                </td>
                                            </tr>
                                            <tr>
                                                <td class="custom-select__container">
                                                    <div class="custom-select in-content flow-up">
                                                        <select name="setAssumptionForWegovy"
                                                            onChange="myDiscontinuationAssumptions();">
                                                            <option value="Base-case" selected>Base-case: Higher rates
                                                               for other AOMs</option>
                                                           <option value="Sensitivity">Sensitivity: Same weight
                                                               catch-up rates</option>
                                                        </select>
                                                    </div>
                                                </td>
                                            </tr>
                                        </table>
                                    </td>
                                </tr>
                            </table>
                        </div>
                        <!--/td>
                    </tr>
                    <tr>
                        <td colspan="7"-->

                            <div id="myInput2"></div>

                        <p id="demo"></p>



                        <script>



                            var myGenderWomen = 0;
                            var myGenderMen = 0;

                            let txtArr18_29 = [];
                            let txtArr30_39 = [];
                            let txtArr40_49 = [];
                            let txtArr50_59 = [];
                            let txtArr60_64 = [];
                            let txtArrWomen = [];
                            let txtArrMen = [];


                            let txt18_29 = 0;
                            let txt30_39 = txtArr30_39;
                            let txt40_49 = txtArr40_49;
                            let txt50_59 = txtArr50_59;
                            let txt60_64 = txtArr60_64;
                            let txtWomen = txtArrWomen;
                            let txtMen = txtArrMen;

                            let my_contrave_Display;
                            let my_xenical_Display;
                            let my_qsymia_Display;
                            let my_saxenda_Display;
                            let my_semaglutide_Display;






                            ((window, document) => {
                                "use strict";




                                // use for-of (ES2015+) to iterate over the first dimesion of 
                                // our native JS object (data.applicants).
                                // create an intermediate array to hold the text strings

                                for (let val of industry_age_distribution_data.industry_age_distribution) {
                                    // push the text into the array

                                    //      alert(val.Industry);

                                    if (industry_age_distribution_data.industry_age_distribution.find(element => val.Industry === "Total_employed_2018_Years_in_category")) {
                                        var myTotalEmployed2018_16_19 = val.years_16_to_19;
                                        var myTotalEmployed2018_20_24 = val.years_20_to_24;
                                        var myTotalEmployed2018_25_34 = val.years_25_to_34;
                                        var myTotalEmployed2018_35_44 = val.years_35_to_44;
                                        var myTotalEmployed2018_45_54 = val.years_45_to_54;
                                        var myTotalEmployed2018_55_64 = val.years_55_to_64;
                                    }

                                    if (industry_age_distribution_data.industry_age_distribution.find(element => val.Industry === "Total_employed_distributed_into_model_age_Years_in_category")) {
                                        var mydistributedIntoModelAge_16_17 = val.years_16_to_17;
                                        var mydistributedIntoModelAge_18_29 = val.years_18_to_29;
                                        var mydistributedIntoModelAge_30_39 = val.years_30_to_39;
                                        var mydistributedIntoModelAge_40_49 = val.years_40_to_49;
                                        var mydistributedIntoModelAge_50_59 = val.years_50_to_59;
                                        var mydistributedIntoModelAge_60_64 = val.years_60_to_64;
                                    }

                                    if (industry_age_distribution_data.industry_age_distribution.find(element => val.Industry === "Total_employed")) {

                                        //        txtArr.push('Industry: ' + val.Industry + ', Age Group: ' + ((((2*(val.years_16_to_19/myTotalEmployed2018_16_19)) + (5*(val.years_20_to_24/myTotalEmployed2018_20_24)) + (5*(val.years_25_to_34/myTotalEmployed2018_25_34))) / (((val.years_16_to_19)*1 + (val.years_20_to_24)*1 + (val.years_25_to_34)*1 + (val.years_35_to_44)*1 + (val.years_45_to_54)*1 + (val.years_55_to_64)*1) - ((val.years_16_to_19/myTotalEmployed2018_16_19)* mydistributedIntoModelAge_16_17)))*100).toFixed(2) + '%' );

                                        myAges18To29 = (((((2 * (val.years_16_to_19 / myTotalEmployed2018_16_19)) + (5 * (val.years_20_to_24 / myTotalEmployed2018_20_24)) + (5 * (val.years_25_to_34 / myTotalEmployed2018_25_34))) / (((val.years_16_to_19) * 1 + (val.years_20_to_24) * 1 + (val.years_25_to_34) * 1 + (val.years_35_to_44) * 1 + (val.years_45_to_54) * 1 + (val.years_55_to_64) * 1) - ((val.years_16_to_19 / myTotalEmployed2018_16_19) * mydistributedIntoModelAge_16_17))) * 100));


                                        myParams.myAges18To29 = myAges18To29;

                                        fixedAges18To29 = myAges18To29.toFixed(2);

                                        txtArr18_29.push(fixedAges18To29 + '%');

                                        myAges30To39 = (((((5 * (val.years_25_to_34 / myTotalEmployed2018_25_34)) + (5 * (val.years_35_to_44 / myTotalEmployed2018_35_44))) / (((val.years_16_to_19) * 1 + (val.years_20_to_24) * 1 + (val.years_25_to_34) * 1 + (val.years_35_to_44) * 1 + (val.years_45_to_54) * 1 + (val.years_55_to_64) * 1) - ((val.years_16_to_19 / myTotalEmployed2018_16_19) * mydistributedIntoModelAge_16_17))) * 100));

                                        myParams.myAges30To39 = myAges30To39;
                                        // console.log('myAges30To39-3',myAges30To39)


                                        fixedAges30To39 = myAges30To39.toFixed(2);

                                        txtArr30_39.push(fixedAges30To39 + '%');

                                        myAges40To49 = (((((5 * (val.years_35_to_44 / myTotalEmployed2018_35_44)) + (5 * (val.years_45_to_54 / myTotalEmployed2018_45_54))) / (((val.years_16_to_19) * 1 + (val.years_20_to_24) * 1 + (val.years_25_to_34) * 1 + (val.years_35_to_44) * 1 + (val.years_45_to_54) * 1 + (val.years_55_to_64) * 1) - ((val.years_16_to_19 / myTotalEmployed2018_16_19) * mydistributedIntoModelAge_16_17))) * 100));

                                        myParams.myAges40To49 = myAges40To49;


                                        fixedAges40To49 = myAges40To49.toFixed(2);

                                        txtArr40_49.push(fixedAges40To49 + '%');

                                        myAges50To59 = (((((5 * (val.years_45_to_54 / myTotalEmployed2018_45_54)) + (5 * (val.years_55_to_64 / myTotalEmployed2018_55_64))) / (((val.years_16_to_19) * 1 + (val.years_20_to_24) * 1 + (val.years_25_to_34) * 1 + (val.years_35_to_44) * 1 + (val.years_45_to_54) * 1 + (val.years_55_to_64) * 1) - ((val.years_16_to_19 / myTotalEmployed2018_16_19) * mydistributedIntoModelAge_16_17))) * 100));

                                        myParams.myAges50To59 = myAges50To59;


                                        fixedAges50To59 = myAges50To59.toFixed(2);

                                        txtArr50_59.push(fixedAges50To59 + '%');

                                        myAges60To64 = (((((5 * (val.years_55_to_64 / myTotalEmployed2018_55_64))) / (((val.years_16_to_19) * 1 + (val.years_20_to_24) * 1 + (val.years_25_to_34) * 1 + (val.years_35_to_44) * 1 + (val.years_45_to_54) * 1 + (val.years_55_to_64) * 1) - ((val.years_16_to_19 / myTotalEmployed2018_16_19) * mydistributedIntoModelAge_16_17))) * 100));

                                        myParams.myAges60To64 = myAges60To64;


                                        fixedAges60To64 = myAges60To64.toFixed(2);

                                        txtArr60_64.push(fixedAges60To64 + '%');



                                        // console.log('myAges18To29 - 1: ',myAges18To29);
                                        // console.log('myAges30To39 - 1: ',myAges30To39);
                                        // console.log('myAges40To49 - 1: ',myAges40To49);
                                        // console.log('myAges50To59 - 1: ',myAges50To59);
                                        // console.log('myAges60To64 - 1: ',myAges60To64);

                                        localStorage.setItem('showAges18To29', myAges18To29);
                                        localStorage.setItem('showAges30To39', myAges30To39);
                                        localStorage.setItem('showAges40To49', myAges40To49);
                                        localStorage.setItem('showAges50To59', myAges50To59);
                                        localStorage.setItem('showAges60To64', myAges60To64);




                                        // console.log(  ((val.years_16_to_19)*1 + (val.years_20_to_24)*1 + (val.years_25_to_34)*1 + (val.years_35_to_44)*1 + (val.years_45_to_54)*1 + (val.years_55_to_64)*1)  )
                                        //         console.log('txtArr ==> ', txtArr);
                                    }
                                }

                                for (let val of industry_sex_distribution_data.industry_sex_distribution) {

                                    if (industry_sex_distribution_data.industry_sex_distribution.find(element => val.Industry === inputDashboard.selectIndustry.value)) {

                                        //        txtArr.push('Industry: ' + val.Industry + ', Age Group: ' + ((((2*(val.years_16_to_19/myTotalEmployed2018_16_19)) + (5*(val.years_20_to_24/myTotalEmployed2018_20_24)) + (5*(val.years_25_to_34/myTotalEmployed2018_25_34))) / (((val.years_16_to_19)*1 + (val.years_20_to_24)*1 + (val.years_25_to_34)*1 + (val.years_35_to_44)*1 + (val.years_45_to_54)*1 + (val.years_55_to_64)*1) - ((val.years_16_to_19/myTotalEmployed2018_16_19)* mydistributedIntoModelAge_16_17)))*100).toFixed(2) + '%' );

                                        myGenderWomen = (((val.Women) * 1).toFixed(2));
                                        myParams.myGenderWomen = myGenderWomen;
                                        txtArrWomen.push(myGenderWomen + '%');
                                        myGenderMen = ((100 - ((val.Women) * 1)).toFixed(2));
                                        myParams.myGenderMen = myGenderMen;
                                        txtArrMen.push(myGenderMen + '%');


                                        // console.log(  ((val.years_16_to_19)*1 + (val.years_20_to_24)*1 + (val.years_25_to_34)*1 + (val.years_35_to_44)*1 + (val.years_45_to_54)*1 + (val.years_55_to_64)*1)  )
                                        //         console.log('txtArr ==> ', txtArr);
                                    }
                                }






                                // join the array with <br /> tags as separators
                                //  let txt = txtArr.join('<br>');
                                txt18_29 = txtArr18_29;
                                txt30_39 = txtArr30_39;
                                txt40_49 = txtArr40_49;
                                txt50_59 = txtArr50_59;
                                txt60_64 = txtArr60_64;
                                txtWomen = txtArrWomen;
                                txtMen = txtArrMen;
                                //  console.log('txt ==> ', txt);

                                //  if ((myIndustry) == inputDashboard.selectIndustry.value) {
                                //    alert(myIndustry);

                                document.getElementById("ages_18_to_29_display").innerHTML = '<input type="text" name="ages18To29Display" value="' + txt18_29 + '" size="6"></input>';
                                document.getElementById("ages_30_to_39_display").innerHTML = '<input type="text" name="ages30To39Display" value="' + txt30_39 + '" size="6"></input>';
                                document.getElementById("ages_40_to_49_display").innerHTML = '<input type="text" name="ages40To49Display" value="' + txt40_49 + '"size="6"></input>';
                                document.getElementById("ages_50_to_59_display").innerHTML = '<input type="text" name="ages50To59Display" value="' + txt50_59 + '"size="6"></input>';
                                document.getElementById("ages_60_to_64_display").innerHTML = '<input type="text" name="ages60To64Display" value="' + txt60_64 + '"size="6"></input>';
                                document.getElementById("Women_display").innerHTML = '<input type="text" name="womenDisplay" value="' + txtWomen + '"size="6"></input>';
                                document.getElementById("Men_display").innerHTML = '<input type="text" name="menDisplay" value="' + txtMen + '"size="6"></input>';
                                //  }

                                // write to DOM target
                                // document.getElementById('demo').innerHTML(txt);

                                for (let val of market_share_branded_AOM_only_data.market_share_branded_AOM_only) {
                                    // push the text into the array
                                    if (market_share_branded_AOM_only_data.market_share_branded_AOM_only.find(element => val.Brand === "Wegovy")) {

                                        var doNotIncludeSemaglutide = val.No_semaglutide;
                                        var includeInAOMClass = val.Include_AOM;
                                        var useSemaAsOnlyAOM = val.Sema_only;


                                    }

                                    if (market_share_branded_AOM_only_data.market_share_branded_AOM_only.find(element => val.Brand === "CONTRAVE_BRAND")) {
                                        var myContraveData = val.Updated;
                                    }

                                    if (market_share_branded_AOM_only_data.market_share_branded_AOM_only.find(element => val.Brand === "ORLISTAT_FRANCHISE")) {
                                        var myOrlistateData = val.Updated;
                                    }
                                    if (market_share_branded_AOM_only_data.market_share_branded_AOM_only.find(element => val.Brand === "QSYMIA_BRAND")) {
                                        var myQsymiaData = val.Updated;
                                    }
                                    if (market_share_branded_AOM_only_data.market_share_branded_AOM_only.find(element => val.Brand === "SAXENDA_BRAND")) {
                                        var mySaxendaData = val.Updated;
                                    }

                                }
                                // Conditions: No_semaglutide - True
                                if (doNotIncludeSemaglutide) {


                                    // Conditions: No_semaglutide - True, Contrave (M6)
                                    var my_contrave_Data = (myContraveData) * 1 + ((myOrlistateData) * 1 / 3);

                                    // Conditions: No_semaglutide - True, Xenical (M7)
                                    for (let val of market_share_branded_AOM_only_data.market_share_branded_AOM_only) {

                                        if (market_share_branded_AOM_only_data.market_share_branded_AOM_only.find(element => val.Brand === "ORLISTAT_FRANCHISE")) {
                                            var my_xenical_Data = val.Original3_13_2020;
                                        }
                                    }


                                    // Conditions: No_semaglutide - True, Qsymia (M8)

                                    var my_qsymia_Data = (myQsymiaData) * 1 + ((myOrlistateData) * 1 / 3);

                                    // Conditions: No_semaglutide - True, Saxenda (M9)

                                    var my_saxenda_Data = (mySaxendaData) * 1 + ((myOrlistateData) * 1 / 3);

                                    // Conditions: No_semaglutide - True, Semaglutide (0)

                                    var my_semaglutide_Data = 0;



                                }




                                //  alert(myContraveData);

                                // Conditions: Include_AOM - True

                                if (includeInAOMClass) {

                                    // Conditions: Include_AOM - True, Semaglutide (0)

                                    var my_semaglutide_Data = (4.65 / 100);

                                    // Conditions: Include_AOM - True, Contrave (M6*(1-C17))

                                    var my_contrave_Data = ((myContraveData) * 1 + ((myOrlistateData) * 1 / 3)) * (1 - my_semaglutide_Data);


                                    // Conditions: Include_AOM - True, Xenical (M7*(1-C17))

                                    for (let val of market_share_branded_AOM_only_data.market_share_branded_AOM_only) {

                                        if (market_share_branded_AOM_only_data.market_share_branded_AOM_only.find(element => val.Brand === "ORLISTAT_FRANCHISE")) {
                                            var my_xenical_Data = (val.Original3_13_2020) * 1 * (1 - my_semaglutide_Data);
                                        }
                                    }



                                    // Conditions: Include_AOM - True, Qsymia (M8*(1-C17))

                                    var my_qsymia_Data = ((myQsymiaData) * 1 + ((myOrlistateData) * 1 / 3)) * (1 - my_semaglutide_Data);

                                    // Conditions: Include_AOM - True, Saxenda (M9*(1-C17))

                                    var my_saxenda_Data = ((mySaxendaData) * 1 + ((myOrlistateData) * 1 / 3)) * (1 - my_semaglutide_Data);

                                }
                                // Conditions: Sema_only - True

                                if (useSemaAsOnlyAOM) {


                                    // Conditions: Sema_only - True, Contrave
                                    var my_contrave_Data = 0;

                                    // Conditions: Sema_only - True, Xenical

                                    var my_xenical_Data = 0;

                                    // Conditions: Sema_only - True, Qsymia

                                    var my_qsymia_Data = 0;

                                    // Conditions: Sema_only - True, Saxenda

                                    var my_saxenda_Data = 0;

                                    // Conditions: Sema_only - True, Semaglutide

                                    var my_semaglutide_Data = 1;

                                }

                                //alert(myContraveData);

                                my_contrave_Display = (my_contrave_Data * 100).toFixed(2) + "%";
                                my_xenical_Display = (my_xenical_Data * 100).toFixed(2) + "%";
                                my_qsymia_Display = (my_qsymia_Data * 100).toFixed(2) + "%";
                                my_saxenda_Display = (my_saxenda_Data * 100).toFixed(2) + "%";
                                my_semaglutide_Display = (my_semaglutide_Data * 100).toFixed(2) + "%";

                                //console.log(my_contrave_Data);
                                //console.log(my_xenical_Data);
                                //console.log(my_qsymia_Data);
                                //console.log(my_saxenda_Data);
                                //console.log(my_semaglutide_Data);

                                //alert(my_contrave_Display);

                                document.getElementById("contraveValue").innerHTML = '<input type="text" name="myContraveValue"  size="6" value="' + my_contrave_Display + '"></input>';
                                document.getElementById("qysmiaValue").innerHTML = '<input type="text" name="myQysmiaValue"  size="6" value="' + my_qsymia_Display + '"></input>';
                                document.getElementById("saxendaValue").innerHTML = '<input type="text" name="mySaxendaValue"  size="6" value="' + my_saxenda_Display + '"></input>';
                                document.getElementById("xenicalValue").innerHTML = '<input type="text" name="myXenicalValue"  size="6" value="' + my_semaglutide_Display + '"></input>';





                            })(window, document);





















                            function showIndustryAgeDistribution() {

                                localStorage.setItem('whaIsTheIndustry', inputDashboard.selectIndustry.value);


                                ((window, document) => {
                                    "use strict";

                                    // use for-of (ES2015+) to iterate over the first dimesion of 
                                    // our native JS object (data.applicants).
                                    for (let val of industry_age_distribution_data.industry_age_distribution) {
                                        if (industry_age_distribution_data.industry_age_distribution.find(element => val.Industry === inputDashboard.selectIndustry.value)) {
                                            //      console.log('Industry: ' + val.Industry + ', Age Group: ' + val.years_16_to_19);

                                        }
                                    }
                                    // create an intermediate array to hold the text strings
                                    let txtArr18_29 = [];
                                    let txtArr30_39 = [];
                                    let txtArr40_49 = [];
                                    let txtArr50_59 = [];
                                    let txtArr60_64 = [];
                                    let txtArrWomen = [];
                                    let txtArrMen = [];

                                    for (let val of industry_age_distribution_data.industry_age_distribution) {
                                        // push the text into the array
                                        if (industry_age_distribution_data.industry_age_distribution.find(element => val.Industry === "Total_employed_2018_Years_in_category")) {
                                            var myTotalEmployed2018_16_19 = val.years_16_to_19;
                                            var myTotalEmployed2018_20_24 = val.years_20_to_24;
                                            var myTotalEmployed2018_25_34 = val.years_25_to_34;
                                            var myTotalEmployed2018_35_44 = val.years_35_to_44;
                                            var myTotalEmployed2018_45_54 = val.years_45_to_54;
                                            var myTotalEmployed2018_55_64 = val.years_55_to_64;
                                        }

                                        if (industry_age_distribution_data.industry_age_distribution.find(element => val.Industry === "Total_employed_distributed_into_model_age_Years_in_category")) {
                                            var mydistributedIntoModelAge_16_17 = val.years_16_to_17;
                                            var mydistributedIntoModelAge_18_29 = val.years_18_to_29;
                                            var mydistributedIntoModelAge_30_39 = val.years_30_to_39;
                                            var mydistributedIntoModelAge_40_49 = val.years_40_to_49;
                                            var mydistributedIntoModelAge_50_59 = val.years_50_to_59;
                                            var mydistributedIntoModelAge_60_64 = val.years_60_to_64;
                                        }


                                        //console.log(inputDashboard.selectIndustry.value);

                                        if (industry_age_distribution_data.industry_age_distribution.find(element => val.Industry === inputDashboard.selectIndustry.value)) {

                                            //        txtArr.push('Industry: ' + val.Industry + ', Age Group: ' + ((((2*(val.years_16_to_19/myTotalEmployed2018_16_19)) + (5*(val.years_20_to_24/myTotalEmployed2018_20_24)) + (5*(val.years_25_to_34/myTotalEmployed2018_25_34))) / (((val.years_16_to_19)*1 + (val.years_20_to_24)*1 + (val.years_25_to_34)*1 + (val.years_35_to_44)*1 + (val.years_45_to_54)*1 + (val.years_55_to_64)*1) - ((val.years_16_to_19/myTotalEmployed2018_16_19)* mydistributedIntoModelAge_16_17)))*100).toFixed(2) + '%' );

                                            //        var myAges18To29 = ( ((((2*(val.years_16_to_19/myTotalEmployed2018_16_19)) + (5*(val.years_20_to_24/myTotalEmployed2018_20_24)) + (5*(val.years_25_to_34/myTotalEmployed2018_25_34))) / (((val.years_16_to_19)*1 + (val.years_20_to_24)*1 + (val.years_25_to_34)*1 + (val.years_35_to_44)*1 + (val.years_45_to_54)*1 + (val.years_55_to_64)*1) - ((val.years_16_to_19/myTotalEmployed2018_16_19)* mydistributedIntoModelAge_16_17)))*100).toFixed(2));
                                            //        txtArr18_29.push(myAges18To29 + '%');

                                            //        var myAges30To39 = ( ((((5*(val.years_25_to_34/myTotalEmployed2018_25_34)) + (5*(val.years_35_to_44/myTotalEmployed2018_35_44))) / (((val.years_16_to_19)*1 + (val.years_20_to_24)*1 + (val.years_25_to_34)*1 + (val.years_35_to_44)*1 + (val.years_45_to_54)*1 + (val.years_55_to_64)*1) - ((val.years_16_to_19/myTotalEmployed2018_16_19)* mydistributedIntoModelAge_16_17)))*100).toFixed(2));
                                            //        txtArr30_39.push(myAges30To39 + '%' );

                                            //        var myAges40To49 = ( ((((5*(val.years_35_to_44/myTotalEmployed2018_35_44)) + (5*(val.years_45_to_54/myTotalEmployed2018_45_54))) / (((val.years_16_to_19)*1 + (val.years_20_to_24)*1 + (val.years_25_to_34)*1 + (val.years_35_to_44)*1 + (val.years_45_to_54)*1 + (val.years_55_to_64)*1) - ((val.years_16_to_19/myTotalEmployed2018_16_19)* mydistributedIntoModelAge_16_17)))*100).toFixed(2));
                                            //        txtArr40_49.push(myAges40To49 + '%' );

                                            //        var myAges50To59 = ( ((((5*(val.years_45_to_54/myTotalEmployed2018_45_54)) + (5*(val.years_55_to_64/myTotalEmployed2018_55_64))) / (((val.years_16_to_19)*1 + (val.years_20_to_24)*1 + (val.years_25_to_34)*1 + (val.years_35_to_44)*1 + (val.years_45_to_54)*1 + (val.years_55_to_64)*1) - ((val.years_16_to_19/myTotalEmployed2018_16_19)* mydistributedIntoModelAge_16_17)))*100).toFixed(2));
                                            //        txtArr50_59.push(myAges50To59 + '%' );

                                            //        var myAges60To64 = ( ((((5*(val.years_55_to_64/myTotalEmployed2018_55_64))) / (((val.years_16_to_19)*1 + (val.years_20_to_24)*1 + (val.years_25_to_34)*1 + (val.years_35_to_44)*1 + (val.years_45_to_54)*1 + (val.years_55_to_64)*1) - ((val.years_16_to_19/myTotalEmployed2018_16_19)* mydistributedIntoModelAge_16_17)))*100).toFixed(2));
                                            //        txtArr60_64.push(myAges60To64 + '%' );


                                            myAges18To29 = (((((2 * (val.years_16_to_19 / myTotalEmployed2018_16_19)) + (5 * (val.years_20_to_24 / myTotalEmployed2018_20_24)) + (5 * (val.years_25_to_34 / myTotalEmployed2018_25_34))) / (((val.years_16_to_19) * 1 + (val.years_20_to_24) * 1 + (val.years_25_to_34) * 1 + (val.years_35_to_44) * 1 + (val.years_45_to_54) * 1 + (val.years_55_to_64) * 1) - ((val.years_16_to_19 / myTotalEmployed2018_16_19) * mydistributedIntoModelAge_16_17))) * 100));

                                            myParams.myAges18To29 = myAges18To29;
                                            // console.log('myAges18To29', myAges18To29)

                                            var fixedAges18To29 = myAges18To29.toFixed(2);

                                            txtArr18_29.push(fixedAges18To29 + '%');

                                            myAges30To39 = (((((5 * (val.years_25_to_34 / myTotalEmployed2018_25_34)) + (5 * (val.years_35_to_44 / myTotalEmployed2018_35_44))) / (((val.years_16_to_19) * 1 + (val.years_20_to_24) * 1 + (val.years_25_to_34) * 1 + (val.years_35_to_44) * 1 + (val.years_45_to_54) * 1 + (val.years_55_to_64) * 1) - ((val.years_16_to_19 / myTotalEmployed2018_16_19) * mydistributedIntoModelAge_16_17))) * 100));

                                            var fixedAges30To39 = myAges30To39.toFixed(2);
                                            // console.log('myAges30To39-4',myAges30To39)

                                            txtArr30_39.push(fixedAges30To39 + '%');

                                            myAges40To49 = (((((5 * (val.years_35_to_44 / myTotalEmployed2018_35_44)) + (5 * (val.years_45_to_54 / myTotalEmployed2018_45_54))) / (((val.years_16_to_19) * 1 + (val.years_20_to_24) * 1 + (val.years_25_to_34) * 1 + (val.years_35_to_44) * 1 + (val.years_45_to_54) * 1 + (val.years_55_to_64) * 1) - ((val.years_16_to_19 / myTotalEmployed2018_16_19) * mydistributedIntoModelAge_16_17))) * 100));

                                            var fixedAges40To49 = myAges40To49.toFixed(2);

                                            txtArr40_49.push(fixedAges40To49 + '%');

                                            myAges50To59 = (((((5 * (val.years_45_to_54 / myTotalEmployed2018_45_54)) + (5 * (val.years_55_to_64 / myTotalEmployed2018_55_64))) / (((val.years_16_to_19) * 1 + (val.years_20_to_24) * 1 + (val.years_25_to_34) * 1 + (val.years_35_to_44) * 1 + (val.years_45_to_54) * 1 + (val.years_55_to_64) * 1) - ((val.years_16_to_19 / myTotalEmployed2018_16_19) * mydistributedIntoModelAge_16_17))) * 100));

                                            var fixedAges50To59 = myAges50To59.toFixed(2);

                                            txtArr50_59.push(fixedAges50To59 + '%');

                                            myAges60To64 = (((((5 * (val.years_55_to_64 / myTotalEmployed2018_55_64))) / (((val.years_16_to_19) * 1 + (val.years_20_to_24) * 1 + (val.years_25_to_34) * 1 + (val.years_35_to_44) * 1 + (val.years_45_to_54) * 1 + (val.years_55_to_64) * 1) - ((val.years_16_to_19 / myTotalEmployed2018_16_19) * mydistributedIntoModelAge_16_17))) * 100));

                                            var fixedAges60To64 = myAges60To64.toFixed(2);

                                            txtArr60_64.push(fixedAges60To64 + '%');


                                            localStorage.setItem('showAges18To29', myAges18To29);
                                            localStorage.setItem('showAges30To39', myAges30To39);
                                            localStorage.setItem('showAges40To49', myAges40To49);
                                            localStorage.setItem('showAges50To59', myAges50To59);
                                            localStorage.setItem('showAges60To64', myAges60To64);

                                            // console.log(  ((val.years_16_to_19)*1 + (val.years_20_to_24)*1 + (val.years_25_to_34)*1 + (val.years_35_to_44)*1 + (val.years_45_to_54)*1 + (val.years_55_to_64)*1)  )
                                            //         console.log('txtArr ==> ', txtArr);
                                        }
                                    }

                                    console.log('what is the industry? ', inputDashboard.selectIndustry.value);

                                    for (let val of industry_sex_distribution_data.industry_sex_distribution) {

                                        if (industry_sex_distribution_data.industry_sex_distribution.find(element => val.Industry === inputDashboard.selectIndustry.value)) {

                                            //        txtArr.push('Industry: ' + val.Industry + ', Age Group: ' + ((((2*(val.years_16_to_19/myTotalEmployed2018_16_19)) + (5*(val.years_20_to_24/myTotalEmployed2018_20_24)) + (5*(val.years_25_to_34/myTotalEmployed2018_25_34))) / (((val.years_16_to_19)*1 + (val.years_20_to_24)*1 + (val.years_25_to_34)*1 + (val.years_35_to_44)*1 + (val.years_45_to_54)*1 + (val.years_55_to_64)*1) - ((val.years_16_to_19/myTotalEmployed2018_16_19)* mydistributedIntoModelAge_16_17)))*100).toFixed(2) + '%' );

                                            myGenderWomen = (((val.Women) * 1).toFixed(2));
                                            txtArrWomen.push(myGenderWomen + '%');
                                            myParams.myGenderWomen = myGenderWomen;

                                            myGenderMen = ((100 - ((val.Women) * 1)).toFixed(2));
                                            txtArrMen.push(myGenderMen + '%');
                                            myParams.myGenderMen = myGenderMen;

                                            localStorage.setItem('showWomen', myGenderWomen);
                                            localStorage.setItem('showMen', myGenderMen);

                                            var testingWomen = localStorage.getItem('showWomen');
                                            var testingMen = localStorage.getItem('showMen');



                                            console.log('showWomen: ', testingWomen);
                                            console.log('showMen: ', testingMen);



                                            // console.log(  ((val.years_16_to_19)*1 + (val.years_20_to_24)*1 + (val.years_25_to_34)*1 + (val.years_35_to_44)*1 + (val.years_45_to_54)*1 + (val.years_55_to_64)*1)  )
                                            //         console.log('txtArr ==> ', txtArr);
                                        }
                                    }






                                    // join the array with <br /> tags as separators
                                    //  let txt = txtArr.join('<br>');
                                    let txt18_29 = txtArr18_29;
                                    let txt30_39 = txtArr30_39;
                                    let txt40_49 = txtArr40_49;
                                    let txt50_59 = txtArr50_59;
                                    let txt60_64 = txtArr60_64;
                                    let txtWomen = txtArrWomen;
                                    let txtMen = txtArrMen;
                                    //  console.log('txt ==> ', txt);

                                    //  if ((myIndustry) == inputDashboard.selectIndustry.value) {
                                    //    alert(myIndustry);

                                    document.getElementById("ages_18_to_29_display").innerHTML = '<input type="text" name="ages18To29Display" value="' + txt18_29 + '"size="6"></input>';
                                    document.getElementById("ages_30_to_39_display").innerHTML = '<input type="text" name="ages30To39Display" value="' + txt30_39 + '"size="6"></input>';
                                    document.getElementById("ages_40_to_49_display").innerHTML = '<input type="text" name="ages40To49Display" value="' + txt40_49 + '"size="6"></input>';
                                    document.getElementById("ages_50_to_59_display").innerHTML = '<input type="text" name="ages50To59Display" value="' + txt50_59 + '"size="6"></input>';
                                    document.getElementById("ages_60_to_64_display").innerHTML = '<input type="text" name="ages60To64Display" value="' + txt60_64 + '"size="6"></input>';
                                    document.getElementById("Women_display").innerHTML = '<input type="text" name="womenDisplay" value="' + txtWomen + '"size="6"></input>';
                                    document.getElementById("Men_display").innerHTML = '<input type="text" name="menDisplay" value="' + txtMen + '"size="6"></input>';
                                    //  }

                                    // write to DOM target
                                    // document.getElementById('demo').innerHTML(txt);


                                })(window, document);
customUserInputs()
                                // document.getElementById("demo").innerHTML = 'hello ' + myObject[0].applicant.name + " it looks like you're " + myObject[0].applicant.age + " years old!";
                            }
                        </script>
                        <!--/td>
                    </tr>
                </tbody>
            </table-->
                    </div>
                </div>
            </div>

        </div>
    </form>

    <script>
        var coll = document.getElementsByClassName("collapsible");
        var i;

        for (i = 0; i < coll.length; i++) {
            coll[i].addEventListener("click", function () {
                this.classList.toggle("active");
                var content = this.nextElementSibling;
                if (content.style.display === "block") {
                    content.style.display = "none";
                } else {
                    content.style.display = "block";
                }
            });
        }


//    localStorage.clear('whaIsTheIndustry');
//    localStorage.clear('myNI_effic_y1');
//    localStorage.clear('myLI_effic_y1');
customUserInputs();
    </script>

   
<!-- ******************** PASTING ENDS HERE ******************** -->
<!-- ******************** PASTING ENDS HERE ******************** -->
<!-- ******************** PASTING ENDS HERE ******************** -->










</div>












<!-- Modal Triggers -->
<!--
<a data-modal-trigger-open data-modal-target=".modal-1" class="tabs-modal-trigger one disable-swipe" data-button-name="Modal - Lifestyle Modification"></a>
<a data-modal-trigger-open data-modal-target=".modal-2" class="tabs-modal-trigger two disable-swipe" data-button-name="Modal - Anti-obesity Medications"></a>
<a data-modal-trigger-open data-modal-target=".modal-3" class="tabs-modal-trigger three disable-swipe" data-button-name="Modal - Bariatric Surgery"></a>
-->
<!-- Modal Containers -->

<!--
<div class="modal-1 content-modal modal" data-modal-name="Lifestyle Modification">
	<a class="modal-button-close" data-modal-trigger-close></a>
</div>

<div class="modal-2 content-modal modal" data-modal-name="Anti-obesity Medications">
	<a class="modal-button-close" data-modal-trigger-close></a>
</div>

<div class="modal-3 content-modal modal" data-modal-name="Bariatric Surgery">
	<a class="modal-button-close" data-modal-trigger-close></a>
</div>
-->


